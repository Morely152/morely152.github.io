<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java学习笔记（三）：面向对象编程</title>
    <link href="/2025/08/24/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/08/24/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>声明：本篇笔记部分摘自<a href="https://detail.tmall.com/item.htm?ali_refid=a3_420434_1006%3A1151895243%3AN%3AoB1xLXSDdjSpCunkFwpZbCtvD%2B6YEaA9%3A39f8fcdda956d1ec63523e9a6e9e2355&amp;id=708821240842&amp;mi_id=0000mg2-P7Ustbzeym2_6DxuUMLCpndkVCAGc5EaA_l8QQ0&amp;mm_sceneid=1_0_128421313_0&amp;priceTId=2147831a17554253371677975e1dca&amp;spm=a21n57.1.hoverItem.2&amp;utparam=%7B%22aplus_abtest%22%3A%226b956865e0df43cd4a6620880d877f11%22%7D&amp;xxc=ad_ztc">《Java核心技术（卷Ⅰ） - 机械工业出版社》</a>，遵循<a href="https://creativecommons.org/licenses/by/4.0/legalcode.zh-hans">CC BY 4.0协议</a>。<br />存在由AI生成的小部分内容，仅供参考，请仔细甄别可能存在的错误。从本节开始，所有的代码片段都尽量保证完整性，可以直接复制粘贴到IDEA中运行（文件名需为Demo.java以便编译器能找到主类）。代码片段均经过实机运行检测，若运行结果与示例不同，欢迎在文末的评论区指出错误。</p></blockquote><center><h1>第一节 面向对象基础</h1></center><h1 id="一-引入"><a class="markdownIt-Anchor" href="#一-引入"></a> 一、引入</h1><h2 id="1面向对象概述"><a class="markdownIt-Anchor" href="#1面向对象概述"></a> 1.面向对象概述</h2><blockquote><p>引言：面向对象编程，是一种通过对象的方式，把现实世界映射到计算机模型的一种编程方法。</p></blockquote><p>拿洗衣服为例，涉及到以下流程：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">人放衣服到洗衣机里 -&gt; 洗衣机洗衣服 -&gt; 洗衣机甩干 -&gt; 人取出衣服晾晒<br></code></pre></td></tr></table></figure><p>经典的面向过程编程，会实现这几个函数然后依次调用：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">pushClothes</span>(person, machine);<br><span class="hljs-built_in">washClothes</span>(machine, clothes);<br><span class="hljs-built_in">dryingClothes</span>(machine, clothes);<br><span class="hljs-built_in">fetchClothes</span>(person, machine);<br></code></pre></td></tr></table></figure><p>面向对象编程则会将这一系列流程分为<code>对象</code>、<code>动作</code>（方法） 和 <code>字段</code>（属性）。如上例中的人、洗衣机和衣服可以看做是三个独立的对象；人具有放衣服、拿衣服两个动作；洗衣机具有洗衣服、烘干两个动作；而衣服具有是否干净以及是否在洗衣机里的属性。</p><p>这样一来，我们就给这些对象定义一系列的行为（又称作方法<br />、函数）以及属性；程序运行的逻辑就从面向过程的自上而下变成了对象之间的交互；这样的程序设计思想抽象程度更高，也很好地降低了代码之间的耦合度，是一种更加接近现实的程序设计思路。</p><blockquote><p>关于上文中提到的“降低了代码之间的耦合度”，这里给出我的理解，或许不一定正确：<br />对于一个“人吃饭”的这么一个事儿，面向过程编程定义的函数一般是 <strong>吃(人,饭)</strong>，即参数中包含了人和饭两个对象；而面向对象编程中，一般将吃饭看做是人的行为，将饭作为人这个吃的行为设计到的另一个对象，于是写成 <strong>人.吃(饭)</strong>， 这样一来，无需像 <strong>吃(人,饭)</strong> 一样，既要考虑饭，还要考虑人，把人和饭绑定在一起。面向对象的写法中，&quot;吃&quot;是人的普遍行为，只要考虑是吃什么饭，而不用想是什么人来吃，这样就解除了人和饭的绑定，于是就让不同模块的代码之间的耦合度降低了。</p></blockquote><p>需要注意以下两点：</p><ol><li>面向对象中的“对象”不一定是具象化的物体，比如说小狗、桌子等，也可以是一个抽象的概念，如成绩（具有分数、绩点等属性；修改分数、计算绩点等方法）、字符串（具有长度、内容等属性；计算长度、替换内容等方法）。</li><li>虽然面向对象看起来比面向过程看起来更加高深莫测，在实际应用时也各有各的优势，不能认为学习了面向对象就看不上/用不着面向过程了。</li><li>类与对象的关系：类是概念，对象是概念衍生出的实例，即 <code>类 --实例化--&gt; 对象</code>。如同所有的人统称为“人类”，每一个人都是“人类”这一概念下的实体对象。</li></ol><h2 id="2重点学习方向"><a class="markdownIt-Anchor" href="#2重点学习方向"></a> 2.重点学习方向</h2><p>本篇笔记重点学习Java中面向对象的以下内容：</p><ol><li>基本概念<ul><li>类</li><li>实例</li><li>方法</li></ul></li><li>面向对象特性<ul><li>继承</li><li>多态</li></ul></li><li>Java提供的一些机制<ul><li>package</li><li>classpath</li><li>jar</li></ul></li><li>Java核心类<ul><li>字符串</li><li>包装类型</li><li>JavaBean</li><li>枚举</li><li>常用工具类</li></ul></li></ol><p>最后同样需要提醒的是，即使学习了面向对象的程序设计思想，也不能保证能找到对象🤣。</p><p><img src="20250821160749656.png#sc" alt="" /></p><h1 id="二-面向对象基础"><a class="markdownIt-Anchor" href="#二-面向对象基础"></a> 二、面向对象基础</h1><h2 id="1一个简单的demo"><a class="markdownIt-Anchor" href="#1一个简单的demo"></a> 1.一个简单的demo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 蛋糕类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cake</span> &#123;<br>    <span class="hljs-comment">// 属性：蛋糕的数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br><br>    <span class="hljs-comment">// 构造方法：创建蛋糕对象时初始化数量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cake</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取当前蛋糕数量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-comment">// 蛋糕被吃：数量减一</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beEaten</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            count--;<br>            System.out.println(<span class="hljs-string">&quot;蛋糕被吃了一块，剩余数量: &quot;</span> + count);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;已经没有蛋糕了！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 人类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">// 属性：人的名字</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">// 构造方法：创建人对象时设置名字</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">// 进食方法：人吃蛋糕</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(Cake cake)</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;开始吃蛋糕...&quot;</span>);<br>        <span class="hljs-comment">// 调用蛋糕的被吃方法</span><br>        cake.beEaten();<br>    &#125;<br><br>    <span class="hljs-comment">// 获取名字</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 主类：程序入口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 创建一个有3块蛋糕的对象</span><br>        <span class="hljs-type">Cake</span> <span class="hljs-variable">cake</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cake</span>(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">// 创建一个名叫&quot;小明&quot;的人</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">xiaoming</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;小明&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;初始蛋糕数量: &quot;</span> + cake.getCount());<br><br>        <span class="hljs-comment">// 小明吃蛋糕</span><br>        xiaoming.eat(cake); <span class="hljs-comment">// 第一次吃</span><br>        xiaoming.eat(cake); <span class="hljs-comment">// 第二次吃</span><br>        xiaoming.eat(cake); <span class="hljs-comment">// 第三次吃</span><br>        xiaoming.eat(cake); <span class="hljs-comment">// 第四次吃（尝试吃已经吃完的蛋糕）</span><br>        <br>        System.out.println(<span class="hljs-string">&quot;最终蛋糕数量: &quot;</span> + cake.getCount());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java中类的声明、属性和方法的定义、实例化以及方法的调用都和C<ins>几乎相同，这里不再赘述；有C</ins>编程经验的同学应该都能看懂上面这个简单的例子。运行程序，输出了小明吃蛋糕的过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">初始蛋糕数量: <span class="hljs-number">3</span><br>小明开始吃蛋糕...<br>蛋糕被吃了一块，剩余数量: <span class="hljs-number">2</span><br>小明开始吃蛋糕...<br>蛋糕被吃了一块，剩余数量: <span class="hljs-number">1</span><br>小明开始吃蛋糕...<br>蛋糕被吃了一块，剩余数量: <span class="hljs-number">0</span><br>小明开始吃蛋糕...<br>已经没有蛋糕了！<br>最终蛋糕数量: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="2数据保护"><a class="markdownIt-Anchor" href="#2数据保护"></a> 2.数据保护</h2><p>在面向对象程序设计时，为了防止外部的程序读写对象的属性，从而引起意料之外的错误，通常把属性设置为 <code>private</code> 或 <code>protected</code>（需要继承时）,然后通过定义读写的方法 <code>getXXX()</code> 或 <code>setXXX()</code> 来向外暴露接口，其中包含数据验证和读写等逻辑，通过调用这些方法来读取和修改对象中的属性。如下例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>    &#125;  <br>  <br><span class="hljs-comment">// 读取name的值</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> name;  <br>    &#125;  <br>  <br><span class="hljs-comment">// 写入name的值，并进行数据验证</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;  <br>    <span class="hljs-keyword">if</span> (!name.isEmpty() &amp;&amp; name != <span class="hljs-literal">null</span>) &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>    &#125;  <br>&#125;<br>&#125;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三 &quot;</span>);  <br>    <br>    System.out.println(s1.getName());  <br>        s1.setName(<span class="hljs-string">&quot;李四&quot;</span>);  <br>        System.out.println(s1.getName());  <br>    <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>运行程序，先输出了对象 <code>s1</code> 的 <code>name</code> 初始值“张三”，然后输出了修改后的值“李四”。</p><h2 id="3this变量"><a class="markdownIt-Anchor" href="#3this变量"></a> 3.this变量</h2><p>在方法内部，可以使用一个隐含的变量 <code>this</code> ，它始终指向当前实例。因此，通过 <code>this</code> 就可以访问当前实例的字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> num;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Number</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.num = num;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">// 两数相加</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addTo</span><span class="hljs-params">(Number other)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.num = <span class="hljs-built_in">this</span>.num + other.num;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.num;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>  <br>        <span class="hljs-type">Number</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">1</span>);  <br>        <span class="hljs-type">Number</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">2</span>);  <br>  <br>        System.out.println(n1.addTo(n2));  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>小技巧：两个同类的对象进行操作时（如累加、比较），可以在对应的方法形参中将另一个对象命名为 <code>other</code>，这样使用<code>this</code> 和 <code>other</code> 就可以很清晰地弄清楚是在对哪个对象进行操作。</p></blockquote><h2 id="4可变参数"><a class="markdownIt-Anchor" href="#4可变参数"></a> 4.可变参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Numbers</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] nums;  <br>  <br>    <span class="hljs-comment">// 这里参数其实可以直接写 int[] nums,这里是为了演示可变参数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Numbers</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.nums = nums;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printOut</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(Arrays.toString(<span class="hljs-built_in">this</span>.nums));  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>  <br>        <span class="hljs-type">Numbers</span> <span class="hljs-variable">numbers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Numbers</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>);  <br>        numbers.printOut();  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>&quot;可变参数&quot;主要&quot;变&quot;的是参数的个数，实现类似于数组的效果。通过指定形参为 <code>数据类型... 形参名</code> 的格式,可以指定这个参数是可变的。可变参数须位于参数列表的末尾，以免混淆前面参数的一一对应关系。</p><p>（这里的三个点是英文输入法下的句号 <code>...</code> 哈，不要打成中文省略号 <code>…</code> 【Shift + 6】了。编程语言中字符串之外的符号应该都是英文符号。）</p><h1 id="三-构造方法"><a class="markdownIt-Anchor" href="#三-构造方法"></a> 三、构造方法</h1><p>与C++类似，Java的构造方法须与类同名，没有返回值，且被声明为 <code>public</code>（不然外部都无法调用构造函数来进行实例化）。一个类可以有多个参数不同的构造方法（即方法重载，其实一般的方法也支持重载），编译器会根据参数自动选择执行相应的构造方法。</p><p>一个构造函数还可以调用其他的构造函数以提高代码复用率：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 注意：此代码片段不完整</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>(name, <span class="hljs-number">18</span>); <span class="hljs-comment">// 调用另一个构造方法Person(String, int)</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;Unnamed&quot;</span>); <span class="hljs-comment">// 调用另一个构造方法Person(String)</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，Java<strong>不支持</strong>C++中通过成员初始化列表定义构造函数，成员变量的赋值必须在函数体中进行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String n)</span> : name(n); <span class="hljs-comment">// ×，不支持这样的写法</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String n)</span> &#123;          <span class="hljs-comment">// √，这样写是正确的</span><br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四-继承"><a class="markdownIt-Anchor" href="#四-继承"></a> 四、继承</h1><h2 id="1概述"><a class="markdownIt-Anchor" href="#1概述"></a> 1.概述</h2><p>使用关键字 <code>extend</code> 继承一个现有的类，会自动拥有它的属性和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>  ...<br>&#125;  <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;  <br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>被继承的类被称作父类、基类；相对而言继承父类的类被称作子类、派生类。注意到这里的 <code>Person</code> 类没有 <code>extend</code> ,这种情况下编译器自动添加 <code>extend Object</code>,即上例的继承树是这样的：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">┌───────────┐<br>│   <span class="hljs-built_in">Object</span>  │<br>└───────────┘<br>  ▲<br>  │<br>┌───────────┐<br>│  Person   │<br>└───────────┘<br>      ▲<br>      │<br>┌───────────┐<br>│  Student  │<br>└───────────┘<br></code></pre></td></tr></table></figure><p>Java只允许一个class继承自一个类，因此一个类有且仅有一个父类。<code>Object</code> 比较特殊，它没有父类。</p><p>与C++相同，继承类也无法访问父类的 <code>private</code> 属性或方法，只能访问 <code>public</code> 和 <code>protected</code>。想要在子类中访问父类的属性，需要像 <code>this</code> 一样使用 <code>super</code> 关键字。</p><p>子类应该是以下三种之一：</p><ul><li><code>final</code>（不允许继续继承）</li><li><code>sealed</code>（进一步限制继承）</li><li><code>non-sealed</code>（开放继承）</li></ul><p>与C++不同的是，Java中的继承只有 <code>public</code> 一种，没有 <code>protected</code> 继承和 <code>private</code> 继承。</p><h2 id="2继承的构造过程"><a class="markdownIt-Anchor" href="#2继承的构造过程"></a> 2.继承的构造过程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">protected</span> String name;  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> age;  <br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>        <span class="hljs-built_in">this</span>.age = age;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> score; <br>     <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">int</span> score)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.score = score;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Xiao Ming&quot;</span>, <span class="hljs-number">12</span>, <span class="hljs-number">89</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>上面这个程序看起来没啥问题，实际上将它粘贴到编辑器中，就会发现子类的构造函数报错了。提示 <code>'Person'中没有可用的无形参构造函数</code>。这是因为Java在构造子类的对象之前，必须先调用父类的构造方法，如果没有明确调用父类的构造方法，就会默认在子类的构造方法前面加上<code>super()</code>（很理所当然，先有父再有子么），然后一看发现父类没有这么一个无参数的构造函数，于是就无了…</p><p>想要解决这个问题也很简单，直接调用 <code>Person</code> 类存在的某个构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> score;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">int</span> score)</span> &#123;<br><span class="hljs-built_in">super</span>(name, age); <span class="hljs-comment">// 调用父类的构造方法Person(String, int)</span><br><span class="hljs-built_in">this</span>.score = score;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果父类没有默认的构造方法，子类就必须显式调用 <code>super()</code> 并给出参数，以便让编译器定位到父类的一个合适的构造方法。同时也要注意，子类<strong>不会</strong>继承任何父类的构造方法。子类默认的构造方法是编译器自动生成的，不是继承自父类的。</p><h2 id="3继承的限制"><a class="markdownIt-Anchor" href="#3继承的限制"></a> 3.继承的限制</h2><p>不允许某个类被其他的类所继承，可以使用 <code>final</code> 修饰符打断继承。从Java 15开始，允许使用 <code>sealed</code> 修饰class，并通过 <code>permits</code> 明确写出能够从该class继承的子类名称（子类白名单）。</p><p>以下是一个演示Shape父类允许继承三种类型，以及子类的继承方式的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> <span class="hljs-keyword">permits</span> Rect, Circle, Triangle &#123; &#125;   <span class="hljs-comment">// 明确指定只能继承给这三个类</span><br>  <br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rect</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123; &#125;                      <span class="hljs-comment">// √，这个类在允许继承的列表中</span><br>  <br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123; &#125;                    <span class="hljs-comment">// √，这个类在允许继承的列表中</span><br>  <br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123; &#125;                  <span class="hljs-comment">// √，这个类在允许继承的列表中</span><br>  <br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Line</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123; &#125;                      <span class="hljs-comment">// ×，这个类不允许继承Shape类</span><br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>运行该程序，由于 <code>Shape</code> 类中没有允许 <code>Line</code> 类继承，该程序会报告如下的错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java: 类不得扩展密封类：Shape（因为它未列在其 <span class="hljs-string">&#x27;permits&#x27;</span> 子句中）<br></code></pre></td></tr></table></figure><blockquote><p>为了获得较好的编码体验，建议使用 Intellij IDEA 来进行Java的代码编写工作。IDEA有较好的错误反馈、完整的工具链支持（Git、数据库等），甚至能进行一些简单的代码补全。</p></blockquote><h2 id="4向上转型"><a class="markdownIt-Anchor" href="#4向上转型"></a> 4.向上转型</h2><p>想想一个情景：我们定义了父类 <code>Person</code> 及子类 <code>Student</code>，当然可以使用这两句来分别将其实例化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br></code></pre></td></tr></table></figure><p>诶，有的同学就要问了，能不能写成这样咧？<br /><img src="20250822100201538.png#sc" alt="" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br></code></pre></td></tr></table></figure><p>蛙趣，竟然没报错！这是是因为 <code>Student</code> 继承自 <code>Person</code> ，因此，它拥有 <code>Person</code> 的全部功能，具备父类的所有属性，也能够执行父类所有的方法。这种把一个子类类型安全地变为父类类型的赋值，被称为<strong>向上转型（upcasting）</strong>，相当于使用子类的构造方法来构造一个父类的对象 <s>怎么感觉有点倒反天罡…</s></p><p>很容易就能猜到，向上转型是可以跨越多层的，比如说继承关系是 <code>a -&gt; b -&gt; c -&gt; d</code>，d可以直接向上转型成a、b以及c这三类。</p><h2 id="5向下转型"><a class="markdownIt-Anchor" href="#5向下转型"></a> 5.向下转型</h2><p>和向上转型相反，如果把一个父类类型强制转型为子类类型，就是<strong>向下转型（downcasting）</strong>。向下转型通常使用强制类型转换实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-type">Person</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> (Student) s; <span class="hljs-comment">// √,是相同的类型</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (Stuident) p; <span class="hljs-comment">// 将父类转型为子类呢？</span><br></code></pre></td></tr></table></figure><p>由于子类通常比父类有更多的属性或方法，这样向下转型大多数情况下是不允许的，因为父类无法实现一些子类特有的方法。向下转型失败时，编译器会报告 <code>ClassCastException</code>。</p><p>为了避免向下转型出错，Java提供了 <code>instanceof</code> 操作符，可以先判断一个实例究竟是不是某种类型,写法为 <code>(a instanceof b)</code>，返回一个布尔值表示a是否与b类型相同，或者是否为b的子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>System.out.println(p <span class="hljs-keyword">instanceof</span> Person);  <span class="hljs-comment">// true</span><br>System.out.println(p <span class="hljs-keyword">instanceof</span> Student); <span class="hljs-comment">// false</span><br><br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>System.out.println(s <span class="hljs-keyword">instanceof</span> Person);  <span class="hljs-comment">// true</span><br>System.out.println(s <span class="hljs-keyword">instanceof</span> Student); <span class="hljs-comment">// true</span><br><br><span class="hljs-type">Student</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>System.out.println(n <span class="hljs-keyword">instanceof</span> Student); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>需要向下转型时，可以先判断是否可以转型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br><span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> Student) &#123;<br><span class="hljs-comment">// 只有判断成功才会向下转型:</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (Student) p; <span class="hljs-comment">// 一定可以成功</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从Java 14开始，判断 <code>instanceof</code> 后，可以直接转型为指定变量，避免再次强制转型:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;  <br>        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> String s) &#123;  <br>            <span class="hljs-comment">// String s = (String) obj;这一句不用再写了</span><br>            System.out.println(s.toUpperCase());  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6组合"><a class="markdownIt-Anchor" href="#6组合"></a> 6.组合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br><span class="hljs-keyword">protected</span> String name;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>对于这一个 <code>Book</code> 类，也具有 <code>name</code> 字段。但是如果想表示一个 <code>Student</code> 拥有一本书，无论是让 <code>Student</code> 继承 <code>Book</code> 还是让 <code>Book</code> 继承 <code>Student</code> 都显得不太对劲。这里将 <code>Book</code> 作为 <code>Student</code> 的属性就合理了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">protected</span> Book book;<br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> score;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Student</code> 作为 <code>Person</code> 的子类，是归属（is）的关系，即 <code>Student is Person</code>，这种关系适合使用继承。而对于 <code>Book</code>，应该是 <code>Student has Book</code> 的持有（has）关系，这种关系适合用组合。</p><h1 id="五-多态"><a class="markdownIt-Anchor" href="#五-多态"></a> 五、多态</h1><h2 id="1方法覆写"><a class="markdownIt-Anchor" href="#1方法覆写"></a> 1.方法覆写</h2><p>在继承关系中，子类如果定义了一个与父类方法签名（方法名称、参数类型、顺序及数量）完全相同的方法，被称为覆写（Override）。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;人类跑步&quot;</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-meta">@Override</span><br>System.out.println(<span class="hljs-string">&quot;学生跑步&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Override</code>（方法覆写）和 <code>Overload</code>（方法重载）不同之处在于方法签名相同。如果不同就是<code>Overload</code>了，<code>Overload</code>定义的是一个新方法；如果方法签名相同，并且返回值也相同，就是 <code>Override</code>。如果方法签名相同，返回值不同，Java编译器会报告错误。</p><p>加上 <code>@Override</code> 可以明确告诉编译器这里是覆写方法，让它帮助我们检查是否进行了正确的覆写。这个符号不是必须添加的。即使对子类进行了父类方法的覆写，我们仍然可以通过 <code>super</code> 关键字调用父类中被覆盖掉的方法。</p><h2 id="2实现多态"><a class="markdownIt-Anchor" href="#2实现多态"></a> 2.实现多态</h2><p>现在考虑这样一个情况，子类 <code>Student</code> 继承了父类 <code>Person</code> ，并且覆写了 <code>run</code> 方法，那当我们通过 <code>Person p = new Student()</code> 创建一个实际类型为 <code>Person</code>，引用类型为 <code>Student</code>的变量，再调用<code>run</code>方法时，实际调用的是哪一个方法呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;人类跑步&quot;</span>);  <br>    &#125;  <br>&#125;  <br>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;学生跑步&quot;</span>);  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>  <br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();  <br>        p.run();  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>大家可以自己粘贴到IDEA运行一下，这个例子很好地展现了<strong>多态</strong>这一面向对象的重要特性。结果会输出 <code>&quot;学生跑步&quot;</code>，即调用的是子类的覆写方法。</p><p>从而我们得出了重要结论：<strong>Java的实例方法调用是基于运行时的实际类型的动态调用，而非变量的声明类型。</strong></p><p>这样做是有很大好处而且很方便的。例如在税务计算程序中，通过定义一个统一的 <code>Income</code> 父类和 <code>getTax()</code> 方法，然后为不同类型的收入（普通收入、工资收入、国务院津贴）创建子类并覆写各自的税率计算方法。在计算总税费时，只需处理 <code>Income</code> 父类类型，程序会根据实际对象类型自动调用相应的税率计算方法。<br />这样设计使得系统具有良好的扩展性 —— 新增收入类型时只需添加新的子类，无需修改现有的税务计算逻辑，实现了&quot;对扩展开放，对修改关闭&quot;的设计原则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 普通收入父类（10%收税）  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Income</span> &#123;  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">double</span> income;  <br>      <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Income</span><span class="hljs-params">(<span class="hljs-type">double</span> income)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.income = income;  <br>    &#125;  <br>      <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getTax</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> income * <span class="hljs-number">0.1</span>; <span class="hljs-comment">// 税率10%  </span><br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-comment">// 工资收入子类（阶梯收税）  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Salary</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Income</span> &#123;  <br>      <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Salary</span><span class="hljs-params">(<span class="hljs-type">double</span> income)</span> &#123;  <br>        <span class="hljs-built_in">super</span>(income);  <br>    &#125;   <br>      <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getTax</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (income &lt;= <span class="hljs-number">5000</span>) &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> (income - <span class="hljs-number">5000</span>) * <span class="hljs-number">0.2</span>;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-comment">// 津贴收入子类（免税）  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StateCouncilSpecialAllowance</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Income</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StateCouncilSpecialAllowance</span><span class="hljs-params">(<span class="hljs-type">double</span> income)</span> &#123;  <br>        <span class="hljs-built_in">super</span>(income);  <br>    &#125;  <br>      <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getTax</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>    &#125;  <br>&#125;<br><br><span class="hljs-comment">// 主类：程序入口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-comment">// 给一个有普通收入、工资收入和享受国务院特殊津贴的小伙伴算税:  </span><br>        Income[] incomes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Income</span>[] &#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Income</span>(<span class="hljs-number">3000</span>),  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Salary</span>(<span class="hljs-number">7500</span>),  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">StateCouncilSpecialAllowance</span>(<span class="hljs-number">15000</span>)  <br>        &#125;;  <br>        System.out.println(totalTax(incomes));  <br>    &#125;  <br>      <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">totalTax</span><span class="hljs-params">(Income... incomes)</span> &#123;  <br>        <span class="hljs-type">double</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>        <span class="hljs-comment">// 特别注意这里，只需要逐个调用各个对象的getTax方法，编译器会自动按照对象调用各自的getTax方法</span><br>        <span class="hljs-keyword">for</span> (Income income: incomes) &#123;  <br>            total = total + income.getTax();  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> total;  <br>    &#125;  <br>&#125; <br></code></pre></td></tr></table></figure><h2 id="3覆写object方法"><a class="markdownIt-Anchor" href="#3覆写object方法"></a> 3.覆写Object方法</h2><p>Java中所有的类都继承自 <code>Object</code>，这个类定义了一些通用方法：</p><ul><li><code>toString()</code>：转换为字符串格式</li><li><code>equals()</code>：判断两个对象是否相同</li><li><code>hashCode()</code>：计算对象的哈希值</li></ul><p>我们也可以在自己的类中覆写这些方法（是不是有点像运算符重载）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>...<br><br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Person other)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.name == other.name) &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>（这段代码有多处错误，你发现了吗？）</p><p>前面提到过，方法覆写需要定义完全相同的方法签名，其中包括了参数类型必须相同。所以这里需要改成 <code>Object</code> 类型。还要注意<code>Object</code> 类型不一定有 <code>name</code> 这么一个属性，需要向下转型成 <code>Person</code> 类才能确保可以比较。最后一个问题是 <code>String</code> 作为引用类型，需要调用 <code>equals</code> 方法来比较，不能使用 <code>==</code>。</p><p>最终修改好之后的程序是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    String name;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object other)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (other <span class="hljs-keyword">instanceof</span> Person) &#123;  <br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.name.equals(((Person) other).name)) &#123;  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>    &#125;  <br>&#125;  <br>  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>  <br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;John&quot;</span>);  <br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Jane&quot;</span>);  <br>  <br>        System.out.println(p1.equals(p2));  <br>    &#125;  <br>&#125;<br><br><span class="hljs-comment">// 输出结果：false</span><br></code></pre></td></tr></table></figure><h1 id="六-抽象类"><a class="markdownIt-Anchor" href="#六-抽象类"></a> 六、抽象类</h1><p>既然我们实现了多态，有的情况下子类各有各的实现方式，父类或许难以实现具体的方法来实现大一统，例如说描述各种动物的叫声。这个时候我们去掉父类方法的方法体肯定不行，去掉整个方法也不行，那咋办咧？</p><p>办不成也得办，跟编译器玩抽象↓</p><h2 id="1-抽象方法"><a class="markdownIt-Anchor" href="#1-抽象方法"></a> 1. 抽象方法</h2><p>如果父类的方法本身不需要实现任何功能，仅仅是为了定义统一的方法签名，目的是让子类去覆写它，那么可以使用关键字 <code>abstract</code> 把父类的方法声明为<strong>抽象方法</strong>（类似于C++中的纯虚函数）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>把一个方法声明为 <code>abstract</code> ，表示它是一个抽象方法，本身没有实现任何方法语句。</p><h2 id="2抽象类"><a class="markdownIt-Anchor" href="#2抽象类"></a> 2.抽象类</h2><p>实际上就算定义了抽象方法，还是有没解决的问题：抽象方法本身是无法执行的，所以 <code>Person</code> 类也无法被实例化。编译器会告诉我们，无法编译 <code>Person</code> 类，因为它包含抽象方法。</p><p>那就干脆把 <code>Person</code> 类定义成抽象的，就引出了<strong>抽象类</strong>（类似于C++中的纯虚基类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>抽象类可以强迫子类实现其定义的抽象方法，否则编译会报错。因此，抽象方法实际上相当于定义了“规范”。</p><h1 id="七-接口"><a class="markdownIt-Anchor" href="#七-接口"></a> 七、接口</h1><h2 id="1概述-2"><a class="markdownIt-Anchor" href="#1概述-2"></a> 1.概述</h2><p>这里的“接口”并不是指用于接收网络请求的接口，而是在Java中特指定义类的一种范式。在抽象类中，抽象方法本质上是定义子类的规范，自身没有具体的方法和含义。这样的情况下，我们可以使用 <code>interface</code> 将其改写为<strong>接口</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们使用 <code>implements</code> 关键字，通过 <code>Person</code> 接口实现一个 <code>Student</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Person</span> &#123;  <br>    String name;  <br>  <br>    Student(String name) &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;Student run&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> name;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，接口中不需要定义属性和构造函数，这些须在实现类中定义。一个类无法继承多个父类，但是可以实现多个接口。（接口是一种比抽象类更加抽象的存在。）</p><h2 id="2-接口继承"><a class="markdownIt-Anchor" href="#2-接口继承"></a> 2. 接口继承</h2><p>一个接口也可以继承自另一个接口。接口的继承同样使用 <code>extends</code> 关键字。若A继承B，A自动拥有B中定义的抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Studen</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>String <span class="hljs-title function_">getClass</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 通过继承，该接口自动拥有getName()抽象方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-default方法"><a class="markdownIt-Anchor" href="#3-default方法"></a> 3. default方法</h2><p>在接口中，可以定义 <code>default</code> 方法。例如，把 <code>Person</code> 接口的 <code>run()</code> 方法改为 <code>default</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;  <br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;  <br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(getName() + <span class="hljs-string">&quot; is running.&quot;</span>);  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>  <br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;John&quot;</span>);  <br>        s.run();  <br>  <br>    &#125;  <br>&#125;<br><br><span class="hljs-comment">// 输出：John is running.</span><br></code></pre></td></tr></table></figure><p>实现类可以不必覆写 <code>default</code> 方法。 <code>default</code> 方法的目的是，当我们需要给接口新增一个方法时，需要给所有的子类也分别添加这个方法的具体实现。但如果新增的是 <code>default</code> 方法，相当是给全部子类都添加了这个方法；那么子类就不必全部修改，只需要在需要覆写的地方去覆写新增方法。</p><p><code>default</code> 方法和抽象类的普通方法是有所不同的。因为接口中没有类的属性， <code>default</code>方法无法访问属性，而抽象类的普通方法可以访问实例的属性。</p><h1 id="八-静态字段和静态方法"><a class="markdownIt-Anchor" href="#八-静态字段和静态方法"></a> 八、静态字段和静态方法</h1><p>（Java中习惯将类的“属性”和“函数”分别称为“字段”和“方法”，考虑到专业术语这里沿用这种称呼，大家看多了也会习惯的。实际上这里）</p><h2 id="1静态字段"><a class="markdownIt-Anchor" href="#1静态字段"></a> 1.静态字段</h2><p>来考虑这样一个情景：</p><p>一个班级中有很多位同学，都有自己的姓名等信息~~（这不废话么）~~，此时需要统计全班同学的人数。常见的思路是定义一个班级类 <code>Class</code>,将全班人数作为该类的一个属性进行处理。但是这样一来就会多定义一个不必要的类，同时还要在学生增减时关联 <code>Class</code> 类中属性的变化，既让代码变长了，还让不同类之间的耦合度变高了，不是一个很优雅的做法。</p><p>当然会有同学想到使用全局的公共变量来存储这个字段，但是在实际项目中，非必要情况下不建议使用全局变量。全局变量暴露在整个项目或文件中可以访问，无法确保不会被其他的逻辑意外修改，不能实现数据保护。</p><p>来看这样的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;  <br>    String name;  <br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> number_of_stu;  <br>  <br>    Student(String name) &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>        number_of_stu++;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">graduate</span><span class="hljs-params">()</span> &#123;  <br>        number_of_stu--;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>  <br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>);  <br>        System.out.println(s1.name + <span class="hljs-string">&quot;同学进入班级后，学生人数为&quot;</span> + s1.number_of_stu);  <br>  <br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小李&quot;</span>);  <br>        System.out.println(s2.name + <span class="hljs-string">&quot;同学进入班级后，学生人数为&quot;</span> + s2.number_of_stu);  <br>  <br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小张&quot;</span>);  <br>        System.out.println(s3.name + <span class="hljs-string">&quot;同学进入班级后，学生人数为&quot;</span> + s3.number_of_stu);  <br>  <br>        s2.graduate();  <br>        System.out.println(s3.name + <span class="hljs-string">&quot;同学毕业后，学生人数为&quot;</span> + s3.number_of_stu);  <br>    &#125;  <br>&#125;<br><br><span class="hljs-comment">/* 输出结果：</span><br><span class="hljs-comment">小明同学进入班级后，学生人数为1</span><br><span class="hljs-comment">小李同学进入班级后，学生人数为2</span><br><span class="hljs-comment">小张同学进入班级后，学生人数为3</span><br><span class="hljs-comment">小张同学毕业后，学生人数为2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>通过 <code>static</code> 关键字声明人数为<strong>静态字段</strong>，实现了 <code>Student</code> 对象对于人数这一属性的<strong>共享</strong>，通过在类被构造和回收（Java中没有析构方法，而且不建议在回收时进行处理，因为这样做不稳定，于是在这个例子中应用了毕业的情景来实现人数的减少）时对静态字段进行处理，这样无论访问的是哪一个对象的静态字段，得到的都是它们共享的值。</p><blockquote><p>说句题外话，这个例子让我印象很深刻，因为它不仅展示了静态字段的特性和写法，还很好地展示了静态字段的使用场景。我们学习编程语言的一些特性时，<strong>不仅要明白这些技术是什么，怎么写；更应该思考为什么这样做，什么情况下需要这样做。</strong> 后者带来的是程序设计思想的提升和进阶，能够让我们在面对一些复杂的情境下仍然能写出优雅精简的程序，快准狠地解决实际问题。</p></blockquote><h2 id="2静态方法"><a class="markdownIt-Anchor" href="#2静态方法"></a> 2.静态方法</h2><p>有静态字段，就有静态方法。用 <code>static</code> 修饰的方法称为静态方法。调用实例方法必须通过一个实例变量，而调用静态方法则不需要实例变量，通过类名就可以调用。</p><p>因为静态方法属于 <code>class</code> 而不属于实例，因此，静态方法内部，无法访问 <code>this</code> 变量，也无法访 问实例字段，它只能访问静态字段。 当然，通过实例变量也可以调用静态方法。</p><p>静态方法经常用于工具类。例如：</p><ul><li>Arrays.sort()</li><li>Math.random()</li></ul><p>静态方法也经常用于辅助方法。注意到Java程序的入口 <code>main()</code> 也是静态方法。</p><h2 id="3接口的静态字段"><a class="markdownIt-Anchor" href="#3接口的静态字段"></a> 3.接口的静态字段</h2><p>接口作为纯抽象类，无法定义普通的属性，但是可以定义静态字段。静态字段在接口中必须声明为 <code>final</code> 类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>puiblic <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">GENDER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;female&quot;</span>;<br><span class="hljs-comment">// 也可以简写成 String GENDER = &quot;FEMALE&quot;;</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="九-包"><a class="markdownIt-Anchor" href="#九-包"></a> 九、包</h1><h2 id="1概述-3"><a class="markdownIt-Anchor" href="#1概述-3"></a> 1.概述</h2><p>有时两个开发者定义了相同的类名，就会产生冲突。为了解决这种冲突，可以考虑使用一种方法来限定类的作用范围，在C++中称之为<strong>命名空间</strong>，Java中则称之为<strong>包</strong>。</p><p>Java推荐使用包将不同模块的类放到不同的文件中，根据文件夹的组织形式定义包的名称，在文件的第一行使用 <code>package</code> 关键字定义包名，然后在包中将类定义为 <code>public</code>。</p><p>例如，小明和小军一起进行开发，他们都定义了Person这个类，文件夹的组织形式如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Demo_project<br>└─ src<br>├─ Demo.<span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span>├─ <span class="hljs-keyword">jun</span><br><span class="hljs-keyword"></span>│    └─ Person.<span class="hljs-keyword">Java </span> <br>├─ components<br>│    └─ ming<br>└─ Person.<span class="hljs-keyword">java</span><br></code></pre></td></tr></table></figure><p>那么，小军的Person.Java应该这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jun;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;...&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> conponents.ming;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;...&#125;<br></code></pre></td></tr></table></figure><p>从这个例子中可以看出包可以是多层结构，用 <code>.</code> 隔开。例如： <code>java.util</code>。但是需要注意包没有父子的关系，如 <code>java.util</code> 和 <code>java.util.zip</code> 是不同的包，两者之间没有继承关系。</p><p>一个类总是属于某个包的。如果没有声明，这个类就属于默认包。类的完整名称是 <code>包.类</code> ,JVM根据这个完整的名称来辨识不同包中的类。即只要包不同，即使类名相同也，不是同一个类。</p><h2 id="2包作用域"><a class="markdownIt-Anchor" href="#2包作用域"></a> 2.包作用域</h2><p>位于同一个包的类，可以访问包作用域的字段和方法。不用 <code>public</code> 、 <code>protected</code> 、 <code>private</code> 修饰的字段和方法就是包作用域。</p><h2 id="3包的导入"><a class="markdownIt-Anchor" href="#3包的导入"></a> 3.包的导入</h2><p>有时我们需要在一个包中使用另一个包中的类，这时就需要使用 <code>import</code> 导入另外的包了。有三种导入方法：</p><h3 id="1-直接写完整类名"><a class="markdownIt-Anchor" href="#1-直接写完整类名"></a> ① 直接写完整类名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">conponents.<span class="hljs-type">ming</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">conponents</span>.ming.Person();<br></code></pre></td></tr></table></figure><h3 id="2-使用-import-语句"><a class="markdownIt-Anchor" href="#2-使用-import-语句"></a> ② 使用 import 语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jun;<br><span class="hljs-keyword">import</span> conponents.ming.Person;<br><br><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br></code></pre></td></tr></table></figure><p>这里可以使用通配符 <code>*</code> 来导入包中的所有类,如 <code>import conponents.ming.*;</code></p><h3 id="3-导入另一个包的静态方法和静态字段"><a class="markdownIt-Anchor" href="#3-导入另一个包的静态方法和静态字段"></a> ③ 导入另一个包的静态方法和静态字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jun;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> conponents.ming.Person;<br></code></pre></td></tr></table></figure><p>这种方式使用得较少。</p><h2 id="4避免包的重名"><a class="markdownIt-Anchor" href="#4避免包的重名"></a> 4.避免包的重名</h2><p>通常为了防止出现包的重名，需要确定包名唯一，一般使用域名反写：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">org.apache</span><br><span class="hljs-keyword"></span>come.xiaomi.<span class="hljs-keyword">bluetooth</span><br><span class="hljs-keyword"></span>top.morely.<span class="hljs-keyword">blog</span><br></code></pre></td></tr></table></figure><p>也要注意不要与Java中已有的类和重名：</p><ul><li>String</li><li>System</li><li>Runtime</li><li>java.util.List</li><li>java.text.Format</li><li>java.math.BigInteger</li><li>…</li></ul><h1 id="十-作用域"><a class="markdownIt-Anchor" href="#十-作用域"></a> 十、作用域</h1><p>与C++类似，类中的字段和方法有 <code>public</code> 、 <code>private</code> 以及 <code>protected</code> 三种，<code>public</code> 可以在类外访问，<code>private</code> 只能在类内访问，而 <code>protected</code> 多用于在继承中将方法或字段暴露给子类。</p><p>另外，包作用域是指一个类允许访问同一个包的没有 <code>public</code>、<code>private</code> 修饰的 <code>class</code> ，以及没有 <code>public</code>、<code>protected</code>、<code>private</code> 修饰的字段和方法。</p><p>在方法内部定义的变量称为<strong>局部变量</strong>，局部变量作用域从变量声明处开始到对应的块结束。方法参数也是局部变量。Java中不建议使用全局变量，这样做不利于模块化以及数据保护。</p><p>我们来回顾一下 <code>final</code> 这个修饰符，它在数据保护中有“终止”的意味，包括终止类的继承、禁止子类复写、禁止重新赋值（定义常量）等。</p><h1 id="十一-内部类"><a class="markdownIt-Anchor" href="#十一-内部类"></a> 十一、内部类</h1><p>在Java程序中，通常情况下，我们把不同的类组织在不同的包下面，对于一个包下面的类来说，它们是在同一层次，没有父子关系。有些情况下，我们也会将一个类放在另一个类的内部进行定义，这个类就称为<strong>内部类</strong>（Inner Class）。</p><h2 id="1内部类的声明与实例化"><a class="markdownIt-Anchor" href="#1内部类的声明与实例化"></a> 1.内部类的声明与实例化</h2><p>内部类无法单独存在，必须依附于一个Outer Class（外部类），类似于这个外部类的一个属性。也就是说，实例化内部类之前必须先实例化内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    String name;  <br>  <br>    Person(String name) &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;  <br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">showName</span><span class="hljs-params">()</span> &#123;  <br>            System.out.println(<span class="hljs-string">&quot;学生的姓名为：&quot;</span> + name);  <br>        &#125;  <br>    &#125;  <br>  <br>&#125;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>  <br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>);  <br>        <span class="hljs-comment">// 注意看内部类是如何初始化的：</span><br>        Person.<span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> p.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();  <br>  <br>        s.showName();  <br>  <br>    &#125;  <br>&#125;<br><br><span class="hljs-comment">// 输出结果： 学生的姓名为：张三</span><br></code></pre></td></tr></table></figure><p>注意内部类的实例化写法是：<code>外部类.内部类 内部对象名 = 外部对象.new 内部类构造方法();</code>。内部类作为外部类的一个字段，可以访问外部类的 <code>private</code> 属性和方法。</p><h2 id="2匿名类"><a class="markdownIt-Anchor" href="#2匿名类"></a> 2.匿名类</h2><p>在类的方法内部，定义一个<strong>匿名类</strong>（Anonymous Class），也会定义一个内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>HashMap&lt;String, String&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>HashMap&lt;String, String&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;() &#123;&#125;; <span class="hljs-comment">// 这里是匿名类</span><br>HashMap&lt;String, String&gt; map3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;() &#123;<br>&#123;<br>put(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>put(<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>&#125;<br>&#125;;<br>System.out.println(map3.get(<span class="hljs-string">&quot;A&quot;</span>));<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>map1</code> 是一个普通的 <code>HashMap</code> 实例，但 <code>map2</code> 是一个匿名类实例，只是该匿名类继承自 <code>HashMap</code>。<code>map3</code> 也是一个继承自 <code>HashMap</code> 的匿名类实例，并且添加了 <code>static</code> 代码块来初始化数据。观察编译输出可发现 <code>Main$1.class</code> 和 <code>Main$2.class</code> 两个匿名类文件。</p><h2 id="3静态内部类"><a class="markdownIt-Anchor" href="#3静态内部类"></a> 3.静态内部类</h2><p>使用 <code>static</code> 定义的内部类称为静态内部类（Static Nested Class）。用 <code>static</code> 修饰的内部类和普通内部类有很大的不同，它不再依附于外部类的实例对象，而是一个完全独立的类，因此无法引用 <code>Outer.this</code> ，但它可以访问外部类的 <code>private</code> 静态字段和静态方法。如果把静态内部类移到外部类之外，就失去了访问 <code>private</code> 的权限。</p><h1 id="十二-classpath和jar"><a class="markdownIt-Anchor" href="#十二-classpath和jar"></a> 十二、classpath和jar</h1><h2 id="1classpath"><a class="markdownIt-Anchor" href="#1classpath"></a> 1.Classpath</h2><p><code>classpath</code> 是JVM用到的一个环境变量，它用来指示JVM如何搜索定义的类。现代使用的IDE如Eclipse、Intellij IDEA会自动配置这个变量，这里就不深入学习了，简单概括一下廖老师的文章；大家感兴趣的话可以研究一下，<a href="https://liaoxuefeng.com/books/java/oop/basic/classpath-jar/">点击访问原文地址</a>：</p><h3 id="1-classpath的作用"><a class="markdownIt-Anchor" href="#1-classpath的作用"></a> ① classpath的作用</h3><ul><li>classpath是JVM用于搜索<strong>编译后的.class文件</strong>的<strong>环境变量</strong>（一组目录集合）。</li><li>JVM根据 <code>classpath</code> 中的路径来查找需要加载的类（例如<code>abc.xyz.Hello</code>对应<code>abc/xyz/Hello.class</code>）。</li><li>搜索顺序是<strong>从左到右</strong>，一旦找到就停止搜索；如果所有路径都未找到，则报错。</li></ul><h3 id="2-classpath的格式"><a class="markdownIt-Anchor" href="#2-classpath的格式"></a> ② classpath的格式</h3><ul><li><strong>Windows</strong>：用分号<code>;</code>分隔，含空格的路径需用双引号括起（示例：<code>.;C:\work\bin;&quot;D:\My Documents\bin&quot;</code>）。</li><li><strong>Linux/Mac</strong>：用冒号<code>:</code>分隔（示例：<code>.:/usr/shared:/home/user/bin</code>）。</li></ul><h3 id="3-设置classpath的两种方式"><a class="markdownIt-Anchor" href="#3-设置classpath的两种方式"></a> ③ 设置classpath的两种方式</h3><ul><li><strong>不推荐</strong>：在系统环境变量中设置classpath（会污染系统环境）。</li><li><strong>推荐</strong>：启动JVM时通过<code>-classpath</code>（或<code>-cp</code>）参数指定（仅对当前进程有效）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -<span class="hljs-built_in">cp</span> .;C:\work\bin;C:\shared abc.xyz.Hello<br></code></pre></td></tr></table></figure><ul><li><strong>默认行为</strong>：如果不设置任何classpath，JVM默认使用当前目录（<code>.</code>）作为classpath。</li></ul><h3 id="4-重要注意事项"><a class="markdownIt-Anchor" href="#4-重要注意事项"></a> ④ 重要注意事项</h3><ul><li><strong>无需添加Java核心库</strong>（如<code>rt.jar</code>）：JVM会自动加载核心库（例如<code>String</code>、<code>ArrayList</code>等），手动添加反而可能导致问题。</li><li><strong>IDE的处理</strong>：IDE（如Eclipse、IntelliJ IDEA）会自动设置classpath（通常包括项目的<code>bin</code>目录和依赖的jar包）。</li><li><strong>目录结构必须匹配包名</strong>：<br />例如，类<code>com.example.Hello</code>必须位于<code>com/example/Hello.class</code>。<br />如果当前目录是<code>C:\work</code>，则完整路径应为<code>C:\work\com\example\Hello.class</code>，并使用命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -<span class="hljs-built_in">cp</span> . com.example.Hello<br></code></pre></td></tr></table></figure><h3 id="5-实操建议"><a class="markdownIt-Anchor" href="#5-实操建议"></a> ⑤ 实操建议</h3><ul><li><strong>避免设置系统级classpath</strong>，始终通过<code>-cp</code>参数传递。</li><li><strong>默认使用当前目录（<code>.</code>）</strong> 通常足够满足大部分场景。</li><li><strong>确保目录结构与包名一致</strong>，否则JVM无法找到类。</li></ul><h2 id="2jar包"><a class="markdownIt-Anchor" href="#2jar包"></a> 2.jar包</h2><p>此部分忽略，实际项目中通常使用比较成熟的构建工具（如maven）来打包。</p><h1 id="十三-class版本"><a class="markdownIt-Anchor" href="#十三-class版本"></a> 十三、class版本</h1><p>通常我们提到的Java 8，Java11，Java 21；指的是Java的<strong>JDK版本</strong></p><p>在cmd中执行命令 <code>java -version</code>，返回的是JDK的版本,也是JVM的版本，即 <code>Java.exe</code> 的版本。</p><p><img src="20250823165958211.png#bc" alt="" /></p><p>每个版本的JVM执行的class文件（字节码文件）版本也不同。例如，Java 11对应的class文件版本是55，而Java 17对应的class文件版本是61。Java是向下兼容的，即使用旧版本JDK编写的程序和字节码能在高版本的JVM上执行，而高版本的Java通常定义了新的方法和语句，新版本JDK编写的程序和字节码可能难以在旧版本的JVM上运行。</p><h1 id="十四-模块"><a class="markdownIt-Anchor" href="#十四-模块"></a> 十四、模块</h1><p>为了实现Java的模块化，从Java 9开始，原有的Java标准库已经由一个单一巨大的 <code>rt.jar</code> 分拆成了几十个模块，这些模块以 <code>.jmod</code> 扩展名标识，可以在 <code>$JAVA_HOME/jmods</code> 目录下找到它们：</p><ul><li>java.base.jmod</li><li>java.compiler.jmod</li><li>java.datatransfer.jmod</li><li>java.desktop.jmod</li><li>…</li></ul><p>把一堆class封装为jar仅仅是一个打包的过程，而把一堆class封装为模块则不但需要打包，还需要写 入依赖关系，并且还可以包含二进制代码（通常是JNI扩展）。此外，模块支持多版本，即在同一个 模块中可以为不同的JVM提供不同的版本。</p><p>这里<strong>模块的编写、运行以及JRE打包</strong>暂时忽略，以后需要使用时再来学习。</p><center><h1>第二节 Java核心类</h1></center><h1 id="一-字符串和编码"><a class="markdownIt-Anchor" href="#一-字符串和编码"></a> 一、字符串和编码</h1><h2 id="1string类"><a class="markdownIt-Anchor" href="#1string类"></a> 1.String类</h2><p>在Java中， <code>String</code> 是一个引用类型，它本身也是一个类，可以由构造方法定义一个字符串实例。但是Java编译器对 <code>String</code> 有特殊处理，可以直接用双引号 <code>&quot;&quot;</code> 来定义一个字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[] &#123;<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure><h2 id="2string类的常用方法"><a class="markdownIt-Anchor" href="#2string类的常用方法"></a> 2.String类的常用方法</h2><p>String类型已在前文探讨过，此处只补充一些实用的方法。</p><h3 id="1-trim去除首尾的空白字符"><a class="markdownIt-Anchor" href="#1-trim去除首尾的空白字符"></a> ① trim():去除首尾的空白字符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot; \tHello\r\n &quot;</span>.trim(); <span class="hljs-comment">// 得到&quot;Hello&quot;</span><br></code></pre></td></tr></table></figure><p>这里的空白字符不仅包含空格，还包含<code>\t</code>、<code>\r</code>以及<code>\n</code>等转义字符。</p><p>另外 <code>strip()</code> 方法也用于去除空白符，但也会移除中文空格&quot;\u3000&quot;等字符。</p><h3 id="2-字符串与char的转换"><a class="markdownIt-Anchor" href="#2-字符串与char的转换"></a> ② 字符串与char[]的转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span>[] cs = <span class="hljs-string">&quot;Hello&quot;</span>.toCharArray(); <span class="hljs-comment">// String -&gt; char[] </span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cs); <span class="hljs-comment">// char[] -&gt; String</span><br></code></pre></td></tr></table></figure><p>这里需要注意的是，使用 <code>toCharArray()</code> 将字符串转换成数组后对数组进行处理，原来的字符串不会变化。这样做其实也好理解，字符串作为不可变的类型，没有实现变化内容的方法。这里的转换更多是复制拷贝，而不是将两个变量关联起来。</p><p>StringBuilder、StringJoiner这两个对象已在前文提过，这里不再赘述。</p><h1 id="四-包装类型"><a class="markdownIt-Anchor" href="#四-包装类型"></a> 四、包装类型</h1><p>Java中的数据分为两种：</p><ul><li>基本类型：<code>byte</code>、<code>byte</code>，<code>short</code>，<code>int</code>，<code>long</code>，<code>boolean</code>，<code>float</code>，<code>double</code>，<code>char</code>；</li><li>引用类型：基于类和接口的数据类型，如 <code>String</code>。</li></ul><p>引用类型可以赋值为<code>null</code>，表示空，但基本类型不能赋值为<code>null</code></p><p>想要实现以引用类型的方式来处理基本类型，我们可以将其包装成类。如定义 <code>Int</code> 类，让它只包含一个字段 <code>private int value = 0;</code> 。这样一来，<code>Int</code> 类就可以视为 <code>int</code> 的包装类。实际上无需我们来进行包装，Java的核心库已经定义好了这些基本类型对顶的包装类型：</p><table><thead><tr><th>基本类型</th><th>对应的引用类型</th></tr></thead><tbody><tr><td>boolean</td><td>java.lang.Boolean</td></tr><tr><td>byte</td><td>java.lang.Byte</td></tr><tr><td>short</td><td>java.lang.Short</td></tr><tr><td>int</td><td>java.lang.Integer</td></tr><tr><td>long</td><td>java.lang.Long</td></tr><tr><td>float</td><td>java.lang.Float</td></tr><tr><td>double</td><td>java.lang.Double</td></tr><tr><td>char</td><td>java.lang.Character</td></tr></tbody></table><p>这些包装对象都是不可变的，对他们进行比较也不能使用 <code>a == b</code>，应该使用 <code>a.equals(b)</code>。</p><h2 id="静态工厂方法"><a class="markdownIt-Anchor" href="#静态工厂方法"></a> 静态工厂方法</h2><p><code>Integer</code> 类有一个方法 <code>ValueOf()</code>，会将输入转换成一个 <code>Integer</code> 对象。使用此方法也可以同来创建 <code>Integer</code> 类的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">100</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>这两种写法几乎等效，但是下面的更好。当我们使用 <code>Integer.valueOf(int i)</code> 时，如果传入的 <code>i</code> 在 <strong>-128 到 127</strong> 之间，方法会直接从内部的缓存数组中返回一个已经创建好的、相同的 <code>Integer</code> 对象。如果传入的值超出了这个范围，则会 <code>new</code> 一个新的 <code>Integer</code> 对象。</p><p>使用这样的方法有利于提升性能和节省内存，是一种比 <code>new</code> 更好的处理方式。</p><h1 id="五-javabean"><a class="markdownIt-Anchor" href="#五-javabean"></a> 五、JavaBean</h1><p>很多情况下，我们将类的属性设置为<code>private</code>，并且使用 <code>public</code> 方法来暴露读取或修改属性的“接口”，如 <code>getXxx()</code> 和 <code>setXxx()</code>。</p><h2 id="1javabean概述"><a class="markdownIt-Anchor" href="#1javabean概述"></a> 1.JavaBean概述</h2><p>如果一个类满足这些特点，我们可以说它是一个 <code>JavaBean</code>（看到这个词我的第一印象是咖啡豆？）：</p><ul><li>拥有无参的公共构造函数</li><li>所有的属性均为 <code>private</code></li><li>提供了 <code>public</code> 的属性读写方法，并且命名成 <code>getXxx()</code> 及 <code>SetXxx()</code> 的形式</li></ul><p>对于 <code>boolean</code> 类型的字段，读写方法应该是这种格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 读方法：</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDone</span><span class="hljs-params">()</span> &#123;...&#125;<br><span class="hljs-comment">// 写方法：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDone</span><span class="hljs-params">()</span> &#123;...&#125;<br></code></pre></td></tr></table></figure><p>我们通常把一组对应的读方法（<code>getter</code>）和写方法（<code>setter</code>）称为属性（<code>property</code>）。只有<code>getter</code>的属性称为只读属性（read-only），只有<code>setter</code>的属性称为只写属性（write-only）。</p><p>只读属性比较常见，而只写属性就相对很少使用了。</p><p>这里之所以把这两个读写方法称之为属性而不是方法，是因为只需要定义 <code>getter</code> 和 <code>setter</code>，即可，不一定要有对应的字段，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123; <span class="hljs-built_in">this</span>.name = name; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123; <span class="hljs-built_in">this</span>.age = age; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAdult</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age &gt;= <span class="hljs-number">18</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以直接通过 <code>isAdult()</code>，根据类中的 <code>age</code> 字段判断是否为成年人，而无需再添加一个 <code>boolean</code> 类型的字段，这样看来 <code>isAdult()</code> 更像是标记了类的一种<strong>属性</strong>。正是由于对应的字段可能是虚拟的（或者说是间接的），这样的读写（主要是读取）更像是在操作类的一种属性，所以这里更倾向于认为它是一种属性而不是方法。</p><h2 id="2javabean的作用"><a class="markdownIt-Anchor" href="#2javabean的作用"></a> 2.JavaBean的作用</h2><p>JavaBean主要用来传递数据，即把一组数据组合成一个JavaBean便于传输。此外，JavaBean可以方便地被IDE工具分析，生成读写属性的代码，主要用在图形界面的可视化设计中。在IDE中也可以快速生成 <code>getter</code> 和 <code>setter</code>。</p><h1 id="六-枚举类"><a class="markdownIt-Anchor" href="#六-枚举类"></a> 六、枚举类</h1><p>枚举的基础知识已经在前文介绍过了，这里结合面向对象进行一些拓展：</p><h2 id="1枚举也是一种类型"><a class="markdownIt-Anchor" href="#1枚举也是一种类型"></a> 1.枚举也是一种类型</h2><p>通过 <code>enum</code> 定义的枚举也是一个 <code>class</code>，并且与其他的类没有很大的差异，主要具有以下几个特点：</p><ul><li>定义的 <code>enum</code> 类型总是继承自 <code>java.lang.Enum</code>，且无法被继承；</li><li>只能定义出 <code>enum</code> 的实例，而无法通过 <code>new</code> 操作符创建<code>enum</code> 的实例；</li><li>定义的每个实例都是引用类型的唯一实例；</li><li>可以将 <code>enum</code> 类型用于 <code>switch</code> 语句。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 我们定义的enum:</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<br>    RED, GREEN, BLUE;<br>&#125;<br><br><span class="hljs-comment">// 编译器编译出的class:</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Enum</span> &#123; <span class="hljs-comment">// 继承自Enum，标记为final class</span><br>    <span class="hljs-comment">// 每个实例均为全局唯一:</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Color</span> <span class="hljs-variable">RED</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Color</span> <span class="hljs-variable">GREEN</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Color</span> <span class="hljs-variable">BLUE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>();<br>    <span class="hljs-comment">// private构造方法，确保外部无法调用new操作符:</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Color</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以使用这些方法对枚举进行操作，或者获取枚举的信息：</p><ul><li>name():返回枚举项的名称</li><li>ordinal():返回枚举项的编号</li><li>toString():返回枚举项的名称，但是可以进行覆写（不建议用于判断枚举项名称，可以覆写后用于优化输出格式）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;  <br>    RED(<span class="hljs-string">&quot;红色&quot;</span>), BLUE(<span class="hljs-string">&quot;蓝色&quot;</span>), GREEN(<span class="hljs-string">&quot;绿色&quot;</span>);  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String color_name;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Color</span><span class="hljs-params">(String color_name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.color_name = color_name;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <span class="hljs-comment">// 重写 toString 方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> color_name;  <br>    &#125;  <br>&#125;  <br>  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>  <br>        System.out.println(Color.RED.ordinal());  <br>        System.out.println(Color.BLUE.name());  <br>        System.out.println(Color.GREEN.name() + <span class="hljs-string">&quot;是&quot;</span> + Color.GREEN.toString());  <br>    &#125;  <br>&#125;<br><br><span class="hljs-comment">/* 输出： </span><br><span class="hljs-comment">0</span><br><span class="hljs-comment">BLUE</span><br><span class="hljs-comment">GREEN是绿色</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="七-记录类"><a class="markdownIt-Anchor" href="#七-记录类"></a> 七、记录类</h1><p>使用<code>String</code>、<code>Integer</code>等类型的时候，这些类型都是不变类，一个不变类具有以下特点：</p><ol><li>定义class时使用<code>final</code>，无法派生子类；</li><li>每个字段使用<code>final</code>，保证创建实例后无法修改任何字段。</li></ol><h2 id="1record类"><a class="markdownIt-Anchor" href="#1record类"></a> 1.record类</h2><p>Java 14之后，我们可以使用 <code>record</code> 类定义一个记录类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义记录类：</span><br><span class="hljs-keyword">record</span> <span class="hljs-title class_">Point</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;&#125;<br><br><span class="hljs-comment">// 相当于这样写：</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Record</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> y;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Point</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">x</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">y</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;Point[x=%s, y=%s]&quot;</span>, x, y);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        ...<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，除了用 <code>final</code> 修饰class以及每个字段外，编译器还自动为我们创建了构造方法，和字段名同名的方法，以及覆写 <code>toString()</code>、<code>equals()</code> 和 <code>hashCode()</code> 方法（良心大大的好啊）。</p><p>使用<code>record</code>关键字，可以一行写出一个不变类。和<code>enum</code>类似，我们自己不能直接从<code>Record</code>派生，只能通过<code>record</code>关键字由编译器实现继承。</p><h2 id="2记录类的构造"><a class="markdownIt-Anchor" href="#2记录类的构造"></a> 2.记录类的构造</h2><p>我们也可以手动修改构造类，比如说加上发现参数非法就抛出异常的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">record</span> <span class="hljs-title class_">Point</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;  <br>    Point &#123;  <br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> || y &lt; <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;坐标参数不能为负&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Point</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>);  <br>    &#125;  <br>&#125;<br><br><span class="hljs-comment">// 输出：Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: 坐标参数不能为负</span><br></code></pre></td></tr></table></figure><h2 id="3添加静态方法"><a class="markdownIt-Anchor" href="#3添加静态方法"></a> 3.添加静态方法</h2><p>通常我们定义一个 <code>of()</code> 静态方法，用于创建类对应的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Point</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Point <span class="hljs-title function_">of</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Point <span class="hljs-title function_">of</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(x, y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们可以通过 <code>var p = Point.of(1,2);</code> 来实例化一个类的对象，大家看出来这属于前文提到的静态工厂方法了吗？这样做有利于节省内存和提升性能，是一种推荐的做法。</p><h1 id="八-biginteger"><a class="markdownIt-Anchor" href="#八-biginteger"></a> 八、BigInteger</h1><p>如果我们在开发数据量很大的项目（人口统计系统、银行储蓄管理系统等）时，或许会超过 <code>long</code> 类型的表示范围。</p><p>在Java中，可以通过 <code>Java.math.BigInteger</code> 表示任意大小的整数。其内部通过 <code>int[]</code> 数组来模拟一个很大很大的整数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigInteger</span> <span class="hljs-variable">bi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;1234567890&quot;</span>);<br>System.out.println(bi.pow(<span class="hljs-number">5</span>)); <span class="hljs-comment">// 2867971860299718107233761438093672048294900000</span><br></code></pre></td></tr></table></figure><h2 id="1biginteger的计算"><a class="markdownIt-Anchor" href="#1biginteger的计算"></a> 1.BigInteger的计算</h2><p>对<code>BigInteger</code>做运算的时候，只能使用实例方法。下表列出了 <code>BigInteger</code> 的常用运算方法；无需记忆，用时查表即可。</p><table><thead><tr><th>类别</th><th>方法签名</th><th>描述</th></tr></thead><tbody><tr><td><strong>算术运算</strong></td><td><code>BigInteger add(BigInteger val)</code></td><td>返回 <code>this + val</code> 的和</td></tr><tr><td></td><td><code>BigInteger subtract(BigInteger val)</code></td><td>返回 <code>this - val</code> 的差</td></tr><tr><td></td><td><code>BigInteger multiply(BigInteger val)</code></td><td>返回 <code>this * val</code> 的积</td></tr><tr><td></td><td><code>BigInteger divide(BigInteger val)</code></td><td>返回 <code>this / val</code> 的商（整数除法）</td></tr><tr><td></td><td><code>BigInteger[] divideAndRemainder(BigInteger val)</code></td><td>返回一个数组，包含 <code>[商, 余数]</code></td></tr><tr><td></td><td><code>BigInteger remainder(BigInteger val)</code></td><td>返回 <code>this % val</code> 的余数</td></tr><tr><td><strong>模运算</strong></td><td><code>BigInteger mod(BigInteger m)</code></td><td>返回 <code>this mod m</code>（模数必须为正数）</td></tr><tr><td></td><td><code>BigInteger modPow(BigInteger exponent, BigInteger m)</code></td><td>返回 <code>(this^exponent) mod m</code></td></tr><tr><td></td><td><code>BigInteger modInverse(BigInteger m)</code></td><td>返回 <code>this^(-1) mod m</code>（乘法逆元）</td></tr><tr><td><strong>位运算</strong></td><td><code>BigInteger and(BigInteger val)</code></td><td>返回 <code>this &amp; val</code>（按位与）</td></tr><tr><td></td><td><code>BigInteger or(BigInteger val)</code></td><td>返回 <code>this | val</code>（按位或）</td></tr><tr><td></td><td><code>BigInteger xor(BigInteger val)</code></td><td>返回 <code>this ^ val</code>（按位异或）</td></tr><tr><td></td><td><code>BigInteger not()</code></td><td>返回 <code>~this</code>（按位取反）</td></tr><tr><td></td><td><code>BigInteger shiftLeft(int n)</code></td><td>返回 <code>this &lt;&lt; n</code>（左移n位）</td></tr><tr><td></td><td><code>BigInteger shiftRight(int n)</code></td><td>返回 <code>this &gt;&gt; n</code>（算术右移n位）</td></tr><tr><td><strong>比较运算</strong></td><td><code>int compareTo(BigInteger val)</code></td><td>比较大小。返回负数、零或正数，分别表示 <code>this &lt; val</code>, <code>this == val</code>, <code>this &gt; val</code></td></tr><tr><td></td><td><code>boolean equals(Object x)</code></td><td>判断值是否相等（与<code>compareTo</code>一致，不同于<code>==</code>）</td></tr><tr><td><strong>其他运算</strong></td><td><code>BigInteger abs()</code></td><td>返回绝对值</td></tr><tr><td></td><td><code>BigInteger negate()</code></td><td>返回相反数 (<code>-this</code>)</td></tr><tr><td></td><td><code>BigInteger pow(int exponent)</code></td><td>返回 <code>this^exponent</code>（指数）</td></tr><tr><td></td><td><code>BigInteger gcd(BigInteger val)</code></td><td>返回 <code>this</code> 和 <code>val</code> 的最大公约数 (GCD)</td></tr><tr><td></td><td><code>BigInteger sqrt()</code></td><td>返回 <code>this</code> 的整数平方根</td></tr><tr><td></td><td><code>BigInteger nextProbablePrime()</code></td><td>返回第一个大于 <code>this</code> 的素数（概率性）</td></tr><tr><td></td><td><code>boolean isProbablePrime(int certainty)</code></td><td>判断此 BigInteger 是否为素数（概率性测试）</td></tr></tbody></table><h3 id="重要说明"><a class="markdownIt-Anchor" href="#重要说明"></a> 重要说明：</h3><ol><li><p><strong>不可变性 (Immutability)</strong>：<code>BigInteger</code> 和 <code>BigDecimal</code> 对象是<strong>不可变的</strong>。所有上述方法执行运算后都会<strong>返回一个全新的对象</strong>，原来的对象值不会被修改。</p></li><li><p><strong>静态常量</strong>：<code>BigInteger</code> 类提供了常用的静态常量，方便使用：</p><ul><li><code>BigInteger.ZERO</code>：表示数字0；</li><li><code>BigInteger.ONE</code>：表示数字1；</li><li><code>BigInteger.TWO</code>：表示数字2；</li><li><code>BigInteger.TEN</code>：表示数字10。</li></ul></li><li><p><strong>性能考量</strong>：由于不可变性和任意精度，<code>BigInteger</code> 的运算开销远大于基本数据类型（如 <code>int</code>, <code>long</code>）。应在确实需要处理大整数时才使用它。</p></li><li><p><strong>素数测试</strong>：<code>nextProbablePrime()</code> 和 <code>isProbablePrime()</code> 方法中使用的是概率性测试（米勒-拉宾算法）。参数 <code>certainty</code> 表示对确定度的衡量，值越大，结果是素数的概率越高，但计算时间也更长。</p></li></ol><h2 id="2类型转换"><a class="markdownIt-Anchor" href="#2类型转换"></a> 2.类型转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigInteger</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;123456789000&quot;</span>);<br>System.out.println(i.longValue()); <span class="hljs-comment">// 123456789000</span><br>System.out.println(i.multiply(i).longValueExact()); <span class="hljs-comment">// java.lang.ArithmeticException: BigInteger out of long range</span><br></code></pre></td></tr></table></figure><p>使用<code>longValueExact()</code>方法时，如果超出了<code>long</code>型的范围，会抛出<code>ArithmeticException</code>。</p><p><code>BigInteger</code>和<code>Integer</code>、<code>Long</code>一样，也是不可变类，并且也继承自<code>Number</code>类。因为<code>Number</code>定义了转换为基本类型的几个方法：</p><ul><li>转换为<code>byte</code>：<code>byteValue()</code></li><li>转换为<code>short</code>：<code>shortValue()</code></li><li>转换为<code>int</code>：<code>intValue()</code></li><li>转换为<code>long</code>：<code>longValue()</code></li><li>转换为<code>float</code>：<code>floatValue()</code></li><li>转换为<code>double</code>：<code>doubleValue()</code></li></ul><p>如果<code>BigInteger</code>表示的范围超过了基本类型的范围，转换时将丢失高位信息，即结果不一定是准确的。如果需要准确地转换成基本类型，可以使用<code>intValueExact()</code>、<code>longValueExact()</code>等方法，在转换时如果超出范围，将直接抛出<code>ArithmeticException</code>异常。</p><p>如果<code>BigInteger</code>的值甚至超过了<code>float</code>的最大范围（3.4x1038），会返回无限值 <code>infinity</code></p><h1 id="九-bigdecimal"><a class="markdownIt-Anchor" href="#九-bigdecimal"></a> 九、BigDecimal</h1><p>和<code>BigInteger</code>类似，<code>BigDecimal</code>可以表示一个任意大小且精度完全准确的浮点数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;123.4567&quot;</span>);<br>System.out.println(bd.multiply(bd)); <span class="hljs-comment">// 15241.55677489</span><br></code></pre></td></tr></table></figure><p>可以使用 <code>scale()</code> 方法获取小数的位数。如果一个<code>BigDecimal</code>的<code>scale()</code>返回负数，例如，<code>-2</code>，表示这个数是个整数，并且末尾有2个0。</p><p>对<code>BigDecimal</code>做加、减、乘时，精度不会丢失，但是做除法时，存在无法除尽的情况，这时，就必须指定精度以及如何进行截断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;123.456&quot;</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;23.456789&quot;</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> d1.divide(d2, <span class="hljs-number">10</span>, RoundingMode.HALF_UP); <span class="hljs-comment">// 保留10位小数并四舍五入</span><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">d4</span> <span class="hljs-operator">=</span> d1.divide(d2); <span class="hljs-comment">// 报错：ArithmeticException，因为除不尽</span><br></code></pre></td></tr></table></figure><p>还可以对<code>BigDecimal</code>做除法的同时求余数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;12.345&quot;</span>);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;0.12&quot;</span>);<br>        BigDecimal[] dr = n.divideAndRemainder(m);<br>        System.out.println(dr[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 102</span><br>        System.out.println(dr[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 0.105</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>divideAndRemainder()</code>方法时，返回的数组包含两个<code>BigDecimal</code>，分别是商和余数，其中商总是整数，余数不会大于除数。</p><p>需要注意的是，在比较两个<code>BigDecimal</code>的值是否相等时，要特别注意，使用<code>equals()</code>方法不但要求两个<code>BigDecimal</code>的值相等，还要求它们的<code>scale()</code>，即小数点后的位数相等。</p><h1 id="十-常用工具类"><a class="markdownIt-Anchor" href="#十-常用工具类"></a> 十、常用工具类</h1><h2 id="1math类"><a class="markdownIt-Anchor" href="#1math类"></a> 1.Math类</h2><p>多用于数学计算，提供了很多静态方法：</p><p>求绝对值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Math.abs(-<span class="hljs-number">100</span>); <span class="hljs-comment">// 100</span><br>Math.abs(-<span class="hljs-number">7.8</span>); <span class="hljs-comment">// 7.8</span><br></code></pre></td></tr></table></figure><p>取最大或最小值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Math.max(<span class="hljs-number">100</span>, <span class="hljs-number">99</span>); <span class="hljs-comment">// 100</span><br>Math.min(<span class="hljs-number">1.2</span>, <span class="hljs-number">2.3</span>); <span class="hljs-comment">// 1.2</span><br></code></pre></td></tr></table></figure><p>计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mi>y</mi></msup></mrow><annotation encoding="application/x-tex">x^{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span></span></span></span></span></span></span></span>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Math.pow(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>); <span class="hljs-comment">// 2的10次方=1024</span><br></code></pre></td></tr></table></figure><p>计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>x</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">x</span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>​：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Math.sqrt(<span class="hljs-number">2</span>); <span class="hljs-comment">// 1.414...</span><br></code></pre></td></tr></table></figure><p>计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">e^{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></span>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Math.exp(<span class="hljs-number">2</span>); <span class="hljs-comment">// 7.389...</span><br></code></pre></td></tr></table></figure><p>计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ln(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>（底为e的对数）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Math.log(<span class="hljs-number">4</span>); <span class="hljs-comment">// 1.386...</span><br></code></pre></td></tr></table></figure><p>计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">lg(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>（底为10的对数）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Math.log10(<span class="hljs-number">100</span>); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>三角函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Math.sin(<span class="hljs-number">3.14</span>); <span class="hljs-comment">// 0.00159...</span><br>Math.cos(<span class="hljs-number">3.14</span>); <span class="hljs-comment">// -0.9999...</span><br>Math.tan(<span class="hljs-number">3.14</span>); <span class="hljs-comment">// -0.0015...</span><br>Math.asin(<span class="hljs-number">1.0</span>); <span class="hljs-comment">// 1.57079...</span><br>Math.acos(<span class="hljs-number">1.0</span>); <span class="hljs-comment">// 0.0</span><br></code></pre></td></tr></table></figure><p>Math还提供了几个数学常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">pi</span> <span class="hljs-operator">=</span> Math.PI; <span class="hljs-comment">// 3.14159...</span><br><span class="hljs-type">double</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> Math.E; <span class="hljs-comment">// 2.7182818...</span><br>Math.sin(Math.PI / <span class="hljs-number">6</span>); <span class="hljs-comment">// sin(π/6) = 0.5</span><br></code></pre></td></tr></table></figure><p>生成一个随机数x，x的范围是<code>0 &lt;= x &lt; 1</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Math.random(); <span class="hljs-comment">// 0.53907... 每次都不一样</span><br></code></pre></td></tr></table></figure><p>如果我们要生成一个区间在<code>[MIN, MAX)</code>的随机数，可以借助<code>Math.random()</code>实现，计算如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 区间在[MIN, MAX)的随机数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> Math.random(); <span class="hljs-comment">// x的范围是[0,1)</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> x * (max - min) + min; <span class="hljs-comment">// y的范围是[10,50)</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) y; <span class="hljs-comment">// n的范围是[10,50)的整数</span><br>        System.out.println(y);<br>        System.out.println(n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2random类"><a class="markdownIt-Anchor" href="#2random类"></a> 2.Random类</h2><p><code>Random</code>用来创建伪随机数。所谓伪随机数，是指只要给定一个初始的种子，产生的随机数序列是完全一样的。</p><p>要生成一个随机数，可以使用<code>nextInt()</code>、<code>nextLong()</code>、<code>nextFloat()</code>、<code>nextDouble()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>r.nextInt(); <span class="hljs-comment">// 2071575453,每次都不一样</span><br>r.nextInt(<span class="hljs-number">10</span>); <span class="hljs-comment">// 5,生成一个[0,10)之间的int</span><br>r.nextLong(); <span class="hljs-comment">// 8811649292570369305,每次都不一样</span><br>r.nextFloat(); <span class="hljs-comment">// 0.54335...生成一个[0,1)之间的float</span><br>r.nextDouble(); <span class="hljs-comment">// 0.3716...生成一个[0,1)之间的double</span><br></code></pre></td></tr></table></figure><p>有同学问，每次运行程序，生成的随机数都是不同的，没看出<strong>伪随机数</strong>的特性来。</p><p>这是因为我们创建<code>Random</code>实例时，如果不给定种子，就使用系统当前时间戳作为种子，因此每次运行时，种子不同，得到的伪随机数序列就不同。</p><p>如果我们在创建<code>Random</code>实例时指定一个种子，就会得到完全确定的随机数序列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">12345</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(r.nextInt(<span class="hljs-number">100</span>));<br>        &#125;<br>        <span class="hljs-comment">// 51, 80, 41, 28, 55...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>前面我们使用的<code>Math.random()</code>实际上内部调用了<code>Random</code>类，所以它也是伪随机数，只是我们无法指定种子。</p><h2 id="3securerandom"><a class="markdownIt-Anchor" href="#3securerandom"></a> 3.SecureRandom</h2><p>真正的真随机数只能通过量子力学原理来获取，我们想要获取一个不可预测的安全的随机数时，可以使用<code>SecureRandom</code>这个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SecureRandom</span> <span class="hljs-variable">sr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>();<br>System.out.println(sr.nextInt(<span class="hljs-number">100</span>));<br></code></pre></td></tr></table></figure><p><code>SecureRandom</code>无法指定种子，它使用RNG（random number generator）算法。JDK的<code>SecureRandom</code>实际上有多种不同的底层实现，有的使用安全随机种子加上伪随机数算法来产生安全的随机数，有的使用真正的随机数生成器。实际使用的时候，可以优先获取高强度的安全随机数生成器，如果没有提供，再使用普通等级的安全随机数生成器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SecureRandom</span> <span class="hljs-variable">sr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            sr = SecureRandom.getInstanceStrong(); <span class="hljs-comment">// 获取高强度安全随机数生成器</span><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            sr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>(); <span class="hljs-comment">// 获取普通的安全随机数生成器</span><br>        &#125;<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        sr.nextBytes(buffer); <span class="hljs-comment">// 用安全随机数填充buffer</span><br>        System.out.println(Arrays.toString(buffer));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SecureRandom</code>的安全性是通过操作系统提供的安全的随机种子来生成随机数。这个种子是通过CPU的热噪声、读写磁盘的字节、网络流量等各种随机事件产生的“熵”。</p><p>在密码学中，安全的随机数非常重要。如果使用不安全的伪随机数，所有加密体系都将被攻破。因此，时刻牢记必须使用<code>SecureRandom</code>来产生安全的随机数。</p><hr /><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>廖雪峰的官方网站.Java教程[EB/OL].(2025-06-07)[2025-08-21]. <a href="https://www.cnblogs.com/echolun/p/12709761.html">https://www.cnblogs.com/echolun/p/12709761.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记（二）：引用类型与流程控制语句</title>
    <link href="/2025/08/21/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2025/08/21/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>声明：本篇笔记部分摘自<a href="https://detail.tmall.com/item.htm?ali_refid=a3_420434_1006%3A1151895243%3AN%3AoB1xLXSDdjSpCunkFwpZbCtvD%2B6YEaA9%3A39f8fcdda956d1ec63523e9a6e9e2355&amp;id=708821240842&amp;mi_id=0000mg2-P7Ustbzeym2_6DxuUMLCpndkVCAGc5EaA_l8QQ0&amp;mm_sceneid=1_0_128421313_0&amp;priceTId=2147831a17554253371677975e1dca&amp;spm=a21n57.1.hoverItem.2&amp;utparam=%7B%22aplus_abtest%22%3A%226b956865e0df43cd4a6620880d877f11%22%7D&amp;xxc=ad_ztc">《Java核心技术（卷Ⅰ） - 机械工业出版社》</a>及<a href="https://liaoxuefeng.com/books/java/introduction/index.html">Java教程-廖雪峰-2025-06-16</a>，遵循<a href="https://creativecommons.org/licenses/by/4.0/legalcode.zh-hans">CC BY 4.0协议</a>。<br />存在由AI生成的小部分内容，仅供参考，请仔细甄别可能存在的错误。</p></blockquote><hr /><h1 id="一-引用类型"><a class="markdownIt-Anchor" href="#一-引用类型"></a> 一、引用类型</h1><p>之前我们探索了整型、浮点型、布尔型以及字符型这几种相对简单的基本数据类型，现在我们可以在此基础上拓展出更复杂的类型了，虽然初看起来比较复杂繁琐，但是掌握熟练后会有很大的帮助。</p><p>在Java中，<strong>引用类型</strong>是一种数据类型，它并不直接持有对象本身的值，而是持有对象的<strong>内存地址（引用）</strong>。我们操作一个引用类型的变量时，实际上是通过这个地址在间接地操作堆内存中的对象。</p><p>这与基本数据类型（Primitive Types）形成鲜明对比，基本类型（如 <code>int</code>, <code>double</code>, <code>char</code>, <code>boolean</code> 等）的变量直接存储了它们的值。</p><h2 id="1字符串"><a class="markdownIt-Anchor" href="#1字符串"></a> 1.字符串</h2><p>Java字符串就是Unicode字符序列。如字符串&quot;Java\u2122&quot;由“J、a、v、a、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msup></mrow><annotation encoding="application/x-tex">^{TM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span></span></span></span></span></span></span></span>”这五个字符（TM商标算作一个字符）组成。String标准类库中提供的这个预定义类被很自然地称作了String。每个用双引号括起来的字符串都是String类的一个实例。</p><h3 id="1-子串"><a class="markdownIt-Anchor" href="#1-子串"></a> ① 子串</h3><p>类似于Python中对列表的“切片”操作，Java也定义了对字符串截取一部分子串的方法 <code>substring()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">sub_s</span> <span class="hljs-operator">=</span> greeting.substring(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);    <span class="hljs-comment">// 得到子串“Hel”</span><br></code></pre></td></tr></table></figure><p>该方法接收两个参数，范围为<code>[a, b)</code>；下标从<code>0</code>开始。</p><h3 id="2-拼接"><a class="markdownIt-Anchor" href="#2-拼接"></a> ② 拼接</h3><p>Java中可以很方便地使用加号 <code>+</code> 来直接拼接两个字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hel&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lo!&quot;</span>;<br><br>System.out.println(s1 + s2);<br><br><span class="hljs-comment">// 输出： Hello!</span><br></code></pre></td></tr></table></figure><p>不同于Python在试图直接拼接字符与其他类型时会报告 <code>TypeError</code>，Java在拼接字符串时会自动将它们转换成<code>String</code>类型。</p><p>如果希望用一个间隔符将很多个字符串（特别是字符串数组）连接起来，可以使用join方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;常用的尺码有：&quot;</span> + String.join(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;XL&quot;</span>));<br><br><span class="hljs-comment">// 输出： 常见的尺码有：S/M/L/XL</span><br></code></pre></td></tr></table></figure><p>在Python中可以将乘号 <code>*</code> 应用于字符串实现重复输出，如<code>print(&quot;Ha&quot; * 3)</code>会打印出<code>HaHaHa</code>。对于Java来说，我们可以通过<code>System.out.println(&quot;Ha&quot;.repeat(3));</code>来实现重复多次输出一个字符串。</p><h3 id="3-字符串是不可变的"><a class="markdownIt-Anchor" href="#3-字符串是不可变的"></a> ③ 字符串是不可变的</h3><p>对于一个已经定义的字符串<code>String greeting = &quot;Hello&quot;</code>，直接通过替换后面几个字母将其改为<code>&quot;Help!&quot;</code>是难以办到的，通常的做法是将这个字符串重新赋值。这样一来，可以认为字符串中的单个字符是不可以独立修改的，也就是说字符串是<strong>不可变的（immutable）</strong>。</p><blockquote><p>在C/C++中经常认为字符串是字符型的数组，但是在Java中应当将其视为一个 char* 指针。</p></blockquote><p>类似于Python而不同于C/C++，Java字符串更像是一个对象而不是字符数组，通过一个<code>length</code>字段明确地记录了字符串的长度，因此无需在字符串的末尾隐式地添加一个<code>\0</code>截止符。这一点在熟悉C/C++后学习Java程序设计时需要特别注意。</p><h3 id="4-字符串相同的判断方法"><a class="markdownIt-Anchor" href="#4-字符串相同的判断方法"></a> ④ 字符串相同的判断方法</h3><p>在C++中，String类重载了<code>==</code>运算符的逻辑，从而让我们能够方便地像比较数值一样去判断两字符串是否相同。但在Java中，由于String类采取的是指针式的策略（引用类型），使用<code>==</code>只能够判断符号两端的字符串或者字面量是否指向同一个内存地址。但绝大多数情况下都会出现两个相同的字符串存储在不同地址上的情况，这样就会使得在Java中使用<code>==</code>来比较字符串出现奇奇怪怪的bug，甚至某些情况下这种bug还是间歇性的，复现和排查起来相对困难，是一种很糟糕的情况。</p><p>为了在Java中判断两个字符串或者字面量是否相同，我们可以使用<code>equals()</code>方法。例如我们有一个字符串<code>String greeting = &quot;Hello!&quot;</code>，我们可以使用<code>greeting.equals(&quot;Hello!&quot;)</code>来检查它的内容，该方法会返回一个表示是否相等的布尔值。只需要检查字符相同忽略大小写的情况下，可以使用<code>equalsIgnoreCase()</code>这个方法。</p><h3 id="5-空串与null串"><a class="markdownIt-Anchor" href="#5-空串与null串"></a> ⑤ 空串与Null串</h3><p>“空串”即空的字符串，指的是长度为0的字符串。它也是Java对象，有自己的串长度（0）和内容（空）。有两种检查办法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (str.length == <span class="hljs-number">0</span>) &#123;&#125;<br><br><span class="hljs-keyword">if</span> (str.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;&#125;<br></code></pre></td></tr></table></figure><p>String类型的变量还可以存储一个特殊值null，表示没有对象与该变量关联。这时可以使用<code>if (str != null)</code>来排除对null串调用一些方法从而引发异常的可能性。</p><h3 id="6-码点与代码单元"><a class="markdownIt-Anchor" href="#6-码点与代码单元"></a> ⑥ 码点与代码单元</h3><p>Java字符串是一个char值序列。前面提到char这种数据类型采用UTF-16编码表示Unicode码点的一个代码单元；常用的Unicode字符可以使用一个代码单元表示，而一些辅助字符需要一对代码单元。在UTF-16编码中，<strong>一个代码单元固定为2字节（16位）</strong>，这与Java的 <code>char</code> 类型完全一致。以下是一些相关的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>str.length()</td><td>返回字符串的长度（UTF_16编码下需要的代码单元个数）</td></tr><tr><td>str.codePointCount(a, b)</td><td>返回字符串的[a, b)子串的实际长度</td></tr><tr><td>s.charAt(n)</td><td>返回位置n的代码单元</td></tr><tr><td>str.CodePointAt(n)</td><td>返回位置n的码点</td></tr></tbody></table><p>备注：</p><ul><li>对于方法 <code>str.codePointCount(a, b)</code>，如果想要查看字符串的总实际长度，可以使用参数 <code>(0, str.length())</code> 。</li><li>不要辅助字符使用<code>str.charAt(n)</code>方法，这些字符由于使用两个代码单元表示，只会得到代码单元的前一半或后一半。</li></ul><p>对于字符串 <code>&quot;我喜欢喝🍺&quot;</code>，其中的 <code>🍺</code> 是UTF-16编码为 <code>U+1F37A</code> 的一个emoj表情，形状是一杯啤酒。以下是对这个字符串使用这些方法的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我喜欢喝🍺&quot;</span>;<br>        <br>        System.out.println(<span class="hljs-string">&quot;代码单元个数：&quot;</span> + s.length());<br>        System.out.println(<span class="hljs-string">&quot;实际长度：&quot;</span> + s.codePointCount(<span class="hljs-number">0</span>, s.length()));<br>        System.out.println(<span class="hljs-string">&quot;第三个字的代码单元：&quot;</span> + s.charAt(<span class="hljs-number">2</span>));<br>        System.out.println(<span class="hljs-string">&quot;第三个字的码点：&quot;</span> + s.codePointAt(<span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*运行结果：</span><br><span class="hljs-comment">代码单元个数：6</span><br><span class="hljs-comment">实际长度：5</span><br><span class="hljs-comment">第三个字的代码单元：欢</span><br><span class="hljs-comment">第三个字的码点：27426</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>或许大家会对上面例子中“🍺”这个奇怪的字符感到疑惑（实际上想打出来这个字符也挺麻烦的，需要切换到微软的中文输入法，然后输入关键词“啤酒”才能打出来）：</p><p><img src="20250819150049710.png#sc" alt="" /></p><p>但这些使用字符表示的emoj在表情包流行以前，甚至是现在仍然收到很多用户的欢迎，很多用户都经常用来在发送的消息中更形象地表达自己的情感，甚至有人拿来做软件的图标（见下图）：</p><p><img src="20250819151533701.jpg#sc" alt="" /></p><p>有关emoj的更多信息，可以参考这个视频：<a href="https://www.bilibili.com/video/BV1Xh4y1v7ch/">【emoji】原来才是这个互联网的唯一顶流… – 哔哩哔哩</a></p><p>扯远了😂String类还有很多实用的方法，由于使用频率和文章篇幅这里就省略了，需要的时候再查询API文档或者直接询问AI即可。</p><h3 id="7-字符串的构建"><a class="markdownIt-Anchor" href="#7-字符串的构建"></a> ⑦ 字符串的构建</h3><p>如果经常需要向一个字符串添加内容，实现类似于Python中对列表的<code>append</code>方法一样给一个字符串补充新内容，可以使用<code>StringBuilder</code>类,同样使用<code>append</code>方法来添加新内容到字符串中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">// 定义空的字符串构建器</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br><span class="hljs-comment">// 添加内容</span><br>        str.append(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        str.append(<span class="hljs-string">&quot;,world!&quot;</span>);<br><br>        System.out.println(str);<br><br><span class="hljs-comment">// 也可以转化成String类，得到普通的字符串：</span><br><span class="hljs-type">String</span> <span class="hljs-variable">completed_str</span> <span class="hljs-operator">=</span> str.toString();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 输出： Hello,world!</span><br></code></pre></td></tr></table></figure><p>类似地，Java中还有一个<code>StringBuffer</code>类，它的API与<code>StringBuilder</code>类似，虽然效率略低，但是允许多线程构建字符串。（虽然说多线程大多数情况下也用不上，使用<code>StringBuilder</code>就足够了）</p><h3 id="8-文本块"><a class="markdownIt-Anchor" href="#8-文本块"></a> ⑧ 文本块</h3><p>类似Python的多行字符串，Java可以使用<code>&quot;&quot;&quot;</code>定义一个多行的文本块，这里一笔带过。</p><h2 id="2数组"><a class="markdownIt-Anchor" href="#2数组"></a> 2.数组</h2><h3 id="1-定义一个数组"><a class="markdownIt-Anchor" href="#1-定义一个数组"></a> ① 定义一个数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 数组</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 5位同学的成绩:</span><br><span class="hljs-type">int</span>[] ns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>ns[<span class="hljs-number">0</span>] = <span class="hljs-number">68</span>;<br>ns[<span class="hljs-number">1</span>] = <span class="hljs-number">79</span>;<br>ns[<span class="hljs-number">2</span>] = <span class="hljs-number">91</span>;<br>ns[<span class="hljs-number">3</span>] = <span class="hljs-number">85</span>;<br>ns[<span class="hljs-number">4</span>] = <span class="hljs-number">62</span>;<br><br><span class="hljs-comment">// 也可以写成ns = &#123; 68, 79, 91, 85, 62 &#125;;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个数组类型的变量，使用 <code>类型[] 数组名 = new 类型[长度]</code>。数组变量初始化必须使用 <code>new int[5]</code> 表示创建一个可容纳5个 <code>int</code> 元素的数组。也可以写成 <code>int[] ns = new int[] &#123; 68, 79, 91, 85, 62 &#125;;</code>，在定义的同时进行初始化操作，编译器会自动推算数组长度。</p><p>Java的数组有几个特点：</p><ul><li>数组所有元素初始化为默认值，整型都是 <code>0</code> ，浮点型是 <code>0.0</code> ，布尔型是 <code>false</code> ；</li><li>数组一旦创建后，大小就不可改变。</li><li>与 <code>String类</code> 相同，数组也是引用类型，不可以修改长度。</li></ul><h3 id="2-数组元素的访问与修改"><a class="markdownIt-Anchor" href="#2-数组元素的访问与修改"></a> ② 数组元素的访问与修改</h3><p>要访问数组中的某一个元素，需要使用索引。同样，数组索引从 <code>0</code> 开始，<code>n</code> 个元素的数组，索引范围是 <code>0 ~ n-1</code> 。使用赋值语句修改数组元素，例如 <code>ns[1] = 79</code>。可以用 <code>数组变量.length</code> 获取数组大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span>[] ns;<br><br>        ns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; <span class="hljs-number">68</span>, <span class="hljs-number">79</span>, <span class="hljs-number">91</span>, <span class="hljs-number">85</span>, <span class="hljs-number">62</span> &#125;;<br>        System.out.println(Arrays.toString(ns));<br><br>        ns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br>        System.out.println(Arrays.toString(ns));<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 输出结果：</span><br>[<span class="hljs-number">68</span>, <span class="hljs-number">79</span>, <span class="hljs-number">91</span>, <span class="hljs-number">85</span>, <span class="hljs-number">62</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p>这时有同学就要问了，“不是说数组长度不能修改吗？”注意这里数组是引用类型，第二句的 <code>ns = new int[] &#123; 1, 2, 3 &#125;;</code> 会让 <code>ns</code> 指向一个新的数组，如下图所示：</p><p><img src="20250820170301214.png#bc" alt="" /></p><p>（还好Java有<strong>垃圾回收</strong>的处理机制，会在检测到之前的数组无用之后自动清理掉，避免了内存泄漏的发生…）</p><h3 id="3-数组的打印"><a class="markdownIt-Anchor" href="#3-数组的打印"></a> ③ 数组的打印</h3><p>细心的同学会发现，上例中输出数组元素时使用了 <code>Arrays.toString(ns)</code> 的写法，可以直接 <code>System.out.println(ns)</code>吗？<br /><s>（要你说，能用我还费劲巴拉引入java.util.Arrays干啥）</s></p><p>试试看吧，实际上输出了 <code>[I@5caf905d</code> 这样明显不是给人看的玩意~~（你要说能看得懂那我佩服你）<s>，这是表示字符串数组的 <code>Class</code> 名，<code>@</code> 后面的是十六进制的 <code>hashCode</code>。这是因为数组虽然没有显式定义成一个类，但它的确是一个对象，继承了祖先类 Object 的所有方法</s>（那这又是为什么呢）~~。想要实现类似于Python那样，以<strong>很人性化</strong>的方式查看数组的各个元素，需要这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-type">int</span>[] s = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br>System.out.println(Arrays.toString(s));<br></code></pre></td></tr></table></figure><p>（对比一下Python <code>s = [1, 2, 3]</code>、<code>print(s)</code> 简单两行搞定，深刻体会到了“人生苦短，我用Python”这句话多对了…）</p><h3 id="4-元素也是引用类型的情况"><a class="markdownIt-Anchor" href="#4-元素也是引用类型的情况"></a> ④ 元素也是引用类型的情况</h3><p>来看这样一个数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] names = &#123; <span class="hljs-string">&quot;ABC&quot;</span>, <span class="hljs-string">&quot;XYZ&quot;</span>, <span class="hljs-string">&quot;zoo&quot;</span> &#125;;<br></code></pre></td></tr></table></figure><p>发现数组中的元素也是引用类型的，它们实际上也是一层指针类似的概念。Java是如何处理这样的数组的呢？</p><p>这里就有点像真正意义上的指针了，对于String类型的数组，它的每一个元素都<strong>指向</strong>某个字符串对象，而不是直接存储这些字符串对象。看图的话估计更好理解：</p><p><img src="20250820173143784.png" alt="" /></p><p>此时对 <code>names[1]</code> 赋值，也只会把 <code>names[1]</code> 指向另一个字符串，原来的被自动回收掉，再也无法访问到了。</p><p>再看下面这段代码，运行结果是什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        String[] names = &#123;<span class="hljs-string">&quot;ABC&quot;</span>, <span class="hljs-string">&quot;XYZ&quot;</span>, <span class="hljs-string">&quot;zoo&quot;</span>&#125;;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> names[<span class="hljs-number">1</span>];<br>        String[] names_2 = names;<br><br>        names[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;cat&quot;</span>;<br>        System.out.println(s);             <span class="hljs-comment">// 是&quot;XYZ&quot;还是&quot;cat&quot;?</span><br>        System.out.println(names_2[<span class="hljs-number">1</span>]);    <span class="hljs-comment">// 是&quot;XYZ&quot;还是&quot;cat&quot;?</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出的结果：<code>s=&quot;XYZ&quot;, names_2[1]=&quot;cat&quot;</code>。虽然后面修改了 <code>names[1]</code>，但在这之前 <code>s</code> 已经指向了 <code>&quot;XYZ&quot;</code> 或者说拷贝了 <code>names[1]</code> 中<code>&quot;XYZ&quot;</code> 的地址，即使后面修改了 <code>names[1]</code>，也只是指向了另外一个字符串 <code>&quot;cat&quot;</code>，之前的 <code>XYZ</code> 仍然存在，并且因为已经关联了 <code>x</code>，不是无用的资源也就不会被回收掉。</p><h3 id="5-数组的遍历"><a class="markdownIt-Anchor" href="#5-数组的遍历"></a> ⑤ 数组的遍历</h3><p>有时需要逐个读取数组的元素来进行统计或替换等处理，通常使用 <code>for</code> 循环来进行遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++) &#123;<br>System.out.println(arr[i]);<br>&#125;<br><br><span class="hljs-comment">// 还可以直接使用 for-each遍历</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n : arr) &#123;<br>System.out.println(n);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-数组排序"><a class="markdownIt-Anchor" href="#6-数组排序"></a> ⑥ 数组排序</h3><h4 id="手搓冒泡排序"><a class="markdownIt-Anchor" href="#手搓冒泡排序"></a> 手搓冒泡排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <br>        <span class="hljs-type">int</span>[] ns = &#123; <span class="hljs-number">28</span>, <span class="hljs-number">12</span>, <span class="hljs-number">89</span>, <span class="hljs-number">73</span>, <span class="hljs-number">65</span>, <span class="hljs-number">18</span>, <span class="hljs-number">96</span>, <span class="hljs-number">50</span>, <span class="hljs-number">8</span>, <span class="hljs-number">36</span> &#125;;<br>        <span class="hljs-comment">// 排序前:</span><br>        System.out.println(Arrays.toString(ns));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ns.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; ns.length - i - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (ns[j] &gt; ns[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-comment">// 交换ns[j]和ns[j+1]:</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> ns[j];<br>                    ns[j] = ns[j + <span class="hljs-number">1</span>];<br>                    ns[j + <span class="hljs-number">1</span>] = tmp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 排序后:</span><br>        System.out.println(Arrays.toString(ns));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>冒泡排序的原理是，每次都将前 <code>n</code> 个数中的最大值&quot;冒泡&quot;到最右边，然后忽略这个最大值，然后再找前 <code>n-1</code> 个数中的最大值冒泡到之前最大值的左边；以此类推，最后就形成了从小到大的有序列表。</p><h4 id="arraysort方法"><a class="markdownIt-Anchor" href="#arraysort方法"></a> Array.sort方法</h4><p>Java的标准库已经内置了排序功能，我们只需要调用JDK提供的 <code>Arrays.sort()</code> 就可以排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span>[] ns = &#123; <span class="hljs-number">28</span>, <span class="hljs-number">12</span>, <span class="hljs-number">89</span>, <span class="hljs-number">73</span>, <span class="hljs-number">65</span>, <span class="hljs-number">18</span>, <span class="hljs-number">96</span>, <span class="hljs-number">50</span>, <span class="hljs-number">8</span>, <span class="hljs-number">36</span> &#125;;<br>        Arrays.sort(ns);<br>        System.out.println(Arrays.toString(ns));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此方法会改变数组的内容，而不是返回一个临时的结果；即排序后数组中各元素指向的地址会变化。<code>Arrays.sort()</code> 方法会对字符串数组按照首字母 <code>a ~ z</code> 排序。</p><h3 id="7-二维数组"><a class="markdownIt-Anchor" href="#7-二维数组"></a> ⑦ 二维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] ns = &#123;<br> &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> &#125;,<br> &#123; <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span> &#125;,<br> &#123; <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span> &#125;<br>&#125;;<br><br>System.out.println(ns.length); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>想要<s>人性化地</s>优雅地输出二维数组，可以使用二重循环或者 <code>Arrays.deepToString()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] ns = &#123;<br> &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> &#125;,<br> &#123; <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;,<br> &#123; <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span> &#125;<br>&#125;;<br><br>System.out.println(Arrays.deepToString(ns));<br></code></pre></td></tr></table></figure><h1 id="二-流程控制语句"><a class="markdownIt-Anchor" href="#二-流程控制语句"></a> 二、流程控制语句</h1><h2 id="1格式化输出"><a class="markdownIt-Anchor" href="#1格式化输出"></a> 1.格式化输出</h2><p>Java同样支持C/C++中的 <code>printf()</code> 方法,使用占位符 <code>%</code> 实现格式化输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415926</span>;<br>    <br>    System.out.printf(<span class="hljs-string">&quot;%.2f\n&quot;</span>, d); <br>    <span class="hljs-comment">// 显示两位小数3.14</span><br>    System.out.printf(<span class="hljs-string">&quot;%.4f\n&quot;</span>, d); <br>    <span class="hljs-comment">// 显示4位小数3.1416</span><br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td><code>%d</code></td><td>格式化输出整数</td></tr><tr><td><code>%x</code></td><td>格式化输出十六进制整数</td></tr><tr><td><code>%f</code></td><td>格式化输出浮点数</td></tr><tr><td><code>%e</code></td><td>格式化输出科学计数法表示的浮点数</td></tr><tr><td><code>%s</code></td><td>格式化字符串</td></tr><tr><td><code>%%</code></td><td>表示普通的%符号</td></tr></tbody></table><p>一些比较复杂的格式控制，如 <code>%02d</code>、<code>%-3f</code> 与C/C++中的定义基本相同，此处省略。</p><h2 id="2用户输入"><a class="markdownIt-Anchor" href="#2用户输入"></a> 2.用户输入</h2><p>C语言中使用<code>scanf()</code>方法接收输入，C++中使用<code>cin &gt;&gt;</code>输入流；而在Java中略微麻烦一些，需要引入<code>Scanner</code>类，并创建一个<code>Scanner</code>对象。</p><ul><li>使用 <code>scanner.nextLine()</code> 读取用户输入的字符串</li><li>使用 <code>scanner.nextInt()</code> 读取用户输入的整数</li><li>使用 <code>scanner.nextDouble()</code> 读取用户输入的双精度小数</li></ul><p><code>Scanner</code> 会自动转换数据类型，不必手动转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);         <span class="hljs-comment">// 创建Scanner对象</span><br><br>        System.out.print(<span class="hljs-string">&quot;请输入你的姓名: &quot;</span>);               <span class="hljs-comment">// 打印提示</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.nextLine();                 <span class="hljs-comment">// 读取一行输入并获取字符串</span><br>        System.out.print(<span class="hljs-string">&quot;请输入你的年龄: &quot;</span>);               <span class="hljs-comment">// 打印提示</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> scanner.nextInt();                      <span class="hljs-comment">// 读取一行输入并获取整数</span><br><br>        System.out.printf(<span class="hljs-string">&quot;你好%s,你现在%d岁\n&quot;</span>, name, age); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3if语句"><a class="markdownIt-Anchor" href="#3if语句"></a> 3.if语句</h2><p><code>if</code>语句的写法与C/C++一致，这里不多赘述，记得引用类型(String等)不能使用 <code>a == b</code> 比较，要使用 <code>a.equals(b)</code> 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件<span class="hljs-number">1</span>) &#123;<br>操作<span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件<span class="hljs-number">2</span>) &#123;<br>操作<span class="hljs-number">2</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件<span class="hljs-number">3</span>) &#123;<br>操作<span class="hljs-number">3</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>操作<span class="hljs-number">4</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4swith语句"><a class="markdownIt-Anchor" href="#4swith语句"></a> 4.Swith语句</h2><h3 id="1-switch语句概述"><a class="markdownIt-Anchor" href="#1-switch语句概述"></a> ① switch语句概述</h3><p>学过C语系编程语言的同学都应该很熟悉switch-case这一套了。直接上语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (表达式) &#123;<br><span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>: 操作<span class="hljs-number">1</span>; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>: 操作<span class="hljs-number">2</span>; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> 值<span class="hljs-number">3</span>: 操作<span class="hljs-number">3</span>; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>: 操作<span class="hljs-number">4</span>; <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>若要为多个分支定义相同的操作，可以使用这样的语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><br>        <span class="hljs-keyword">switch</span> (week) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>:<br>                System.out.println(<span class="hljs-string">&quot;不是周末&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>, <span class="hljs-number">7</span>:<br>                System.out.println(<span class="hljs-string">&quot;是周末&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;这个星期不对头&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;;<br><br><span class="hljs-comment">// 这种写法是Java 12引入的新语法，无需break防case穿透</span><br>        <span class="hljs-keyword">switch</span> (week) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> -&gt; System.out.println(<span class="hljs-string">&quot;不是周末&quot;</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>, <span class="hljs-number">7</span> -&gt; System.out.println(<span class="hljs-string">&quot;是周末&quot;</span>);<br>            <span class="hljs-keyword">default</span> -&gt; System.out.println(<span class="hljs-string">&quot;这个星期不对头&quot;</span>);<br>        &#125;;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>传统 <code>switch</code> 是语句</strong>：它控制程序的流程，但不产生一个最终的值。只能在里面执行操作（比如给变量赋值、调用方法）。</li><li><strong>新的 <code>switch</code> 是表达式</strong>：它最终会<strong>计算出一个结果值</strong>，因此可以直接用在赋值操作符 <code>=</code> 的右边。这让代码更紧凑、更函数式。</li></ul><p>如果 <code>switch ()</code> 中的“条件”（专业术语为“操作数”）是 <code>null</code>，则会触发一个 <code>NullPointerException</code>。</p><h3 id="2-switch-枚举"><a class="markdownIt-Anchor" href="#2-switch-枚举"></a> ② switch + 枚举</h3><p>Switch语句可以很好地与枚举类型搭配使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Size</span> &#123;<br>            small, medium, large, extra_large<br>        &#125;;<br><br>        <span class="hljs-type">Size</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Size.small;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">size_label</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span> (s) &#123;<br>            <span class="hljs-keyword">case</span> small -&gt; <span class="hljs-string">&quot;S&quot;</span>;<br>            <span class="hljs-keyword">case</span> medium -&gt; <span class="hljs-string">&quot;M&quot;</span>;<br>            <span class="hljs-keyword">case</span> large -&gt; <span class="hljs-string">&quot;L&quot;</span>;<br>            <span class="hljs-keyword">case</span> extra_large -&gt; <span class="hljs-string">&quot;XL&quot;</span>;<br>        &#125;;<br><br>        System.out.println(s + <span class="hljs-string">&quot;对应的尺寸为：&quot;</span> + size_label);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 输出结果：small对应的尺寸为：S</span><br></code></pre></td></tr></table></figure><h3 id="3-yeild关键字"><a class="markdownIt-Anchor" href="#3-yeild关键字"></a> ③ yeild关键字</h3><p>有时我们不但希望switch语句返回一个值，还能输出一些消息，实现比较复杂的处理，可以使用 <code>yeild</code> 关键字返回一个值，作为switch语句的返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fruit</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;orange&quot;</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">opt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span> (fruit) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;apple&quot;</span> -&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;pear&quot;</span>, <span class="hljs-string">&quot;mango&quot;</span> -&gt; <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">default</span> -&gt; &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> fruit.hashCode();<br>                <span class="hljs-keyword">yield</span> code; <span class="hljs-comment">// switch语句返回这个值</span><br>            &#125;<br>        &#125;;<br><br>        System.out.println(<span class="hljs-string">&quot;opt = &quot;</span> + opt);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 运行结果：opt = -1008851410</span><br></code></pre></td></tr></table></figure><h2 id="5while循环"><a class="markdownIt-Anchor" href="#5while循环"></a> 5.while循环</h2><p>略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (条件) &#123;<br>循环进行的操作<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6do-while循环"><a class="markdownIt-Anchor" href="#6do-while循环"></a> 6.do-while循环</h2><p>略，此循环先进行后判断，因此至少会执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span> &#123;<br>循环执行的操作<br>&#125; <span class="hljs-keyword">while</span> (条件)<br></code></pre></td></tr></table></figure><h2 id="7for循环"><a class="markdownIt-Anchor" href="#7for循环"></a> 7.for循环</h2><p>经典语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (初始条件; 循环条件; 计数器更新) &#123;<br>循环执行的操作<br>&#125;<br></code></pre></td></tr></table></figure><p>for-each循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">double</span> d: array) &#123;<br>System.out.println(d);<br>&#125;<br></code></pre></td></tr></table></figure><p>和for循环相比，<code>for each</code> 循环的变量 <code>n</code> 不再是计数器，而是直接对应到数组的每个元素。<code>for each</code> 循环的写法也更简洁。但是，<code>for each</code> 循环无法指定遍历顺序，也无法获取数组的索引。</p><h2 id="8-break和continue-goto"><a class="markdownIt-Anchor" href="#8-break和continue-goto"></a> 8. break和continue、goto</h2><p>与C/C++相同，Java中的 <code>break</code> 关键字可以用来跳出当前的循环（立即中断循环，跳过此轮循环剩余操作，直接跳出循环进入下面的逻辑）；<code>continue</code> 关键字用于跳过这一次循环（立即中断循环，继续进行下一轮循环）。</p><blockquote><p>相当于在流水线上打螺丝，<code>break</code> 表示到点下班直接撂挑子不干，骑小电驴回家；<code>continue</code> 表示打到一半发现这螺丝是次品，把这一个丢了继续打下一个螺丝…</p></blockquote><p>虽然 <code>goto</code> 语句被认为是一个不好的设计，会让代码的流程变得非常复杂（像面条一样搅在一起）；因此Java中去掉了这一个关键字。但是这样 <code>设计一个标志，在需要的时候让程序回到这个标志处向下执行的逻辑</code> 是很有用的，比如说一次性跳出多重循环。好在Java提供了<strong>带标签的break和continue</strong>来实现类似的控制流功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        outerLoop:<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.err.println(i);<br><br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>) &#123;<br>                System.err.println(<span class="hljs-string">&quot;跳转到outerLoop处&quot;</span>);<br>                <span class="hljs-keyword">break</span> outerLoop;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上例中通过 <code>outerLoop:</code> 定义了一个标志（注意用冒号结束，不是分号）；然后通过 <code>break outerloop;</code> 终止循环并且跳转到标志处，当然也可以写 <code>continue outerloop</code> 就是了。</p><p>不过虽然这样做很爽，也还是要谨记代码简洁性和易读性的原则，要么让跳转语句和标志之间不要有太长的逻辑；要么添加上比较详细的注释说明，防止协作开发的时候同事对着咱写的代码<s>素质飙升</s>礼貌问候…</p><hr /><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>廖雪峰的官方网站.Java教程[EB/OL].(2025-06-07)[2025-08-21]. <a href="https://www.cnblogs.com/echolun/p/12709761.html">https://www.cnblogs.com/echolun/p/12709761.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记（一）：Java概述及程序设计起步</title>
    <link href="/2025/08/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AJava%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%B5%B7%E6%AD%A5/"/>
    <url>/2025/08/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AJava%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%B5%B7%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>声明：本篇笔记部分摘自<a href="https://detail.tmall.com/item.htm?ali_refid=a3_420434_1006%3A1151895243%3AN%3AoB1xLXSDdjSpCunkFwpZbCtvD%2B6YEaA9%3A39f8fcdda956d1ec63523e9a6e9e2355&amp;id=708821240842&amp;mi_id=0000mg2-P7Ustbzeym2_6DxuUMLCpndkVCAGc5EaA_l8QQ0&amp;mm_sceneid=1_0_128421313_0&amp;priceTId=2147831a17554253371677975e1dca&amp;spm=a21n57.1.hoverItem.2&amp;utparam=%7B%22aplus_abtest%22%3A%226b956865e0df43cd4a6620880d877f11%22%7D&amp;xxc=ad_ztc">《Java核心技术（卷Ⅰ） - 机械工业出版社》</a>及<a href="https://liaoxuefeng.com/books/java/introduction/index.html">Java教程-廖雪峰-2025-06-16</a>，遵循<a href="https://creativecommons.org/licenses/by/4.0/legalcode.zh-hans">CC BY 4.0协议</a>。这本书以及这个系列的笔记会将Java与一些编程语言的特性作比较；建议拥有一定的C/C++或其他编程语言的学习基础后，再阅读这本书或这个系列的笔记来学习Java。如果是第一次接触编程语言，建议从相对简单的C语言或Python开始；或者参考一些体系化的视频课程来进行学习，否则会感到有一定的压力。<br />存在由AI生成的小部分内容，仅供参考，请仔细甄别可能存在的错误。</p></blockquote><h1 id="一-java概述"><a class="markdownIt-Anchor" href="#一-java概述"></a> 一、Java概述</h1><h2 id="1java发展史"><a class="markdownIt-Anchor" href="#1java发展史"></a> 1.Java发展史</h2><blockquote><p>Java最早是由SUN公司（已被Oracle收购）的詹姆斯·高斯林（高司令，人称Java之父）在上个世纪 90年代初开发的一种编程语言，最初被命名为Oak，目标是针对小型家电设备的嵌入式应用（结果市场没啥反响）。互联网的崛起让Oak重新焕发了生机，于是SUN公司改造了Oak，由于Oak已经被注册，在1995年以Java的名称正式发布。随着互联网的高速发展，Java逐渐成为最重要的网络编程语言。<br />Java介于编译型语言和解释型语言之间。编译型语言如C、C++，代码是直接编译成机器码执行，但是不同的平台（x86、ARM等）CPU的指令集不同，因此，需要编译出每一种平台的对应机器码。解释型语言如Python、Ruby没有这个问题，可以由解释器直接加载源码然后运行，代价是运行效率太低。而Java是将代码编译成一种“字节码”，它类似于抽象的CPU指令，然后，针对不同平台编写虚拟机，不同平台的虚拟机负责加载字节码并执行，这样就实现了“一次编写，到处运行”的效果。当然，这是针对Java开发者而言。对于虚拟机，需要为每个平台分别开发。为了保证不同平台、不同公司开发的虚拟机都能正确执行Java字节码，SUN公司制定了一系列的Java虚拟机规范。从实践的角度看，JVM的兼容性做得非常好，低版本的Java字节码完全可以正常运行在高版本的JVM上。</p></blockquote><p>随着Java的不断发展，出现了三个版本：</p><ul><li>Java SE: standard edition, 标准版本</li><li>Java EE: enterprise edition, 企业版本</li><li>Java ME: mico edition, 微服务版本</li></ul><p>这三者是 <code>Java EE &gt; Java SE &gt; Java ME</code> 的关系，，Java SE就是标准版，包含标准的JVM和标准库，而Java EE是企业版，它在Java SE的基础上添加了大量的API和库，以便方便开发Web应用、数据库、消息服务等，Java EE的应用使用的虚拟机和Java SE完全相同。Java ME就和Java SE不同，它是一个针对嵌入式设备的“瘦身版”，Java SE的标准库无法在Java ME上使用，Java ME的虚拟机也是“瘦身版”。</p><h2 id="2java学习路线"><a class="markdownIt-Anchor" href="#2java学习路线"></a> 2.Java学习路线</h2><p>对于常规的Java软件应用开发者来说，学习Java SE、Java EE就足够了。Java ME的流行程度不高，如果没有特殊需求无需学习。下面是推荐的学习路线：</p><ol><li>首先学习Java SE，掌握Java语言本身、Java核心开发技术以及Java标准库的使用；</li><li>继续学习Java EE，重点学习Spring框架、数据库开发、分布式架构；</li><li>如果打算学习大数据开发，那么Hadoop、Spark、Flink这些大数据平台就是需要学习的，他们都基于Java或Scala开发；</li><li>如果想要学习移动开发，那么就深入Android平台，掌握Android App开发。</li></ol><h2 id="3jdk与jre-jvm"><a class="markdownIt-Anchor" href="#3jdk与jre-jvm"></a> 3.JDK与JRE、JVM</h2><ul><li>JDK：Java Development Kit，Java程序开发工具包</li><li>JRE：Java Runtime Environment，Java运行时环境</li><li>JVM:Java Virtual Machine，Java虚拟机</li></ul><p>打个简单的比方，JDK类似于厨房里的食材和食谱（标准类库和方法），我们可以用来设计各种菜品（源代码）；JRE是餐厅，让厨师有地方做菜，并且能够让顾客有地方享受美食（运行环境）；JVM就是制作食物的厨师，负责将我们设计的菜品做成食物（编译执行）。</p><p>与上面例子稍有不同的是，JDK中也包含了JRE与调试器、编译器等开发工具，而JRE当然是包含JVM的了。即：我们通过JDK编写代码，在JRE中经过JVM的编译之后再运行。它们之间的关系如下图：</p><p><img src="20250820160152470.png#bc" alt="" /></p><p>玩过Java版MC的同学应该都知道，在启动游戏之前会检查Java版本，这里的“Java版本”指的是JRE，即我们需要准备好在自己的电脑上运行Java的环境。</p><h2 id="4jsr与jcp"><a class="markdownIt-Anchor" href="#4jsr与jcp"></a> 4.JSR与JCP</h2><ul><li>JSR：Java Specification Request，Java规范要求</li><li>JCP：Java Community Process，Java社区组织</li></ul><p>为了保证Java语言有良好的可拓展性和可移植性，需要很高的代码规范性。JSR这一规范就规定了开发者在为Java添砖加瓦时的代码功能。JCP这一组织的任务之一就是审核和修订JSR。</p><h2 id="5java的特点"><a class="markdownIt-Anchor" href="#5java的特点"></a> 5.Java的特点</h2><p>下面是<a href="https://www.oracle.com/java/technologies/javase/javase-whitepapers.html">Java白皮书</a>上提到的11个关键术语，描述了Java这门编程语言的一些特点：</p><ul><li>简单性</li><li>面向对象</li><li>分布式</li><li>健壮性</li><li>安全性</li><li>体系结构和中立</li><li>可移植性</li><li>解释性</li><li>高性能</li><li>多线程</li><li>动态性</li></ul><h1 id="二-hello-world"><a class="markdownIt-Anchor" href="#二-hello-world"></a> 二、Hello World!</h1><p>像学习其他的编程语言一样，从最简单的输出&quot;Hello World！&quot;开始：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// HelloWorld.java</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>仔细分析一下这段程序：通过访问修饰符<code>publlic</code>定义了一个公有的类<code>HelloWorld</code>，其中有一个<code>main</code>方法，通过<code>system.out.println()</code>打印了<code>&quot;Hello World!&quot;</code>这么一个字符串。需要注意以下几点：</p><ul><li>必须存在一个公共类与源代码的文件名相同，作为程序的入口；类似于C/C++中的main函数；并且该类中必须包含一个main方法，且该方法也必须声明为<code>public</code>。（在VS Code中修改主类或文件名的名称，文件名或主类的名称也会自动跟随修改）</li><li>类的标准命名方式为<strong>驼峰命名法</strong>，即所有单词的首字母均大写；Java区分大小写，<code>main</code>和<code>Main</code>不同。</li><li><strong>类</strong>是Java应用的构建模块，所有的Java程序都必须放在类中。</li><li>语句结束的标志不是回车而是<code>;</code>，有必要的情况下可以使用回车编写一个多行的语句。</li><li><code>system.out.println()</code>方法会在打印之后自动换行，相比之下<code>system.out.print()</code>方法会把新的内容打印在同一行中。</li></ul><p>作为初学者，或许会对<code>main</code>方法的参数<code>String[] args</code>感到疑惑，这里做出解释：</p><blockquote><p>当我们运行Java程序时，可以在命令行（或终端）后面附加参数，这些参数会被传递给<code>main</code>方法，如<code>java HelloWorld arg1 arg2 arg3</code>，这里的<code>agr1 arg2 arg3</code>会作为字符串数组<code>String[]</code>传进<code>main</code>方法。Java规范要求<code>main</code>方法的签名必须如此，作为程序的统一入口点。即使我们不使用它，也需要声明，否则JVM无法识别<code>main</code>方法。</p></blockquote><h2 id="如何运行这个程序"><a class="markdownIt-Anchor" href="#如何运行这个程序"></a> 如何运行这个程序？</h2><p>或许有同学会觉得“这不是明摆着吗，点一下VS Code或者IDEA右上角的按钮就可以了啊，有啥好说的”，但实际上&quot;点一下按钮&quot;的背后，是IDE自动为我们执行了一些编译和启动的命令。为了让我们更好地理解Java程序编译运行的过程，深化对上面JDK与JVM的理解，探讨一下如何通过这些命令的方式来运行是很有必要的。</p><p>Java源码本质上是一个文本文件，我们需要先用 <code>javac</code> 把 <code>HelloWorld.java</code> 编译成字节码文件 <code>HelloWorld.class</code> ，然后，用 <code>java</code> 命令执行这个字节码文件：</p><p>首先进入源代码所在的目录，执行这一个命令将Java程序编译成字节码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">javac HelloWorld.java<br></code></pre></td></tr></table></figure><p>可以看到源代码所在的目录下出现了一个同名文件<code>HelloWorld.class</code>，这就是编译之后的字节码文件。执行这一句命令来通过JVM运行字节码程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java HelloWorld<br></code></pre></td></tr></table></figure><p>注意：给虚拟机传递的参数 <code>HelloWorld</code> 是我们定义的类名而不是文件名（不需要.class的后缀），虚拟机自动查找对应的class文件并执行。</p><h1 id="三-注释"><a class="markdownIt-Anchor" href="#三-注释"></a> 三、注释</h1><p>与C/C++类似，Java中的注释也有这两种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单行注释</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="四-基本数据类型"><a class="markdownIt-Anchor" href="#四-基本数据类型"></a> 四、基本数据类型</h1><p>Java是一种<strong>强类型语言</strong>，即必须为每一个变量声明一个类型。在Java中，一共有8种数据类型（4整型+2浮点型+1字符型+1布尔型）。</p><h2 id="1整型"><a class="markdownIt-Anchor" href="#1整型"></a> 1.整型</h2><p>表示没有小数的数字，可以为负。</p><table><thead><tr><th>类型</th><th>大小</th><th>取值范围</th></tr></thead><tbody><tr><td>int</td><td>4 bit</td><td>-2 147 483 648 ~ 2 147 483 647</td></tr><tr><td>short</td><td>2 bit</td><td>-32 768 ~ 32 767</td></tr><tr><td>long</td><td>8 bit</td><td>-9 223 372 036 854 775 808 ~ 9 223 372 036 854 775 807</td></tr><tr><td>byte</td><td>1 bit</td><td>-128 ~ 127</td></tr></tbody></table><p>在Java中，整型的取值范围与运行平台无关，这使得Java有较好的可移植性；一定程度上避免了C/C++在不同的机器上可能存在的溢出问题。</p><p>长整型的数据末尾有一个L或者l，十六进制前面有0x或0x，八进制的前缀是0（如8 -&gt; 010），这种写法容易混淆所以使用得比较少。二进制数的前缀是0b或0B。数字很大时，可以加上下划线使其更易读，如2_147_483_647。</p><h2 id="2浮点型"><a class="markdownIt-Anchor" href="#2浮点型"></a> 2.浮点型</h2><p>表示有小数部分的数值，与C/C++类似有两种类型：</p><table><thead><tr><th>类型</th><th>大小</th><th>取值范围</th></tr></thead><tbody><tr><td>long</td><td>4 bit</td><td>约 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo><mn>3.40282347</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>38</mn></msup></mrow><annotation encoding="application/x-tex">\pm3.402 823 47\times10^{38}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">±</span><span class="mord">3</span><span class="mord">.</span><span class="mord">4</span><span class="mord">0</span><span class="mord">2</span><span class="mord">8</span><span class="mord">2</span><span class="mord">3</span><span class="mord">4</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span>（6~7位有效数字）</td></tr><tr><td>double</td><td>8 bit</td><td>约 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo><mn>1.79769313486231570</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>308</mn></msup></mrow><annotation encoding="application/x-tex">\pm1.79769313486231570\times10^{308}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">±</span><span class="mord">1</span><span class="mord">.</span><span class="mord">7</span><span class="mord">9</span><span class="mord">7</span><span class="mord">6</span><span class="mord">9</span><span class="mord">3</span><span class="mord">1</span><span class="mord">3</span><span class="mord">4</span><span class="mord">8</span><span class="mord">6</span><span class="mord">2</span><span class="mord">3</span><span class="mord">1</span><span class="mord">5</span><span class="mord">7</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span>（15位有效数字）</td></tr></tbody></table><p>double表示的数值精度是float的两倍，因此也有“双精度浮点数”的说法。大多数情况下，都会使用double类型存储浮点数。在一个数后面加上d、D或者f、F，可以分别标识为单精度或双精度。</p><p>在浮点数中，有三个特殊数值表示溢出或错误：</p><ul><li>POSITIVE_INFINITY：正无穷大</li><li>NEGATIVE_INFINITY：负无穷大</li><li>NaN：非数字</li></ul><p>例如，一个非零数除以零会得到无穷大的结果，而0除以0或者负数开偶次方根会得到NaN。需要注意的是，NaN不等于任何值，包括它自己，因此无法通过与NaN比较来判断结果不为NaN，而是应该使用<code>Double.isNaN(x)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 打印3 / 0的结果</span><br>        System.out.println(<span class="hljs-number">3</span> / <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 输出Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero</span><br><br>        <span class="hljs-comment">// 打印3.5 / 0的结果</span><br>        System.out.println(<span class="hljs-number">3.5</span> / <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 输出Infinity</span><br><br>        <span class="hljs-comment">// 打印-3.5 / 0的结果</span><br>        System.out.println(-<span class="hljs-number">3.5</span> / <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 输出-Infinity</span><br><br>        <span class="hljs-comment">// 运算 -2 的平方根</span><br>        System.out.println(Math.sqrt(-<span class="hljs-number">2</span>));<br>        <span class="hljs-comment">// 输出NaN</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3字符型"><a class="markdownIt-Anchor" href="#3字符型"></a> 3.字符型</h2><p>字符型（char类型）原本用于表示单个字符，但现在有些Unicode字符需要两个char值表示。char类型使用单引号<code>'</code>表示，如<code>char c = 'A';</code>。char类型的值可以表示为十六进制值，取值范围是<code>\u0000 ~ \uFFFF</code>。</p><p>除了<code>\u</code>这样的转义，还有一些常用的转义符号：</p><table><thead><tr><th>转义符号</th><th>名称</th><th>转义符号</th><th>名称</th></tr></thead><tbody><tr><td>\b</td><td>退格</td><td>\f</td><td>换页</td></tr><tr><td>\t</td><td>制表符</td><td>\&quot;</td><td>双引号</td></tr><tr><td>\n</td><td>换行</td><td>\\</td><td>反斜线</td></tr><tr><td>\r</td><td>回车</td><td>\s</td><td>空格</td></tr></tbody></table><p>注意这里的<code>\u</code>可能会与注释产生冲突，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// C:\users</span><br><span class="hljs-comment">// \u00A 是换行的转义表示</span><br></code></pre></td></tr></table></figure><p>上面两个注释在Java中都会报错，分别是因为<code>\u</code>后面没有接十六进制，不是可识别的转义表示；<code>\u00A</code>被直接解析成换行，导致后续内容识别成位定义的代码语句。想要解决这个问题其实也很简单，使用<code>/*  */</code>这样的注释就可以了。</p><blockquote><p>UTF-16编码采用不同长度的代码表示所有Unicode码点（code point，指某个字符对应的代码值）。在基本多语言平面中，每个字符用16位表示，通常称为<strong>代码单元（codeunit）</strong>；而辅助字符编码为一对连续的代码单元。采用这种编码对表示的每个值都属于基本多语言平面中未用的2048个值范围，通常称为<strong>替代区域（surrogatearea）</strong>（U+D800～U+DBFF用于第一个代码单元，U+DC00～U+DFFF用于第二个代码单元）。这样设计十分巧妙，因为我们可以很快知道一个代码单元是一个字符的编码，还是一个辅助字符的第一或第二部分。例如，𝕆是八元数集的数学符号，码点为U+1D546，编码为两个代码单元U+D835和U+DD46。（关于编码算法的具体描述见 <a href="https://tools.ietf.org/html/rfc27810">https://tools.ietf.org/html/rfc27810</a> ）。<br />在Java中，char类型描述了采用UTF-16编码的一个代码单元。强烈建议不要在程序中使用char类型，除非确实需要处理UTF-16代码单元。最好将字符串作为抽象数据类型来处理。<br />——《Java核心技术（原书第12版，机械工业出版社）》P32</p></blockquote><h2 id="4布尔类型"><a class="markdownIt-Anchor" href="#4布尔类型"></a> 4.布尔类型</h2><p>布尔类型（boolean）有两个值：<code>false</code>和<code>true</code>，用于逻辑判断。整型值与布尔值之间不能转换。</p><blockquote><p>因此在C/C++中常用的<code>while(n--)</code>在Java中就行不通了，因为Java中的<code>n--</code>作为整型数据无法转换成布尔值。不过也有好处，至少避免了不小心写出<code>if (n = 0)</code>而使得这段代码永远为<code>false</code>的情况了（我本人经常不小心写错…）</p></blockquote><h2 id="5枚举类型"><a class="markdownIt-Anchor" href="#5枚举类型"></a> 5.枚举类型</h2><p>在编写程序时，我们通常需要给一些成组的数据编号，如一周的七天编号为1<sub>7、方向的上下左右编号为1</sub>4、尺寸的小中大号编号为1~3等。这样做有两个缺点：</p><ul><li>对不熟悉程序的人来说，看到突然出现的编号（magic number,魔法数字）会造成困扰，如<code>if (direction == 3)</code>，这样意义不明的表达会降低代码的可读性，在协作开发时造成一些麻烦。</li><li>有时编号可能会由于一些错误原因超出范围，使得程序出现意料之外的情况，难以进行管理和限制。</li></ul><p>为了解决这些麻烦，人们提出了 <strong>枚举(enum)</strong> 这样的概念，通过给予一组编号有意义的名称来进行管理，有效缓解了代码可读性与范围限制的问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">size</span> &#123; small, medium, large, extra_large&#125;;<br><br><span class="hljs-type">size</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> size.medium;<br></code></pre></td></tr></table></figure><p>size类型的变量s只能存储上面声明的一些枚举值，或者是<code>null</code>，表示这个变量没有设置任何值。</p><h1 id="五-整型与常量"><a class="markdownIt-Anchor" href="#五-整型与常量"></a> 五、整型与常量</h1><h2 id="1声明变量"><a class="markdownIt-Anchor" href="#1声明变量"></a> 1.声明变量</h2><p>变量的声明通常需要先指定类型，然后是这个变量的名称。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a;<br><span class="hljs-type">double</span> money;<br><span class="hljs-type">boolean</span> is_done;<br></code></pre></td></tr></table></figure><h2 id="2-变量的赋值"><a class="markdownIt-Anchor" href="#2-变量的赋值"></a> 2. 变量的赋值</h2><p>可以在变量声明后为其赋值，也可以在声明的同时直接赋予初始值，这一点与大多数编程语言相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a;<br>a = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>从Java 10开始，局部变量可以使用<code>var</code>声明，这样编译器能够通过初始值自动判断变量的类型，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><span class="hljs-type">var</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Xiao Ming&quot;</span>;<br></code></pre></td></tr></table></figure><p>赋值语句也是一个表达式，其值等于被赋予的数值，如<code>int a = 3</code>这个表达式的值为3。</p><h2 id="3常量"><a class="markdownIt-Anchor" href="#3常量"></a> 3.常量</h2><p>在Java中，使用<code>final</code>来声明一个常量。尽管<code>const</code>作为Java的保留字（目前没有使用为关键字，但保留以后使用的可能性），但是目前仍然只能使用<code>final</code>来定义常量。常量只能被赋值一次，后面无法进行修改。通常对常量采取全大写的命名方式。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">final</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415926</span>;<br></code></pre></td></tr></table></figure><p>如果想定义一个常量以在同一个类的多个方法中使用，可以使用关键字<code>static final</code>将其设置为一个类常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstDemo</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">CM_PER_INCH</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.54</span>;   <span class="hljs-comment">// 英寸 - 厘米 换算关系</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">inchs</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.25</span>;<br>        System.out.println(inchs + <span class="hljs-string">&quot;英寸等于&quot;</span> + inchs * CM_PER_INCH + <span class="hljs-string">&quot;厘米&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 输出：3.25英寸等于8.255厘米</span><br></code></pre></td></tr></table></figure><p>类常量的定义通常位于main方法的外部。当其被声明为public时，其他类也可以访问到这个常量。</p><h1 id="六-算数逻辑运算"><a class="markdownIt-Anchor" href="#六-算数逻辑运算"></a> 六、算数逻辑运算</h1><h2 id="1算术运算符"><a class="markdownIt-Anchor" href="#1算术运算符"></a> 1.算术运算符</h2><p>与很多编程语言相同，Java也使用<code>+ - * /</code>来完成四则运算，其中两个整数相除会进行整除操作，得到的是结果的整数部分；有浮点数参与除法运算时，得到的是完整的商值。整数的求余（也称为取模）运算使用<code>%</code>。</p><p>需要注意的是，前面提到Java中整数被0除会产生一个除零异常；浮点数被0除会得到无穷大或者NaN的结果。</p><h2 id="2-math类"><a class="markdownIt-Anchor" href="#2-math类"></a> 2. Math类</h2><p>我们经常需要进行一些数学运算，如求幂、计算三角函数、使用圆周率pi、自然对数e等。Math类很好地完成了这些工作，我们只需调用相关的属性或方法即可：</p><table><thead><tr><th>属性/方法</th><th>描述</th></tr></thead><tbody><tr><td>Math.sqrt(x)</td><td>求x的平方根</td></tr><tr><td>Math.pow(x, a)</td><td>求x的a次幂</td></tr><tr><td>Math.sin(x)</td><td>计算 <code>x</code>（弧度）的正弦值（sine），返回值范围 <code>[-1, 1]</code>。</td></tr><tr><td>Math.cos(x)</td><td>计算 <code>x</code>（弧度）的余弦值（cosine），返回值范围 <code>[-1, 1]</code>。</td></tr><tr><td>Math.tan(x)</td><td>计算 <code>x</code>（弧度）的正切值（tangent），返回值范围是全体实数。</td></tr><tr><td>Math.atan(x)</td><td>计算 <code>x</code> 的反正切值（arctangent），返回弧度值，范围 <code>[-π/2, π/2]</code>。</td></tr><tr><td>Math.atan2(y, x)</td><td>计算 <code>y/x</code> 的反正切值（arctangent），返回弧度值，范围 <code>[-π, π]</code> ，能正确处理象限问题。</td></tr><tr><td>Math.toRadians(d)</td><td>将角度制的<code>d</code>转换成弧度制</td></tr><tr><td>Math.exp(x)</td><td>计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">e^{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></span>，当 <code>x</code> 很大或很小时会返回 <code>Infinity</code> 或 <code>-Infinity</code></td></tr><tr><td>Math.log(x)</td><td>计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ln(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>，当 <code>x &lt;= 0</code> 时会返回 <code>NaN</code></td></tr><tr><td>Math.log10(x)</td><td>计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>10</mn></msub><mi>x</mi></mrow><annotation encoding="application/x-tex">log_{10}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span></span></span></span>，当 <code>x &lt;= 0</code> 时会返回 <code>NaN</code></td></tr><tr><td>Math.PI</td><td>接近圆周率π的常量，值约为3.1415926</td></tr><tr><td>Math.E</td><td>接近自然常数e的常量，值约为2.71828</td></tr></tbody></table><p>如果在一段程序中需要大量使用Math类的属性或方法，可以在程序的头部添加引入Math类的声明即可，需要使用时直接写对应的属性或方法即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Math.*;<br><br><span class="hljs-keyword">final</span> π = PI;<br>System.out.println(<span class="hljs-string">&quot;sin(20)的值为：&quot;</span> + sin(<span class="hljs-number">20</span>));<br></code></pre></td></tr></table></figure><p>另外，Math类中的floorMod方法保证了余数不为负，这在一些进位处理中有很大的帮助，例如我们处理一个分钟的迭加逻辑时，会采用 <code>int currentMin = (oldMin + addMin) % 60;</code> 这样的写法，但是当 <code>addMin</code> 为负时，<code>currentMin</code> 也可能会减少到负值，需要额外的逻辑来规范处理，但是Java中可以这样解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">currentMin</span> <span class="hljs-operator">=</span> floorMod(oldMin + addMin, <span class="hljs-number">60</span>);<br></code></pre></td></tr></table></figure><p>这样就会保证 <code>currentMin</code> 的值始终在<code>0 ~ 59</code> 之间。</p><h2 id="3数据类型转换"><a class="markdownIt-Anchor" href="#3数据类型转换"></a> 3.数据类型转换</h2><p><img src="20250818125310312.png#sc" alt="" /></p><p>上图示意了Java中的数据类型转换关系，其中实线箭头表示转换时无精度损失；虚线箭头则表示可能会发生精度损失。与大多数编程语言相同，将两个不同类型的数据用于算术运算时，Java会自动转换成较大数据类型，如 <code>int + double -&gt; double</code>、<code>int + long -&gt; long</code>。</p><p>需要手动转换数据类型时，可以使用<strong>强制类型转换（cast）</strong>。例如 <code>int a =  (int) 3.76</code> 。需要注意以下两点：</p><ul><li>当前数值超过目标类型的表示范围时会发生截断，即会得到一个不同的数值。例如 <code>(byte) 300 == 44</code>。</li><li>不要试图直接将布尔类型的值转换成数值，应该使用三元表达式 <code>b ? 1 : 0</code> 进行转换。</li></ul><p>Java支持二元运算符，可以使用<code>+=</code>、<code>-=</code>这样的符号。如果运算符右侧的数值与左值的类型不同，会发生强制类型转换，即如果对<code>int</code>类型的<code>x</code>执行<code>x+=3.5</code>的操作，得到的结果是<code>(int) x + 3.5</code>，即结果为3。</p><h2 id="4自增与自减运算符"><a class="markdownIt-Anchor" href="#4自增与自减运算符"></a> 4.自增与自减运算符</h2><p>与C/C++类似，Java支持 <code>++</code> 和 <code>--</code> 这两个自增/减运算符，并且同样可以前置和后置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a++;  <span class="hljs-comment">// 先取值再++，此时 b == a == 3, a == 4;</span><br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ++a;  <span class="hljs-comment">// 先++再取值，此时 c == a+1 ==  5, a == 5;</span><br></code></pre></td></tr></table></figure><h2 id="5逻辑运算符"><a class="markdownIt-Anchor" href="#5逻辑运算符"></a> 5.逻辑运算符</h2><p>Java采用了C++的做法，使用 <code>==</code> 判断两边是否相等；分别使用 <code>&amp;&amp;</code> 、 <code>||</code> 、 <code>！</code> 表示逻辑与、逻辑或和逻辑非，<code>!=</code> 表示不等于，<code>&gt;</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;=</code>这样司空见惯的比较符号更是无需多言了。</p><p>需要注意的是，Java中同样存在<strong>逻辑短路</strong>的机制，即不会计算逻辑与在一端为 <code>false</code> 情况下、逻辑或在一端为 <code>true</code> 情况下，多余的表达式结果。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (x!=<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">1</span> / x &gt; x + y) &#123;<br><span class="hljs-comment">// 省略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个判断中，如果 <code>x</code> 为0时，逻辑与运算的左边为0，无论右边是否为真都不会使得整个表达式为真，所以不会计算右边的表达式，也正好就避免了发生除零异常。</p><h2 id="6位运算符"><a class="markdownIt-Anchor" href="#6位运算符"></a> 6.位运算符</h2><p>指定两个整数进行位运算时，实现的是两个数字的<strong>按位运算</strong>（先转换成二进制表达，然后从低位开始逐位运算）。类似地，Java也是用下面几个符号来定义按位运算：</p><ul><li>&amp;：按位与（and）</li><li>|：按位或（or）</li><li>^：按位异或（xor）</li><li>~：按位非（not）</li><li>&lt;&lt;：左移操作</li><li><blockquote><blockquote><p>：右移操作，高位以符号位补充，又称算数移位</p></blockquote></blockquote></li><li><blockquote><blockquote><blockquote><p>：右移操作，高位以0补充，又称逻辑移位</p></blockquote></blockquote></blockquote></li></ul><h2 id="7条件运算符三元表达式"><a class="markdownIt-Anchor" href="#7条件运算符三元表达式"></a> 7.条件运算符（三元表达式）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">条件 ? 条件为真的操作 : 条件为假的操作;<br></code></pre></td></tr></table></figure><p>（有人用<code>x == y ? x : y</code>描述自己作为<code>x</code>的&quot;家庭地位&quot;，感觉挺有意思的，大家可以仔细揣摩一下…）</p><h2 id="8运算符优先级"><a class="markdownIt-Anchor" href="#8运算符优先级"></a> 8.运算符优先级</h2><p>一般情况下，为了避免出现优先级问题，在复杂逻辑中添加括号明确定义运算顺序即可，不过要注意以下几点：</p><ul><li>括号的优先级是最高的，会最先处理最内层括号的内容</li><li><code>+=</code>系列的优先级是<strong>从右向左</strong>，即<code>a += b += c</code>的处理顺序是<code>a += (b += c)</code>，先处理<code>b += c</code>,即 <code>b = b + c</code>,然后把现在 <code>b</code> 完成加法操作之后的值加到 <code>a</code> 上。除此之外，<code>+=</code> 这个系列的符号也是<strong>从右往左</strong>处理的。</li><li><code>&amp;&amp;</code>的优先级高于 <code>||</code>。</li></ul><hr /><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>廖雪峰的官方网站.Java教程[EB/OL].(2025-06-07)[2025-08-20]. <a href="https://www.cnblogs.com/echolun/p/12709761.html">https://www.cnblogs.com/echolun/p/12709761.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序开发（七）：事件与冒泡</title>
    <link href="/2025/08/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%86%92%E6%B3%A1/"/>
    <url>/2025/08/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%86%92%E6%B3%A1/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>本篇笔记部分内容整理自网络中的一些文章及视频，详见文末的“参考资料”部分。存在部分AI生成的内容，请仔细甄别可能存在的错误。</p></blockquote><hr /><hr /><h1 id="一-初识小程序事件"><a class="markdownIt-Anchor" href="#一-初识小程序事件"></a> 一、初识小程序事件</h1><p>在小程序中，<strong>事件是视图层到逻辑层的通讯方式</strong>。</p><p>往往是由视图层触发某个动作，以某种联系方式关联到逻辑层的一个方法上面，逻辑层进行对应的处理并将结果反馈到视图层。这其中的“动作”就是所谓的事件。点击按钮、滑动页面，包括不是由用户出发的操作如视频播放结束、到达某个时间点等等，都可以看做是一个个的事件，综合来说，小程序中的事件由<strong>用户行为反馈事件</strong>和<strong>组件状态反馈事件</strong>两部分组成。</p><h2 id="最简单的点击事件"><a class="markdownIt-Anchor" href="#最简单的点击事件"></a> 最简单的点击事件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;alert&quot;</span>&gt;</span>bindtap<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 这里写成bind:tap也可以  --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;&#125;,<br>  <br>  <span class="hljs-attr">alert</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>    wx.<span class="hljs-title function_">showToast</span>(&#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;触发成功&#x27;</span>, <span class="hljs-comment">// 标题</span><br>      <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-comment">// 图标类型，默认success</span><br>      <span class="hljs-attr">duration</span>: <span class="hljs-number">1500</span> <span class="hljs-comment">// 提示窗停留时间，默认1500ms</span><br>    &#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>这段代码调用了<code>wx.showToast</code>的提示接口，点击按钮后会弹出一个toast提示，效果如下图：</p><p><img src="20250816120545021.png#sc" alt="" /></p><h1 id="二-常见事件类型"><a class="markdownIt-Anchor" href="#二-常见事件类型"></a> 二、常见事件类型</h1><table><thead><tr><th>事件类型</th><th>触发条件</th></tr></thead><tbody><tr><td>touchstart</td><td>手指触摸动作开始触发</td></tr><tr><td>touchmove</td><td>手指触摸后移动触发</td></tr><tr><td>touchcancel</td><td>手指触摸动作被打断，如来电提醒，弹窗</td></tr><tr><td>touchend</td><td>手指触摸动作结束</td></tr><tr><td>tap</td><td>手指触摸后马上离开</td></tr><tr><td>longpress</td><td>手指触摸后，超过350ms再离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发（与tap同时定义，优先级更高）</td></tr><tr><td>longtap</td><td>手指触摸后，超过350ms再离开（推荐使用longpress事件代替）</td></tr><tr><td>transitionend</td><td>在 WXSS transition 或 wx.createAnimation 动画结束后触发</td></tr><tr><td>animationstart</td><td>在 WXSS animation 动画开始时触发</td></tr><tr><td>animationiteration</td><td>在 WXSS animation 一次迭代结束时触发</td></tr><tr><td>animationend</td><td>在 WXSS animation 动画完成时触发</td></tr></tbody></table><h1 id="三-常用事件对象"><a class="markdownIt-Anchor" href="#三-常用事件对象"></a> 三、常用事件对象</h1><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>String</td><td>当前绑定的事件类型</td></tr><tr><td>timeStamp</td><td>Integer</td><td>页面打开到触发事件所经过的毫秒数</td></tr><tr><td>target</td><td>Object</td><td>触发事件的组件的一些属性值集合</td></tr><tr><td>currentTarget</td><td>Object</td><td>当前组件的一些属性值集合</td></tr><tr><td>detail</td><td>Object</td><td>额外的信息</td></tr><tr><td>touches</td><td>Array</td><td>触摸事件，当前停留在屏幕中的触摸点信息的数组</td></tr><tr><td>changedTouches</td><td>Array</td><td>触摸事件，当前变化的触摸点信息的数组</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;alert&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">data-name</span>=<span class="hljs-string">&quot;听风是风&quot;</span> <span class="hljs-attr">data-age</span>=<span class="hljs-string">&quot;27&quot;</span>&gt;</span>bindtap<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;&#125;,<br>  <span class="hljs-attr">alert</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>这样可以在点击事件触发后，在控制台看到这个事件的所有信息。</p><h1 id="四-hover-class-与-hover-style"><a class="markdownIt-Anchor" href="#四-hover-class-与-hover-style"></a> 四、hover-class 与 hover-style</h1><p>虽然手指头没有鼠标一样“悬浮”的概念，无法在小程序中使用<code>hover</code>伪类，但是我们可以使用<code>hover-class</code>和<code>hover-style</code>定义用户按住元素时的样式；例如大多数按钮被点击瞬间的灰色效果，就可以使用这个属性来实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">hover-class</span>=<span class="hljs-string">&quot;onBtnPressed&quot;</span>&gt;</span>点击我<span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.onBtnPressed</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: grey;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: solid <span class="hljs-number">2px</span> grey;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="五-事件冒泡与事件捕获"><a class="markdownIt-Anchor" href="#五-事件冒泡与事件捕获"></a> 五、事件冒泡与事件捕获</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>    父元素<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span><br>        子元素<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.parent</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#bbded6</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.child</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">80</span>,<span class="hljs-number">47</span>,<span class="hljs-number">1</span>);</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> parent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.parent&quot;</span>),<br>child = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.child&quot;</span>);<br><br><span class="hljs-comment">// 1. 父元素捕获阶段触发（第三个参数 true）</span><br>parent.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>&#125;, <span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 2. 父元素冒泡阶段触发（第三个参数 false 或省略）</span><br>parent.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;B&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 3. 子元素捕获阶段触发（第三个参数 true）</span><br>child.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;D&quot;</span>);<br>&#125;, <span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 4. 子元素冒泡阶段触发（第三个参数 false 或省略）</span><br>child.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;C&quot;</span>);<br>&#125;, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><h3 id="关于addeventlistener"><a class="markdownIt-Anchor" href="#关于addeventlistener"></a> 关于addEventListener</h3><p><code>addEventListener</code>事件监听参数以及含义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.<span class="hljs-title function_">addEventListener</span>(event,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 事件处理程序</span><br>&#125;,useCapture)；<br></code></pre></td></tr></table></figure><p>其中<code>event</code>与<code>function</code>为必填，<code>event</code>表示事件类型，<code>function</code>为事件处理函数，而<code>useCapture</code>为选填，它的值为<code>Boolean</code>值。用于指定事件是否在捕获或者冒泡阶段执行，默认为<code>false</code>，即在冒泡阶段执行，反之在捕获阶段执行。</p><h3 id="事件流顺序"><a class="markdownIt-Anchor" href="#事件流顺序"></a> 事件流顺序</h3><p><img src="20250707093202219.png#sc" alt="" /></p><ol><li><strong>捕获阶段（Capturing Phase）</strong>（从外向内）：<ul><li>检查<code>parent</code>是否有<strong>捕获阶段</strong>监听器（<code>useCapture: true</code>），执行<code>A</code>。</li><li>检查<code>child</code>是否有<strong>捕获阶段</strong>监听器，执行<code>D</code>。</li></ul></li><li><strong>目标阶段（Target Phase）</strong>：<ul><li>执行<code>child</code>本身的监听器（<code>D</code>和<code>C</code>）。</li></ul></li><li><strong>冒泡阶段（Bubbling Phase）</strong>（从内向外）：<ul><li>检查 <code>child</code> 是否有<strong>冒泡阶段</strong>监听器（<code>useCapture: false</code>），执行 <code>C</code>。</li><li>检查 <code>parent</code> 是否有<strong>冒泡阶段</strong>监听器，执行 <code>B</code>。</li></ul></li></ol><h3 id="最终输出顺序"><a class="markdownIt-Anchor" href="#最终输出顺序"></a> 最终输出顺序</h3><p>点击子元素，控制台输出顺序为：A → D → C → B</p><h2 id="小程序中的事件冒泡与事件捕获"><a class="markdownIt-Anchor" href="#小程序中的事件冒泡与事件捕获"></a> 小程序中的事件冒泡与事件捕获</h2><p>在微信小程序中,事件同样存在捕获与冒泡阶段。比如我们前面所说的<code>bind</code>前缀就表示事件在冒泡阶段执行，在<code>bind</code>前面加上<code>capture</code>，即<code>capture-bind</code>就表示捕获阶段执行。</p><p>如果我们分别给父子绑定bind事件，点子区域，会先执行子的<code>bind</code>再执行父的<code>bind</code>，毕竟我们没使用<code>capture</code>定义捕获阶段，所以全程就只有冒泡。需要记住的，<strong>bind不会阻止冒泡，添加capture前缀可以响应捕获阶段。</strong></p><p>某些情况下，我们需要阻止一个事件的冒泡，例如点击弹窗外部的遮罩层会关闭弹窗，但是点击弹窗内部的事件也会冒泡倒外部的遮罩层，使得弹窗被关闭。这时应该在弹窗上阻止点击事件的向外冒泡。将<code>bind</code>替换为<code>catch</code>事件可以阻止冒泡，见下例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;parent&quot;</span> <span class="hljs-attr">catch:tap</span>=<span class="hljs-string">&quot;tap1&quot;</span> &gt;</span><br>父元素<br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child&quot;</span> <span class="hljs-attr">catch:tap</span>=<span class="hljs-string">&quot;tap3&quot;</span> &gt;</span><br> 子元素<br> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>点击<code>子元素</code>，可以发现只输出了<code>tap3</code>，成功阻止了点击事件向上冒泡触发父元素的<code>tap</code>事件。再看下面的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;parent&quot;</span> <span class="hljs-attr">bind:tap</span>=<span class="hljs-string">&quot;tap1&quot;</span> <span class="hljs-attr">capture-catch:tap</span>=<span class="hljs-string">&quot;tap2&quot;</span>&gt;</span><br>父元素<br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child&quot;</span> <span class="hljs-attr">bind:tap</span>=<span class="hljs-string">&quot;tap3&quot;</span> <span class="hljs-attr">capture-catch:tap</span>=<span class="hljs-string">&quot;tap4&quot;</span>&gt;</span><br>子元素<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用<code>capture-catch</code>中断事件的捕获阶段和取消冒泡事件；这时无论点击父元素还是子元素都只会输出<code>tap2</code>。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ul><li><code>bind</code>不会阻止冒泡，但如果想抓捕获阶段，可以添加前缀<code>capture</code>，也就是<code>capture-bind</code>。</li><li><code>catch</code>会阻止冒泡，如果添加<code>capture</code>前缀，捕获阶段会中断的同时，也会阻止冒泡。</li></ul><hr /><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>听风是风.从零开始的微信小程序入门教程(四)[EB/OL].(2020-05-02)[2025-08-16]. <a href="https://www.cnblogs.com/echolun/p/12817733.html">https://www.cnblogs.com/echolun/p/12817733.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微信小程序开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序开发（六）：数据绑定</title>
    <link href="/2025/08/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <url>/2025/08/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>本篇笔记部分内容整理自网络中的一些文章及视频，详见文末的“参考资料”部分。存在部分AI生成的内容，请仔细甄别可能存在的错误。</p></blockquote><hr /><hr /><h1 id="一-引入"><a class="markdownIt-Anchor" href="#一-引入"></a> 一、引入</h1><p>在Web开发时，往往有一些动态的数据需要随着程序的运行而变化，比如说倒计时、滑动条等；在使用JavaScript时，我们需要通过DOM来对元素的属性进行读写，这样比较麻烦而且会存在同步的问题，管理起来不是很方便。但现在，我们可以方便地通过<strong>数据绑定</strong>实现数据的实时更新与同步，免去了数据变化时需要手动同步的麻烦。下面是一个例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;addTimes&quot;</span>&gt;</span>点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>你点击了&#123;&#123;times&#125;&#125;次按钮<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">page</span>(&#123;<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">times</span>: <span class="hljs-number">0</span>,<br>&#125;<br><br><span class="hljs-title function_">addTimes</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">const</span> new_time = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">time</span> ++;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(<br>&#123;<span class="hljs-attr">thimes</span>: new_time&#125;<br>);<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>通过直接将<code>&lt;text&gt;</code>中的点击次数绑定到ts的变量<code>times</code>中，绑定点击按钮的事件到<code>addTimes</code>方法,简单快捷地实现了点击按钮增加次数的功能，并且无需手动将新数据同步到HTML中。</p><p>以往先获取再操作DOM的形式使得逻辑层与渲染层之间的耦合度很高，在操作数据时都必须先找到对应的DOM节点再进行操作，还需要让它们与JavaScript中的变量密切关联，这样做比较繁琐。伴随着编程技术的不断发展，angularjs、vue、react等框架的出现，MVVM模式的提出和完善，我们在开发中也实现了逻辑层与渲染的分离，无论是数据管理还是代码可读性都得到了很大的提升。</p><h1 id="二-数据绑定详解"><a class="markdownIt-Anchor" href="#二-数据绑定详解"></a> 二、数据绑定详解</h1><h2 id="1简单的数据绑定"><a class="markdownIt-Anchor" href="#1简单的数据绑定"></a> 1.简单的数据绑定</h2><p>如上例，在WXML中用<code>&#123;&#123;&#125;&#125;</code>表达式来绑定JavaScript文件中定义的变量，通过绑定点击事件<code>bindtap=&quot;addTimes&quot;</code>实现了点击按钮修改变量的功能，同时新的变量会同步到WXML中，无需手动更新<code>&lt;text&gt;</code>的内容。</p><h2 id="2绑定节点属性"><a class="markdownIt-Anchor" href="#2绑定节点属性"></a> 2.绑定节点属性</h2><p>除了可以绑定WXML的节点内容以外，数据绑定还可以实现节点的class、style等属性的绑定。如下例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&#123;&#123; textClass &#125;&#125;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#fff; background:&#123;&#123; bgc &#125;&#125;; display:block&quot;</span>&gt;</span>&#123;&#123; myName &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;setName&quot;</span>&gt;</span>点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.text-box</span> &#123;<br><span class="hljs-attribute">border</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.text-box-new</span>&#123;<br><span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> red;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">getApp</span>()<br><br><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;1+1 = ？&#x27;</span>,<br>    <span class="hljs-attr">textClass</span>: <span class="hljs-string">&#x27;text-box&#x27;</span>,<br>    <span class="hljs-attr">bgc</span>: blue<br>  &#125;,<br>  <span class="hljs-title function_">setName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;1+1 = 2&quot;</span>,<br>      <span class="hljs-attr">textClass</span>:<span class="hljs-string">&#x27;text-box-new&#x27;</span>,<br>      <span class="hljs-attr">bgc</span>:<span class="hljs-string">&#x27;#bbded6&#x27;</span><br>    &#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>点击按钮时，文本的内容、背景颜色、边框均会发生变化，其中的背景颜色和边框就是通过绑定属性实现的。需要注意的是，绑定属性时也需要将<code>&#123;&#123;&#125;&#125;</code>放在双引号中。</p><h3 id="3基本逻辑语法"><a class="markdownIt-Anchor" href="#3基本逻辑语法"></a> 3.基本逻辑语法</h3><p><code>&#123;&#123;&#125;&#125;</code>中除了直接写入变量，还可以执行一些简单的算术逻辑运算，比如<code>&#123;&#123; num1 + num2 &#125;&#125;</code>、<code>&#123;&#123; "姓名：" + name &#125;&#125;</code>、<code>&#123;&#123; userName ? userName:'未登录' &#125;&#125;</code>，其中三元表达式在实现根据条件选择显示的内容或使用的样式时非常简洁高效，是常用的代码策略。</p><h2 id="4条件逻辑"><a class="markdownIt-Anchor" href="#4条件逻辑"></a> 4.条件逻辑</h2><p>控制模板是否显示方面，在vue中有<code>v-if</code>，在angular中有<code>ng-if</code>，而在小程序中我们可以使用<code>wx:if</code>来达到同样的效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;bool&#125;&#125;&quot;</span>&gt;</span>我叫听风是风<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要注意的是，<code>wx:if</code>与我们以往使用框架中的效果一样，一旦变量为false，整个组件不会加载，甚至不在小程序解析的wxml模板中；这和组件加载但<code>display:none</code>是有区别的。同时，还可以使用<code>wx:elif</code>、<code>wx:else</code>这些来实现多分支判断：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;num &gt; 0&#125;&#125;&quot;</span>&gt;</span> 大于0 <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">wx:elif</span>=<span class="hljs-string">&quot;&#123;&#123;num &lt; 0&#125;&#125;&quot;</span>&gt;</span> 小于0 <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">wx:else</span>&gt;</span> 等于0 <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还可以绑定节点的<code>hidden</code>属性到一个布尔型的变量，该变量为<code>false</code>时元素会加载，但是会附加上<code>display: none;</code>的属性，即会被隐藏起来。</p><p>需要注意的是，关于<code>hidden</code>有个小坑，比如下面这个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">hidden</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br></code></pre></td></tr></table></figure><p>你会发现这个组件并不会显示，而正确的写法是这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">hidden</span>=<span class="hljs-string">&quot;&#123;&#123;false&#125;&#125;&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为了规避这个问题，还是建议需要控制是否显示时，将hidden绑定到变量上显示；否则直接给一个<code>display: block/none;</code>的属性即可。</p><h2 id="5列表渲染"><a class="markdownIt-Anchor" href="#5列表渲染"></a> 5.列表渲染</h2><p>在微信小程序中提供了<code>wx:for</code>来实现将成组的数据绑定到WXML中，如下例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;array&#125;&#125;&quot;</span>&gt;</span><br>&#123;&#123;index&#125;&#125;: &#123;&#123;item&#125;&#125; <br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">array</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>显示效果是这样的,数组的索引作为index，值作为item被绑定到了WXML中，为其中的每个数据都渲染了一个节点元素。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>: <span class="hljs-number">1</span><br><span class="hljs-attribute">1</span>: <span class="hljs-number">2</span><br><span class="hljs-attribute">2</span>: <span class="hljs-number">3</span><br><span class="hljs-attribute">3</span>: <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>对象数组也可以绑定和解析：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;contents&#125;&#125;&quot;</span>&gt;</span><br>  &#123;&#123;item.name&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">contents</span>: [&#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;第一个内容&#x27;</span><br>    &#125;,&#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;第二个内容&#x27;</span><br>    &#125;,&#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;第三个内容&#x27;</span><br>    &#125;]<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><hr /><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>听风是风.从零开始的微信小程序入门教程(三)[EB/OL].(2020-12-30)[2025-08-16]. <a href="https://www.cnblogs.com/echolun/p/12709761.html">https://www.cnblogs.com/echolun/p/12709761.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微信小程序开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序开发（五）：TypeScript函数、泛型与接口</title>
    <link href="/2025/08/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9ATypeScript%E5%87%BD%E6%95%B0%E3%80%81%E6%B3%9B%E5%9E%8B%E4%B8%8E%E6%8E%A5%E5%8F%A3/"/>
    <url>/2025/08/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9ATypeScript%E5%87%BD%E6%95%B0%E3%80%81%E6%B3%9B%E5%9E%8B%E4%B8%8E%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>本篇笔记部分内容整理自网络中的一些文章及视频，详见文末的“参考资料”部分。存在部分AI生成的内容，请仔细甄别可能存在的错误。</p></blockquote><hr /><h1 id="一-函数"><a class="markdownIt-Anchor" href="#一-函数"></a> 一、函数</h1><h2 id="1介绍"><a class="markdownIt-Anchor" href="#1介绍"></a> 1.介绍</h2><blockquote><p>函数是JavaScript应用程序的基础。它帮助你实现抽象层，模拟类，信息隐藏和模块。在TypeScript里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义<strong>行为</strong>的地方。TypeScript为JavaScript函数添加了额外的功能，让我们可以更容易地使用。</p></blockquote><h2 id="2函数声明"><a class="markdownIt-Anchor" href="#2函数声明"></a> 2.函数声明</h2><p>和JavaScript一样，TypeScript函数可以创建有名字的函数和匿名函数。你可以随意选择适合应用程序的方式，不论是定义一系列API函数还是只使用一次的函数。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 有名函数（相对匿名而言，不是说这个函数有多出名…）</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-comment">// 匿名函数</span><br><span class="hljs-keyword">let</span> myAdd = <span class="hljs-keyword">function</span>(<span class="hljs-params">x, y</span>) &#123; <span class="hljs-keyword">return</span> x + y; &#125;;<br></code></pre></td></tr></table></figure><p>在JavaScript里，函数可以使用函数体外部的变量。当函数这么做时，我们说它‘捕获’了这些变量。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> z = <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addToZ</span>(<span class="hljs-params">x, y</span>) &#123;<br><span class="hljs-keyword">return</span> x + y + z;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3函数类型"><a class="markdownIt-Anchor" href="#3函数类型"></a> 3.函数类型</h2><p>函数的类型，通常指返回值的数据类型；当我们指定函数类型后，return的数据类型将自动成为函数的类型。需要注意的是，即使函数没有返回值，也要写明函数类型为void，不可以忽略。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"><span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-keyword">let</span> myAdd = <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123; <span class="hljs-keyword">return</span> x + y; &#125;;<br><br><span class="hljs-comment">// 还可以这样写：</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">myAdd</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">x</span>:<span class="hljs-built_in">number</span>, <span class="hljs-attr">y</span>:<span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> =<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123; <span class="hljs-keyword">return</span> x + y; &#125;;<br></code></pre></td></tr></table></figure><h2 id="4类型推断"><a class="markdownIt-Anchor" href="#4类型推断"></a> 4.类型推断</h2><p>就算仅在等式的一侧带有类型，TypeScript编译器仍可正确识别类型；这种“按上下文归类”，是类型推论的一种。它帮助我们更好地为程序指定类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 这个myAdd函数拥有完整的函数类型</span><br><span class="hljs-keyword">let</span> myAdd = <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123; <span class="hljs-keyword">return</span> x + y; &#125;;<br><br><span class="hljs-comment">// 这里的x和y同样会推断出是number型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">myAdd</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">baseValue</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">increment</span>: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> =<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params">x, y</span>) &#123; <span class="hljs-keyword">return</span> x + y; &#125;;<br></code></pre></td></tr></table></figure><h2 id="5可选参数和默认参数"><a class="markdownIt-Anchor" href="#5可选参数和默认参数"></a> 5.可选参数和默认参数</h2><p>TypeScript里的每个函数参数都是必须的。可以将<code>null</code>或<code>undefined</code>作为参数，但是编译器会检查我们是否为每个参数都传入了值。即实参与形参必须一一对应。在TypeScript里我们可以在参数名旁使用<code>?</code>实现可选参数的功能（有点像C#？）。可选参数必须跟在必须参数后面。即如果想让last name是可选的，那么应当把last name放在后面。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">buildName</span>(<span class="hljs-params"><span class="hljs-attr">firstName</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">lastName</span>?: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (lastName)<br>        <span class="hljs-keyword">return</span> firstName + <span class="hljs-string">&quot; &quot;</span> + lastName;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> firstName;<br>&#125;<br><br><span class="hljs-keyword">let</span> result1 = <span class="hljs-title function_">buildName</span>(<span class="hljs-string">&quot;Bob&quot;</span>);                    <span class="hljs-comment">// √，可以省略后一个参数</span><br><span class="hljs-keyword">let</span> result2 = <span class="hljs-title function_">buildName</span>(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Adams&quot;</span>, <span class="hljs-string">&quot;Sr.&quot;</span>);    <span class="hljs-comment">// ×，参数太多了</span><br><span class="hljs-keyword">let</span> result3 = <span class="hljs-title function_">buildName</span>(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Adams&quot;</span>);           <span class="hljs-comment">// √，正好</span><br></code></pre></td></tr></table></figure><p>在TypeScript里，当用户没有传递这个参数或传递的值是<code>undefined</code>时，我们也可以为参数提供一个默认值。它们叫做有默认初始化值的参数。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">buildName</span>(<span class="hljs-params"><span class="hljs-attr">firstName</span>: <span class="hljs-built_in">string</span>, lastName = <span class="hljs-string">&quot;Smith&quot;</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> firstName + <span class="hljs-string">&quot; &quot;</span> + lastName;<br>&#125;<br><br><span class="hljs-keyword">let</span> result1 = <span class="hljs-title function_">buildName</span>(<span class="hljs-string">&quot;Bob&quot;</span>);                  <span class="hljs-comment">// √</span><br><span class="hljs-keyword">let</span> result2 = <span class="hljs-title function_">buildName</span>(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-literal">undefined</span>);       <span class="hljs-comment">// √</span><br><span class="hljs-keyword">let</span> result3 = <span class="hljs-title function_">buildName</span>(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Adams&quot;</span>, <span class="hljs-string">&quot;Sr.&quot;</span>);  <span class="hljs-comment">// ×，参数太多了</span><br><span class="hljs-keyword">let</span> result4 = <span class="hljs-title function_">buildName</span>(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Adams&quot;</span>);         <span class="hljs-comment">// √，也可以不用默认值</span><br></code></pre></td></tr></table></figure><h2 id="6剩余参数不定量参数"><a class="markdownIt-Anchor" href="#6剩余参数不定量参数"></a> 6.剩余参数（不定量参数）</h2><p>有时难以确定参数的个数，可以使用<code>···</code>接收一系列个数不确定的参数，存储在数组中。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">buildName</span>(<span class="hljs-params"><span class="hljs-attr">firstName</span>: <span class="hljs-built_in">string</span>, ...<span class="hljs-attr">restOfName</span>: <span class="hljs-built_in">string</span>[]</span>) &#123;<br>  <span class="hljs-keyword">return</span> firstName + <span class="hljs-string">&quot; &quot;</span> + restOfName.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot; &quot;</span>);<br>  <span class="hljs-comment">// 这里join方法用于将数组的各个元素使用空格串起来，即”Samuel Lucas Mackinzie“</span><br>&#125;<br><br><span class="hljs-keyword">let</span> employeeName = <span class="hljs-title function_">buildName</span>(<span class="hljs-string">&quot;Joseph&quot;</span>, <span class="hljs-string">&quot;Samuel&quot;</span>, <span class="hljs-string">&quot;Lucas&quot;</span>, <span class="hljs-string">&quot;MacKinzie&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="7-函数重载"><a class="markdownIt-Anchor" href="#7-函数重载"></a> 7. 函数重载</h2><p>JavaScript本身是个动态语言。JavaScript支持同名函数根据传入不同的参数而返回不同类型的数据，即支持函数重载。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add_things</span>(<span class="hljs-params"><span class="hljs-attr">par_1</span>:<span class="hljs-built_in">number</span>, <span class="hljs-attr">par_2</span>:<span class="hljs-built_in">number</span></span>):<span class="hljs-built_in">number</span> &#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二-泛型"><a class="markdownIt-Anchor" href="#二-泛型"></a> 二、泛型</h1><h2 id="1泛型广泛的类型"><a class="markdownIt-Anchor" href="#1泛型广泛的类型"></a> 1.泛型：广泛的类型</h2><p>在编写程序时，单个函数声明的返回值通常是固定的，这样对一些比较灵活的需求造成了困扰，例如我们需要根据参数的类型灵活地返回各种类型的数据。</p><p>C#、Java等语言支持使用<code>泛型</code>来创建可重用的组件，一个组件可以支持多种类型的数据。这样用户就可以以自己的数据类型来使用组件。</p><h2 id="2泛型函数"><a class="markdownIt-Anchor" href="#2泛型函数"></a> 2.泛型函数</h2><p>有一个方法<code>identity</code>，负责返回输入的内容（类似于<code>echo</code>）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">identity</span>(<span class="hljs-params"><span class="hljs-attr">arg</span>: <span class="hljs-built_in">any</span></span>): <span class="hljs-built_in">any</span> &#123;<br>    <span class="hljs-keyword">return</span> arg;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样做存在问题，返回值会一直是<code>any</code>类型，即丢失了参数的数据类型信息。因此，我们需要一种方法使返回值的类型与传入参数的类型是相同的。这里就需要使用<strong>类型变量</strong>，它是一种特殊的变量，只用于表示类型而不是值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> identity&lt;T&gt;(<span class="hljs-attr">arg</span>: T): T &#123;<br><span class="hljs-keyword">return</span> arg; <br>&#125;<br></code></pre></td></tr></table></figure><p>我们给identity添加了类型变量<code>T</code>。<code>T</code>帮助我们捕获用户传入的类型（比如：<code>number</code>），之后我们就可以使用这个类型。之后我们再次使用了<code>T</code>当做返回值类型。现在我们可以知道参数类型与返回值类型是相同的了。这允许我们跟踪函数里使用的类型的信息。</p><p>我们把这个版本的<code>identity</code>函数叫做<strong>泛型</strong>，因为它可以适用于多个类型。不同于使用<code>any</code>，它不会丢失信息，像第一个例子那像保持准确性，传入数值类型并返回数值类型。</p><p>泛型函数的使用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 第一种：明确指定T是某种类型</span><br><span class="hljs-keyword">let</span> output = identity&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&quot;myString&quot;</span>);<br><br><span class="hljs-comment">// 第二种：类型推论,让编译器自动根据参数确定T的类型</span><br><span class="hljs-keyword">let</span> output = <span class="hljs-title function_">identity</span>(<span class="hljs-string">&quot;myString&quot;</span>);<br><br><span class="hljs-comment">// 这两种方法都可以返回字符串类型的&quot;myString&quot;</span><br></code></pre></td></tr></table></figure><p>值得注意的是，在泛型函数中，只能使用一些通用的属性，即应当在函数体中将它们当作任意类型处理。如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> identity&lt;T&gt;(<span class="hljs-attr">arg</span>: T): T &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg.<span class="hljs-property">length</span>);<br>    <span class="hljs-keyword">return</span> arg;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里试图打印参数的长度，但是某些类型的参数没有<code>lengh</code>属性（如数字）。</p><h1 id="三-接口"><a class="markdownIt-Anchor" href="#三-接口"></a> 三、接口</h1><p>TypeScript 的核心原则之一是对值所具有的<strong>结构</strong>进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。TypeScript接口的作用就是为这些类型命名，以及我们写的代码或第三方代码定义契约。</p><p>通过一个简单示例，来观察接口是如何工作的：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">printLabel</span>(<span class="hljs-params"><span class="hljs-attr">labeledObj</span>: &#123; label: <span class="hljs-built_in">string</span> &#125;</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(labeledObj.<span class="hljs-property">label</span>);<br>&#125;<br><br><span class="hljs-keyword">let</span> myObj = &#123; <span class="hljs-attr">size</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;Size 10 Object&quot;</span> &#125;;<br><span class="hljs-title function_">printLabel</span>(myObj);<br></code></pre></td></tr></table></figure><p>调用<code>printLabel</code>方法时，类型检查器会检查其参数的类型；即要求此对象参数包含<strong>名为label且类型为string</strong>的属性。要想保证参数必须包含一个<code>label</code>属性且类型为<code>string</code>，可以使用<strong>接口（interface）</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">LabeledValue</span> &#123;<br>  <span class="hljs-attr">label</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printLabel</span>(<span class="hljs-params"><span class="hljs-attr">labeledObj</span>: <span class="hljs-title class_">LabeledValue</span></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(labeledObj.<span class="hljs-property">label</span>);<br>&#125;<br><br><span class="hljs-keyword">let</span> myObj = &#123; <span class="hljs-attr">size</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;Size 10 Object&quot;</span> &#125;;<br><span class="hljs-title function_">printLabel</span>(myObj);<br></code></pre></td></tr></table></figure><p><code>LabeledValue</code>接口就好比一个名字，用来描述上面例子里的要求。 它代表了有一个<code>label</code>属性且类型为<code>string</code>的对象。</p><hr /><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>TSDoc.TS手册指南v1-函数[EB/OL].(2023-04-28)[2025-08-05]. <a href="https://fxzer.github.io/tsdoc-vitepress/zh/handbooks/handbook-v1/Functions">https://fxzer.github.io/tsdoc-vitepress/zh/handbooks/handbook-v1/Functions</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>TSDoc.TS手册指南v1-泛型[EB/OL].(2023-04-28)[2025-08-05]. <a href="https://fxzer.github.io/tsdoc-vitepress/zh/handbooks/handbook-v1/Generics">https://fxzer.github.io/tsdoc-vitepress/zh/handbooks/handbook-v1/Generics</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>TSDoc.TS手册指南v1-接口[EB/OL].(2023-04-28)[2025-08-05]. <a href="https://fxzer.github.io/tsdoc-vitepress/zh/handbooks/handbook-v1/Interfaces">https://fxzer.github.io/tsdoc-vitepress/zh/handbooks/handbook-v1/Interfaces</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微信小程序开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序开发</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序开发（四）：TypeScript中的类与对象</title>
    <link href="/2025/08/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9ATypeScript%E4%B8%AD%E7%9A%84%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    <url>/2025/08/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9ATypeScript%E4%B8%AD%E7%9A%84%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>本篇笔记部分内容整理自网络中的一些文章及视频，详见文末的“参考资料”部分。存在部分AI生成的内容，请仔细甄别可能存在的错误。</p></blockquote><hr /><h1 id="〇-如何将typescript链接到html中"><a class="markdownIt-Anchor" href="#〇-如何将typescript链接到html中"></a> 〇、如何将TypeScript链接到HTML中</h1><p>（刚刚才发现好像还没研究怎么运行写好的TypeScript程序，在这里补充一下：）</p><p>虽然说Typescript是JavaScript的超集，兼容大多数JavaScript的写法与特性，但是TypeScript并不能像JavaScript一样，直接通过<code>&lt;script&gt;</code>连接到html文件中，<br /><img src="20250804222824572.png#sc" alt="" /></p><p>想要在HTML中链接ts程序，需要通过tsc（TypeScript Compiler，TypeScript编译器）将ts编译成js文件，然后将js链接到HTML。</p><p>首先运行以下命令，通过npm安装tsc:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g typescript<br></code></pre></td></tr></table></figure><p>然后<code>cd</code>到目标TypeScript文件所在的文件夹，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tsc 文件名<br></code></pre></td></tr></table></figure><p>于是在ts文件旁边会生成一个同名的js文件，即为ts文件编译之后的JavaScript程序，可将其链接到HTML中。</p><h1 id="一-typescript中的类"><a class="markdownIt-Anchor" href="#一-typescript中的类"></a> 一、TypeScript中的类</h1><h2 id="1类的声明与使用"><a class="markdownIt-Anchor" href="#1类的声明与使用"></a> 1.类的声明与使用</h2><p>以下是使用TypeScript定义一个<code>Greeter</code>类并使用的例子：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Greeter</span> &#123;<br>    <span class="hljs-attr">greeting</span>: <span class="hljs-built_in">string</span>;                   <span class="hljs-comment">// 属性</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">message</span>: <span class="hljs-built_in">string</span></span>) &#123;      <span class="hljs-comment">// 构造函数</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">greeting</span> = message;<br>    &#125;<br>    <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>) &#123;                           <span class="hljs-comment">// 方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">greeting</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> greeter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Greeter</span>(<span class="hljs-string">&quot;world&quot;</span>);<br></code></pre></td></tr></table></figure><p>这样的定义方法与C#或Java的写法类似，其中有三种成员：<strong>属性</strong>、<strong>构造函数</strong>和<strong>方法</strong>。</p><p>注意到我们在引用任何一个类成员的时候都用了<code>this</code>。 它表示我们访问的是类的成员。<br />最后一行，我们使用<code>new</code>构造了<code>Greeter</code>类的一个实例。 它会调用之前定义的构造函数，创建一个<code>Greeter</code>类型的新对象，并执行构造函数初始化它。</p><h2 id="2类的继承"><a class="markdownIt-Anchor" href="#2类的继承"></a> 2.类的继承</h2><p>在TypeScript里，我们可以使用常用的面向对象模式，包括通过继承来拓展现有的各种类。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-title function_">move</span>(<span class="hljs-params"><span class="hljs-attr">distanceInMeters</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Animal moved <span class="hljs-subst">$&#123;distanceInMeters&#125;</span>m.`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>    <span class="hljs-title function_">bark</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Woof! Woof!&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>dog.<span class="hljs-title function_">bark</span>();<br>dog.<span class="hljs-title function_">move</span>(<span class="hljs-number">10</span>);<br>dog.<span class="hljs-title function_">bark</span>();<br></code></pre></td></tr></table></figure><p>Dog类通过<code>wxtern</code>关键字实现了对Animal<strong>基类</strong>的<strong>派生</strong>。派生类也称子类，基类也称作是超类。派生类继承了基类的属性和方法，也有着自己定义的独特的属性和方法。</p><h2 id="3super方法"><a class="markdownIt-Anchor" href="#3super方法"></a> 3.super()方法</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">theName</span>: <span class="hljs-built_in">string</span></span>) &#123; <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = theName; &#125;<br>    <span class="hljs-title function_">move</span>(<span class="hljs-params"><span class="hljs-attr">distanceInMeters</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> moved <span class="hljs-subst">$&#123;distanceInMeters&#125;</span>m.`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Snake</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span></span>) &#123; <span class="hljs-variable language_">super</span>(name); &#125;<br>    <span class="hljs-title function_">move</span>(<span class="hljs-params">distanceInMeters = <span class="hljs-number">5</span></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Slithering...&quot;</span>);<br>        <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">move</span>(distanceInMeters);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Horse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span></span>) &#123; <span class="hljs-variable language_">super</span>(name); &#125;<br>    <span class="hljs-title function_">move</span>(<span class="hljs-params">distanceInMeters = <span class="hljs-number">45</span></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Galloping...&quot;</span>);<br>        <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">move</span>(distanceInMeters);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> sam = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Snake</span>(<span class="hljs-string">&quot;Sammy the Python&quot;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: <span class="hljs-title class_">Animal</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Horse</span>(<span class="hljs-string">&quot;Tommy the Palomino&quot;</span>);<br><br>sam.<span class="hljs-title function_">move</span>();<br>tom.<span class="hljs-title function_">move</span>(<span class="hljs-number">34</span>);<br></code></pre></td></tr></table></figure><p>这里的派生类包含了构造函数，必须调用<code>super()</code>方法来执行基类的构造函数。在构造函数中访问<code>this</code>的属性之前，<strong>一定</strong>要调用<code>super()</code>方法，这是TypeScript的重要规则。这里的例子在派生类中重写了父类的<code>move</code>方法，使得<code>move</code>方法根据不同的类具有不同的功能(实现了面向对象的<strong>多态</strong>特征)。</p><h2 id="4数据保护与可见性"><a class="markdownIt-Anchor" href="#4数据保护与可见性"></a> 4.数据保护与可见性</h2><p>在TypeScript中，未明确指定可见性的属性与方法，其可见性默认为<code>public</code>，也可以明确指定一些属性及方法为<code>public</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">theName</span>: <span class="hljs-built_in">string</span></span>) &#123; <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = theName; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">move</span>(<span class="hljs-params"><span class="hljs-attr">distanceInMeters</span>: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> moved <span class="hljs-subst">$&#123;distanceInMeters&#125;</span>m.`</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>与C++类似，除标记为<code>public</code>外，属性与方法也可标记为<code>private</code>，此时这些属性与方法不能再声明它的类外部访问。标记为<code>protected</code>时，仅能在类内和派生类中可以访问。如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">theName</span>: <span class="hljs-built_in">string</span></span>) &#123; <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = theName; &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">showName</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> my_pet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&quot;Cat&quot;</span>);   <br><span class="hljs-keyword">let</span> name = my_pet.<span class="hljs-property">name</span>;           <span class="hljs-comment">// 错误: &#x27;name&#x27; 是私有的.</span><br>my_pet.<span class="hljs-title function_">showName</span>();                <span class="hljs-comment">// 正确，可以输出Cat</span><br></code></pre></td></tr></table></figure><p>尝试访问非可见的方法或属性，无法通过编译：<br /><img src="20250804203545990.png#bc" alt="" /></p><p>除此之外，还可以使用<code>readonly</code>关键词将一些属性设定为只读的，它们必须在声明时或构造函数中被初始化，且后续无法修改。例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Octopus</span> &#123;<br>    <span class="hljs-keyword">readonly</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-keyword">readonly</span> <span class="hljs-attr">numberOfLegs</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">8</span>;<br>    <span class="hljs-title function_">constructor</span> (<span class="hljs-params"><span class="hljs-attr">theName</span>: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = theName;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> dad = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Octopus</span>(<span class="hljs-string">&quot;Man with the 8 strong legs&quot;</span>);<br>dad.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Man with the 3-piece suit&quot;</span>; <span class="hljs-comment">// 错误! name 是只读的.</span><br></code></pre></td></tr></table></figure><blockquote><p>题外话：《The Man with Eight Pairs of Legs》是 Leslie Kirk Campbell 的一部短篇小说，讲述了身材高挑、一生都饱受身体羞耻困扰的高中教师 Harriet Rogers，在当地酒吧结识了矿工 Callahan，Harriet 发现 Callahan 戴着假肢。Callahan 是当地矿井爆炸的受害者，随着两人关系的发展，他向 Harriet 展示了多对假肢，这也是书名中 “八对腿” 的由来。Callahan 想要参加佳能城的年度马拉松比赛，成为首位使用假肢参赛的选手，而他们的关系也在 Callahan 训练的过程中面临着各种挑战。</p><p>（上例中“Man with the 8 strong legs”或许来源于此？）</p></blockquote><h2 id="5参数属性"><a class="markdownIt-Anchor" href="#5参数属性"></a> 5.参数属性</h2><p><strong>参数属性</strong>可以方便地让我们在一个地方定义并初始化一个成员。如上例中的构造函数，也可以写成这样：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span></span>) &#123; &#125;                   <span class="hljs-comment">// 使用参数属性的构造函数</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;                    <br><span class="hljs-title function_">constructor</span> (<span class="hljs-params"><span class="hljs-attr">theName</span>: <span class="hljs-built_in">string</span></span>) &#123; <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = theName; &#125;  <span class="hljs-comment">// 之前的构造函数</span><br>&#125;<br></code></pre></td></tr></table></figure><p>相当于<code>let a:number; a = 1;</code>和<code>let a: number = 1;</code>一样，直接把声明和赋值合并在一起，更加方便快捷。</p><h2 id="6存取器"><a class="markdownIt-Anchor" href="#6存取器"></a> 6.存取器</h2><p>TypeScript支持通过getters/setters来截取对对象成员的访问。通过关键字<code>get</code>与<code>set</code>指定这些方法，能够帮助我们有效地控制对成员的访问。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> fullNameMaxLength = <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-attr">_fullName</span>: <span class="hljs-built_in">string</span>;<br><br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">fullName</span>(): <span class="hljs-built_in">string</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Employee&#x27;s name is&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">_fullName</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">fullName</span>(<span class="hljs-params"><span class="hljs-attr">newName</span>: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-keyword">if</span> (newName &amp;&amp; newName.<span class="hljs-property">length</span> &gt; fullNameMaxLength) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;fullName has a max length of &quot;</span> + fullNameMaxLength);<br>        &#125;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_fullName</span> = newName;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> employee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>employee.<span class="hljs-property">fullName</span> = <span class="hljs-string">&quot;Bob Smith&quot;</span>;<br><br><span class="hljs-keyword">if</span> (employee.<span class="hljs-property">fullName</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(employee.<span class="hljs-property">fullName</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>正确情况下，输出的结果：（alert弹窗提醒）<br /><img src="20250804214722750.png#sc" alt="" /></p><p>setter捕获到错误的情况下，输出的结果：（无alert弹窗，控制台报错）<br /><img src="20250804214924992.png!%5B%5D(20250804214924992.png#sc)#sc" alt="" /></p><p>上例中，为_fullName的读取和修改操作定义了getter和setter，有点类似于C++中的cin/cout运算符重载，修改了对对象元素进行访问和修改时的逻辑，如访问时不仅返回属性值，还加上“Employee’s name is”这样的信息；修改元素时先判定长度是否小于10，否则报告错误等。</p><h2 id="7静态属性"><a class="markdownIt-Anchor" href="#7静态属性"></a> 7.静态属性</h2><p>我们也可以通过<code>static</code>关键字创建类的静态成员，这些属性存在于类本身上面而不是类的实例上。静态属性通常有两种用途：</p><ul><li>定义所有对象的公共特征，如平面直角坐标系中的图形对象，拥有相同的原点，可以定义<code>static origin:number[] = [0, 0];</code></li><li>统计某个类的对象个数，通过静态属性<code>static cnt = 0;</code>然后分别在类的构造函数与析构函数中分别使其++或–，此时访问任何一个对象的<code>cnt</code>属性，都等于这一类的对象个数。</li></ul><h2 id="8抽象类虚基类"><a class="markdownIt-Anchor" href="#8抽象类虚基类"></a> 8.抽象类（虚基类）</h2><p>抽象类做为其它派生类的基类使用。它们一般不会直接被实例化（类似于C++中的虚基类）。不同于接口，抽象类可以包含成员的实现细节（抽象类中除抽象函数（虚函数）之外，其他函数可以包含具体实现）。<code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">makeSound</span>(): <span class="hljs-built_in">void</span>;<br>    <span class="hljs-title function_">move</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;roaming the earth...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。抽象方法的语法与接口方法相似。两者都是定义方法签名但不包含方法体。然而，抽象方法必须包含<code>abstract</code>关键字并且可以包含访问修饰符。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span></span>) &#123; &#125;<br>    <br>    <span class="hljs-title function_">printName</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Department name: &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">printMeeting</span>(): <span class="hljs-built_in">void</span>; <span class="hljs-comment">// 必须在派生类中实现</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountingDepartment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Department</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">super</span>(<span class="hljs-string">&#x27;Accounting and Auditing&#x27;</span>); <span class="hljs-comment">// 在派生类的构造函数中必须调用 super()</span><br>    &#125;<br>    <br>    <span class="hljs-title function_">printMeeting</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The Accounting Department meets each Monday at 10am.&#x27;</span>);<br>    &#125;<br>    <br>    <span class="hljs-title function_">generateReports</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Generating accounting reports...&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">department</span>: <span class="hljs-title class_">Department</span>; <span class="hljs-comment">// 允许创建一个对抽象类型的引用</span><br><br>department = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(); <span class="hljs-comment">// 错误: 不能创建一个抽象类的实例</span><br>department = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountingDepartment</span>(); <span class="hljs-comment">// 允许对一个抽象子类进行实例化和赋值</span><br><br>department.<span class="hljs-title function_">printName</span>();<br>department.<span class="hljs-title function_">printMeeting</span>();<br>department.<span class="hljs-title function_">generateReports</span>(); <span class="hljs-comment">// 错误: 方法在声明的抽象类中不存在</span><br></code></pre></td></tr></table></figure><hr /><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>TSDoc.TS手册指南v1[EB/OL].(2021-01-11)[2025-08-03]. <a href="https://fxzer.github.io/tsdoc-vitepress/zh/handbooks/handbook-v1/Classes">https://fxzer.github.io/tsdoc-vitepress/zh/handbooks/handbook-v1/Classes</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微信小程序开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序开发</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序开发（三）：TypeScript入门</title>
    <link href="/2025/08/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ATypeScript%E5%85%A5%E9%97%A8/"/>
    <url>/2025/08/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ATypeScript%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>本篇笔记部分内容整理自网络中的一些文章及视频，详见文末的“参考资料”部分。存在部分AI生成的内容，请仔细甄别可能存在的错误。</p></blockquote><hr /><h1 id="一-typescript简介"><a class="markdownIt-Anchor" href="#一-typescript简介"></a> 一、TypeScript简介</h1><blockquote><p>TS（TypeScript）是由微软开发的一种开源编程语言，它是 JavaScript 的一个超集，主要特点是在JavaScript的基础上添加了静态类型系统。TS适合中大型项目或对代码质量要求较高的场景，它通过类型系统提升了代码的健壮性和可维护性，同时保留了JavaScript的灵活性和生态优势。</p></blockquote><p>使用TypeScript进行开发具有以下优势：</p><ol><li><strong>静态类型检查</strong><ul><li>在编译阶段就能发现类型相关的错误，减少运行时错误。</li><li>增强代码的可靠性和可维护性，尤其在大型项目中优势明显。</li></ul></li><li><strong>代码可读性与可维护性</strong><ul><li>类型注解让代码更清晰，便于团队协作和后续维护。</li><li>编辑器能提供更智能的自动补全、类型提示等功能。</li></ul></li><li><strong>更好的重构支持</strong><ul><li>类型系统帮助开发者更安全地进行代码重构，降低出错概率。</li></ul></li><li><strong>渐进式采用</strong><ul><li>可以逐步将 JavaScript 代码迁移到 TypeScript，无需一次性重写。</li></ul></li><li><strong>丰富的生态系统</strong><ul><li>与主流框架（如 React、Vue 等）和工具（如 Webpack、VS Code 等）良好集成。</li><li>拥有庞大的社区支持和大量的学习资源。</li></ul></li></ol><p>TypeScript官方文档： <a href="https://www.tslang.cn/docs/handbook/basic-types.html">https://www.tslang.cn/docs/handbook/basic-types.html</a></p><h1 id="二-typescript基本数据类型"><a class="markdownIt-Anchor" href="#二-typescript基本数据类型"></a> 二、TypeScript基本数据类型</h1><p>只需在声明变量时，添加上<code>:数据类型</code>即可定义变量的数据类型。常用的基本数据类型如下：</p><h2 id="1字符串string"><a class="markdownIt-Anchor" href="#1字符串string"></a> 1.字符串:string</h2><p>使用单引号’或双引号&quot;声明。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;小明&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="2数字number"><a class="markdownIt-Anchor" href="#2数字number"></a> 2.数字:number</h2><p>支持二进制、八进制、十进制、十六进制。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">decLiteral</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">hexLiteral</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0xf00d</span>; <br><span class="hljs-keyword">let</span> <span class="hljs-attr">binaryLiteral</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0b1010</span>; <br><span class="hljs-keyword">let</span> <span class="hljs-attr">octalLiteral</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0o744</span>;<br></code></pre></td></tr></table></figure><p>模版字符串：使用反引号`定义，支持在字符串中使用<code>$&#123;&#125;</code>嵌入表达式或实现多行文本。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">info</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`姓名：<span class="hljs-subst">$&#123;user.name&#125;</span> 年龄：<span class="hljs-subst">$&#123;user.age&#125;</span>`</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">description</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`</span><br><span class="hljs-string">1. the first line of the multiline text,</span><br><span class="hljs-string">2. the second line of the multiline text,</span><br><span class="hljs-string">3. the last line of the multiline text.`</span>;<br></code></pre></td></tr></table></figure><p>使用<code>+</code>可以连接两个不同类型的数据，如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">info</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;我叫&quot;</span> + user.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;，我今年&quot;</span> + user.<span class="hljs-property">age</span> + <span class="hljs-string">&quot;岁。&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="3布尔boolean"><a class="markdownIt-Anchor" href="#3布尔boolean"></a> 3.布尔:boolean</h2><p>取值只能是true或者false。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">is_done</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><h2 id="4undefined类型"><a class="markdownIt-Anchor" href="#4undefined类型"></a> 4.undefined类型</h2><p>只能取值undefined</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">ud</span>:<span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><h2 id="5null类型"><a class="markdownIt-Anchor" href="#5null类型"></a> 5.null类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">n</span>:<span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><h2 id="6空类型void"><a class="markdownIt-Anchor" href="#6空类型void"></a> 6.空类型:void</h2><p>表示没有任何类型(相当于null)，用于指定函数无返回值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">void</span>&#123;&#125;;<br></code></pre></td></tr></table></figure><h2 id="7未知类型unknown"><a class="markdownIt-Anchor" href="#7未知类型unknown"></a> 7.未知类型:unknown</h2><p>接收用户输入或API返回内容时，变量的类型往往是未知的，此时可以使用unknown类型的变量，指定编译器以任意的数据类型接收这些内容。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">notSure</span>: <span class="hljs-built_in">unknown</span> = <span class="hljs-number">4</span>;<br><br>notSure = <span class="hljs-string">&quot;或许是一个字符串&quot;</span>;<br>notSure = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>如果有一个 <code>unknwon</code> 类型的变量，可以通过 <code>typeof</code> 、严格相等(不仅检查数值，也要求数据类型相同)或者更高级的类型检查来将其的类型范围缩小。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// @errors: 2322 2322 2322</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">maybe</span>: <span class="hljs-built_in">unknown</span>;<br><span class="hljs-comment">// &#x27;maybe&#x27; could be a string, object, boolean, undefined, or other types</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">aNumber</span>: <span class="hljs-built_in">number</span> = maybe;<br><br><span class="hljs-keyword">if</span> (maybe === <span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-comment">// TypeScript knows that maybe is a boolean now</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">aBoolean</span>: <span class="hljs-built_in">boolean</span> = maybe;<br>  <span class="hljs-comment">// So, it cannot be a string</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">aString</span>: <span class="hljs-built_in">string</span> = maybe;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> maybe === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>  <span class="hljs-comment">// TypeScript knows that maybe is a string</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">aString</span>: <span class="hljs-built_in">string</span> = maybe;<br>  <span class="hljs-comment">// So, it cannot be a boolean</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">aBoolean</span>: <span class="hljs-built_in">boolean</span> = maybe;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8任意类型any"><a class="markdownIt-Anchor" href="#8任意类型any"></a> 8.任意类型:any</h2><p>需要处理来自用户的输入或第三方代码库的结果时，通常不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查，就可以使用<code>any</code>类型来标记这些变量</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">obj</span>:<span class="hljs-built_in">any</span>;<br><br>obj = <span class="hljs-number">100</span>;<br>obj = <span class="hljs-string">&quot;小明&quot;</span>;<br>obj = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;;<br></code></pre></td></tr></table></figure><h2 id="补充unknown类型与any类型的区别"><a class="markdownIt-Anchor" href="#补充unknown类型与any类型的区别"></a> 补充：unknown类型与any类型的区别</h2><p>在 TypeScript 中，<code>unknown</code>和<code>any</code>都是用于表示类型不确定的值，但它们在类型安全性上有显著区别，主要体现在对类型检查的严格程度上：</p><ol><li><p><strong><code>any</code>类型</strong>（不是很安全）：</p><ul><li>完全绕过TypeScript的类型检查</li><li>可以对<code>any</code>类型的值执行任何操作（调用任意方法、访问任意属性等），不会触发类型错误</li><li>可以将<code>any</code>类型赋值给任何其他类型，反之亦然</li></ul></li><li><p><strong><code>unknown</code>类型</strong>（相对比较安全）：</p><ul><li>是类型安全的<code>any</code>，被设计为更安全的替代方案</li><li>不能直接对<code>unknown</code>类型的值执行操作，必须先进行<strong>类型检查</strong>或<strong>类型断言</strong>（见后文）</li><li><code>unknown</code>类型的值只能赋值给<code>unknown</code>或<code>any</code>类型，不能直接赋值给其他类型</li></ul></li></ol><p>如何选择使用哪一种类型：</p><ul><li>当需要临时绕过类型检查且确定操作安全时，可以使用<code>any</code></li><li>当需要处理类型不确定的值但希望保持类型安全时，应优先使用<code>unknown</code></li><li><code>unknown</code>强制开发者进行显式的类型处理，减少了意外错误的可能性，是更推荐的做法</li></ul><h2 id="9never类型"><a class="markdownIt-Anchor" href="#9never类型"></a> 9.never类型</h2><p>表示那些永不存在的值的类型，可以作为只抛出异常或没有返回值的函数的返回值。never类型的值可以赋值给热呢类型，但是任何类型的值不能赋值为never类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 返回never的函数必须存在无法达到的终点</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">error</span>(<span class="hljs-params"><span class="hljs-attr">message</span>: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">never</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(message);<br>&#125;<br><br><span class="hljs-comment">// 推断的返回值类型为never</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fail</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Something failed&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 返回never的函数必须存在无法达到的终点</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">infiniteLoop</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">never</span> &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10字面量"><a class="markdownIt-Anchor" href="#10字面量"></a> 10.字面量</h2><p>只能赋值为定义的值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">animal</span>:<span class="hljs-string">&quot;cat&quot;</span>;<br><br>animal = <span class="hljs-string">&quot;cat&quot;</span>;      <span class="hljs-comment">// √</span><br>animal = <span class="hljs-string">&quot;dog&quot;</span>;      <span class="hljs-comment">// × </span><br></code></pre></td></tr></table></figure><h1 id="三-typescript复杂数据类型"><a class="markdownIt-Anchor" href="#三-typescript复杂数据类型"></a> 三、TypeScript复杂数据类型</h1><h2 id="1数组array"><a class="markdownIt-Anchor" href="#1数组array"></a> 1.数组：array</h2><p>数组有两种定义方法。</p><p>法一：在元素类型后面接上 <code>[]</code>，表示由此类型元素组成的一个数组。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>:<span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br></code></pre></td></tr></table></figure><ul><li>数组不接受指定类型以外的其他类型数据，若尝试向上述数组中插入布尔值<code>true</code>，TS会报错。想要让数组接受任何类型的数据，可将其定义为<code>any</code>类型。</li></ul><h2 id="2-元组tuple"><a class="markdownIt-Anchor" href="#2-元组tuple"></a> 2. 元组：tuple</h2><p>与Python中的元组类似，是一个已知元素数量和类型的数组，各元素的类型不必相同。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TS"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>] = [<span class="hljs-string">&quot;yes&quot;</span>, <span class="hljs-number">100</span>];<br></code></pre></td></tr></table></figure><p>尝试越界访问元组中的元素时，会触发错误：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts">x[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;world&quot;</span>; <br><span class="hljs-comment">// Error, Property &#x27;3&#x27; does not exist on type &#x27;[string, number]&#x27;.</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x[<span class="hljs-number">5</span>].<span class="hljs-title function_">toString</span>()); <br><span class="hljs-comment">// Error, Property &#x27;5&#x27; does not exist on type &#x27;[string, number]&#x27;.</span><br></code></pre></td></tr></table></figure><h2 id="3枚举enum"><a class="markdownIt-Anchor" href="#3枚举enum"></a> 3.枚举：enum</h2><p>使用枚举类型可以为一组数值赋予友好的名字，从而避免用数字表示一些可选的项目，使得难以阅读与理解。<br />默认情况下，元素的编号从0开始，也可以手动编号，后续元素会在此基础上迭加。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<span class="hljs-title class_">Red</span>, <span class="hljs-title class_">Green</span>, <span class="hljs-title class_">Blue</span>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: <span class="hljs-title class_">Color</span> = <span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">colorName</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title class_">Color</span>[<span class="hljs-number">2</span>];    <span class="hljs-comment">// 不清楚编号2是什么意义，可以通过这样的方法获取,取到的值为&quot;Green&quot;</span><br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Week</span> &#123;<span class="hljs-title class_">Sunday</span> = <span class="hljs-number">7</span>, <span class="hljs-title class_">Monday</span> = <span class="hljs-number">1</span>, <span class="hljs-title class_">Tuesday</span>, <span class="hljs-title class_">Wednesday</span>, <span class="hljs-title class_">Thursday</span>, <span class="hljs-title class_">Friday</span>, <span class="hljs-title class_">Saturday</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="4object类型"><a class="markdownIt-Anchor" href="#4object类型"></a> 4.Object类型</h2><p><code>object</code>表示非原始类型，也就是除<code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code>之外的类型。</p><p>使用<code>object</code>类型，就可以更好的表示像<code>Object.create</code>这样的API。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-attr">o</span>: <span class="hljs-built_in">object</span> | <span class="hljs-literal">null</span></span>): <span class="hljs-built_in">void</span>; <br><br><span class="hljs-title function_">create</span>(&#123; <span class="hljs-attr">prop</span>: <span class="hljs-number">0</span> &#125;);  <span class="hljs-comment">// OK </span><br><span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);         <span class="hljs-comment">// OK </span><br><br><span class="hljs-title function_">create</span>(<span class="hljs-number">42</span>);           <span class="hljs-comment">// Error </span><br><span class="hljs-title function_">create</span>(<span class="hljs-string">&quot;string&quot;</span>);     <span class="hljs-comment">// Error </span><br><span class="hljs-title function_">create</span>(<span class="hljs-literal">false</span>);        <span class="hljs-comment">// Error </span><br><span class="hljs-title function_">create</span>(<span class="hljs-literal">undefined</span>);    <span class="hljs-comment">// Error</span><br></code></pre></td></tr></table></figure><h2 id="5类型断言"><a class="markdownIt-Anchor" href="#5类型断言"></a> 5.类型断言</h2><p>通常在“清楚地知道一个实体具有比它现有类型更确切的类型(文档里是这么写的，我没看懂)”的情况下，使用类型断言告知编译器自己清楚且确定使用这样的数据类型，类似于“类型转换”，是不进行特殊的数据检查和解构。它没有运行时的影响，只在编译阶段起作用。</p><p>建议使用<code>as</code>语法，写法如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">value</span>: <span class="hljs-built_in">any</span> = <span class="hljs-string">&quot;这是一个字符串&quot;</span>;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span> = (value <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><h2 id="注使用var-let以及const声明变量的区别"><a class="markdownIt-Anchor" href="#注使用var-let以及const声明变量的区别"></a> 注：使用<code>var</code>、<code>let</code>以及<code>const</code>声明变量的区别</h2><table><thead><tr><th></th><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>作用域</td><td>函数作用域</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>变量提升</td><td>声明会提到函数顶部（赋值不会）</td><td>存在“暂时性死区”，<br>先使用后声明会报错</td><td>存在“暂时性死区”，<br>先使用后声明会报错</td></tr><tr><td>可重名性</td><td>允许在同一作用域内重复声明同一变量</td><td>不允许在同一作用域内重复声明同一变量</td><td>不允许在同一作用域内重复声明同一变量</td></tr><tr><td>可修改性</td><td>声明的变量可以被重新赋值</td><td>声明的变量可以被重新赋值</td><td>声明的是常量，不允许修改</td></tr></tbody></table><ul><li>函数作用域：即使在if、for代码块中定义的变量，在整个函数体中也可以访问。</li><li>块级作用域：声明的变量仅在自己的代码块中可见。</li></ul><p>在 TypeScript 开发中，推荐优先使用<code>const</code>，当确实需要重新赋值时再使用<code>let</code>，<strong>尽量避免使用<code>var</code></strong>，以减少作用域相关的问题。</p><h3 id="奇怪的变量捕获问题"><a class="markdownIt-Anchor" href="#奇怪的变量捕获问题"></a> <strong>奇怪的“变量捕获”问题</strong></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;     <span class="hljs-comment">// 设置定时器</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>&#125;, <span class="hljs-number">100</span> * i);                 <span class="hljs-comment">// 100*i ms后执行中间的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对于上面的代码，运行结果是10个10而不是0-9的遍历（<a href="https://jsbin.com/cowayayaho/edit?html,output">点击运行代码</a>），与印象中预期的输出不同。原因是，由于使用<code>var</code>定义变量，我们传给<code>setTimeout</code>的每一个函数表达式实际上都<strong>引用了相同作用域里的同一个<code>i</code></strong>。即<strong>在定时器延迟输出以前，for循环已经完成了0-9的遍历</strong>，i也已经增加到了10，于是输出的是10个10而不是1-10的遍历。</p><p>有意思的是，将<code>var</code>换成<code>let</code>，输出的结果又变成了0-9的遍历（<a href="https://jsbin.com/vidulibika/1/edit?html,output">点击运行代码</a>)。以下是AI给出的解释，或许更通俗易懂：</p><ol><li>使用<code>var</code>时输出 10 个 10 的原因<ul><li><code>var</code>的作用域特性：<code>var</code>声明的变量具有函数作用域（而非块级作用域），在for循环中，变量i在整个函数范围内都是同一个变量。</li><li>定时器的异步执行：<code>setTimeout</code>是异步执行的，<strong>当循环结束后，定时器中的回调函数才会开始执行</strong>。此时循环已经完成，<code>i</code>的值已经变成了10（循环终止条件是i &lt; 10，最后一次递增后i为 10）。</li><li>闭包引用同一变量：所有定时器的回调函数都引用了同一个<code>i</code>（函数作用域内的唯一变量），因此当它们执行时，都会读取到i的最终值10。</li></ul></li><li>改成let后输出 0-9 的原因<ul><li><code>let</code>的块级作用域：<code>let</code>声明的变量具有块级作用域，在for循环中，每次迭代都会创建一个新的i变量（每个循环块内的i都是独立的）。</li><li>绑定当前值：每个定时器的回调函数捕获的是当前循环块内的i，即每次迭代时i的当前值（0、1、2…9）。</li><li>避免共享变量问题：由于每个i都是独立的，因此当定时器执行时，会分别输出各自捕获的i值，即 0 到 9。</li></ul></li></ol><p>因此，为了避免出现这样看起来玄乎的“迷之问题”，建议使用<code>let</code>声明变量。</p><h3 id="let声明的块作用域"><a class="markdownIt-Anchor" href="#let声明的块作用域"></a> let声明的块作用域</h3><blockquote><p>当用<code>let</code>声明一个变量，它使用的是<strong>词法作用域</strong>或<strong>块作用域</strong>。 不同于使用<code>var</code>声明的变量那样可以在包含它们的函数外访问，块作用域变量在包含它们的块或<code>for</code>循环之外是不能访问的。</p></blockquote><blockquote><p>拥有块级作用域的变量的另一个特点是，它们不能在被声明之前读或写。 虽然这些变量始终“存在”于它们的作用域里，但在直到声明它的代码之前的区域都属于<strong>暂时性死区</strong>。 它只是用来说明我们不能在<code>let</code>语句之前访问它们。</p></blockquote><hr /><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>小浪努力学前端.还不会TS？带你TypeScript快速入门[EB/OL].(2021-08-23)[2025-08-01]. <a href="https://www.cnblogs.com/echolun/p/12709761.html">https://www.cnblogs.com/echolun/p/12709761.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>TypeScript官方文档[EB/OL].()[2025-08-03]. <a href="https://www.tslang.cn/docs/handbook/basic-types.html">https://www.tslang.cn/docs/handbook/basic-types.html</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>TSDoc.TS手册指南v1[EB/OL].(2021-01-11)[2025-08-03]. <a href="https://fxzer.github.io/tsdoc-vitepress/zh/handbooks/handbook-v1/BasicTypes">https://fxzer.github.io/tsdoc-vitepress/zh/handbooks/handbook-v1/BasicTypes</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微信小程序开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序开发</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序开发（二）：WXML与WXSS简介</title>
    <link href="/2025/07/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AWXML%E4%B8%8EWXSS%E7%AE%80%E4%BB%8B/"/>
    <url>/2025/07/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AWXML%E4%B8%8EWXSS%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>本篇笔记部分内容整理自网络中的一些文章及视频，详见文末的“参考资料”部分。</p></blockquote><hr /><h1 id="一-wxml篇"><a class="markdownIt-Anchor" href="#一-wxml篇"></a> 一、WXML篇</h1><p>WXML全称<code>WeiXin Markup Language</code>（微信标记语言），这是微信框架提供的一套标签语言。</p><p>我们在写HTML页面时，总是习惯使用<code>div</code>进行整体布局，使用<code>span</code>描述文本信息，使用<code>img</code>装载图片等等，但在WXML中会有一些差异。类似于vue，WXML提供的每个标签都是一个组件。</p><h2 id="组件的概念"><a class="markdownIt-Anchor" href="#组件的概念"></a> ● “组件”的概念</h2><p>在编写代码时，通常将具有相同功能的代码写在一起，以提高代码复用性，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.nav</span> &#123;<br><span class="hljs-attribute">display</span>: flex;<br><span class="hljs-attribute">justify-content</span>: space-around;<br><span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码用于定义一个样式集，用于控制所有<code>nav</code>类的标签。</p><p>如果要很多地方都具有相同的内容（如导航栏、注册弹窗、每篇文章下的评论区），在每个地方都写一遍HTML+CSS+JavaScript会增加很多编码工作量，bug出现的可能性也会增加不少；需要修改这些组件时还需要到每一个组件的定义处修改，非常麻烦。</p><p>换一个角度思考，将这些通用的HTML、CSS、JavaScript代码封装成一个<strong>组件</strong>进行独立管理，如同定义好的函数一样，就可以在多个页面的多个地方使用这些组件。需要修改组件内容时，只需修改一次组件的定义即可，使用组件的地方会跟着更新。</p><p>要实现这个组件我们都得先定义好组件模板（HTML，决定组件结构），组件默认样式（CSS，决定组件外观），组件功能（JS，决定组件负责做哪些事）。在小程序框架中，官方已经提前帮我们实现了大量的组件，常见的有以下几种：</p><table><thead><tr><th style="text-align:center">视图组件</th><th style="text-align:center">用途</th><th style="text-align:center">等价HTML标签</th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;view&gt;</code></td><td style="text-align:center">容器布局</td><td style="text-align:center"><code>&lt;div&gt;</code></td></tr><tr><td style="text-align:center"><code>&lt;text&gt;</code></td><td style="text-align:center">装载多行文本</td><td style="text-align:center"><code>&lt;span&gt;</code></td></tr><tr><td style="text-align:center"><code>&lt;image&gt;</code></td><td style="text-align:center">装载图片</td><td style="text-align:center"><code>&lt;img&gt;</code></td></tr></tbody></table><p>值得高兴的是，官方为这些组件提供了很多便捷的属性，如：</p><p>假设我们希望图片加载完成后获取图片的宽度，这里就可以利用<code>image</code>的<code>bindload</code>（图片加载完成后触发）属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">bindload</span>=<span class="hljs-string">&#x27;imgLoad&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;···&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">getApp</span>()<br><br><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-comment">//图片加载完成后执行的方法</span><br>  <span class="hljs-title function_">imgLoad</span>(<span class="hljs-params">image</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(image.<span class="hljs-property">detail</span>.<span class="hljs-property">width</span>);<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>可以看到，图片加载完毕后，控制台输出了图片的宽度。此操作也可用于实现图片的懒加载等逻辑。</p><p>微信官方文档中的各种组件介绍： <a href="https://developers.weixin.qq.com/miniprogram/dev/component/">https://developers.weixin.qq.com/miniprogram/dev/component/</a><br />也有一些优秀的开源组件库，如 <strong>Vant Weapp</strong>： <a href="https://vant-ui.github.io/vant-weapp/#/home">https://vant-ui.github.io/vant-weapp/#/home</a></p><h1 id="二-wxss篇"><a class="markdownIt-Anchor" href="#二-wxss篇"></a> 二、WXSS篇</h1><p>WXSS基本上兼容CSS的写法，选择器定义、属性以及对应的取值没有很大的变化，若有CSS基础可以快速上手。需要注意的是，手机上几乎不会出现“鼠标悬浮”的操作，因此在WXSS中无法使用<code>:hover</code>伪类选择器。</p><h2 id="1新单位rpx"><a class="markdownIt-Anchor" href="#1新单位rpx"></a> 1.新单位rpx</h2><p>微信小程序新增了一个单位<code>rpx</code>，定义如下：</p><blockquote><p>rpx（responsive pixel，响应式像素）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</p></blockquote><p>官方推荐开发微信小程序时用 <strong>iPhone6</strong> 作为视觉稿的标准，在这样尺寸的屏幕上1rpx = 2px，是比较好算的整数倍关系。</p><h2 id="2wxss的样式关联"><a class="markdownIt-Anchor" href="#2wxss的样式关联"></a> 2.WXSS的样式关联</h2><p>在小程序中，同一个文件夹中的wxss文件中的样式会自动关联到wxml中，而根目录下<code>app.wxss</code>定义的是全局样式，会应用到所有的WXML文件上。</p><p>如果想让WXML链接其他文件夹下的wxss样式，需要在此WXML同文件夹的WXSS文件中使用<code>@import</code>导入外联样式，如：</p><p>pages文件夹下有index.wxml和index.wxss，需要链接styles文件夹下的default.wxss文件，此时需要在index.wxss中加上：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;../styles/default.wxss&quot;</span><br></code></pre></td></tr></table></figure><p>此时，default.wxss中的样式就会应用到index.wxml上了。</p><hr /><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>听风是风.从零开始的微信小程序入门教程(二)[EB/OL].(2020-04-16)[2025-07-29]. <a href="https://www.cnblogs.com/echolun/p/12709761.html">https://www.cnblogs.com/echolun/p/12709761.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微信小程序开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序开发</tag>
      
      <tag>WXML</tag>
      
      <tag>WXSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序开发（一）：工具与起步</title>
    <link href="/2025/07/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%B7%A5%E5%85%B7%E4%B8%8E%E8%B5%B7%E6%AD%A5/"/>
    <url>/2025/07/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%B7%A5%E5%85%B7%E4%B8%8E%E8%B5%B7%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>本篇笔记部分内容整理自网络中的一些文章及视频，详见文末的“参考资料”部分。</p></blockquote><hr /><h1 id="一-开发工具介绍及常用调试方法"><a class="markdownIt-Anchor" href="#一-开发工具介绍及常用调试方法"></a> 一、开发工具介绍及常用调试方法</h1><p>微信学堂：<a href="https://developers.weixin.qq.com/community/business/doc/0008e2af35095847dc88cb9015600d">小程序开发起步</a><br />微信开放社区：<a href="https://developers.weixin.qq.com/community/business/doc/000ce84ed20ec0aa45acded645bc0d">调试能力-常用调试器面板使用</a></p><h1 id="二-建立小程序项目"><a class="markdownIt-Anchor" href="#二-建立小程序项目"></a> 二、建立小程序项目</h1><p>运行<strong>微信开发者工具</strong>,点击&quot;+&quot;按钮后，填写项目名称、目录等信息后，选择合适的模板后点击“创建”即可创建一个小程序项目。<br />其中，对一些基础模板的说明如下：</p><table><thead><tr><th>模板名称</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>JS - 基础模板</strong></td><td>基于 JavaScript，灵活性高、上手快，模板简洁</td><td>简单小程序（如个人博客、小型展示型）、初学者学习小程序基本开发原理</td></tr><tr><td><strong>TS - 基础模板</strong></td><td>突出 TypeScript 的类型安全和可维护性，适合多人协作</td><td>大型团队开发的小程序、对稳定性要求高的小程序（如金融类、医疗类）</td></tr><tr><td><strong>js_Skyline - 基础模板</strong></td><td>基于 JavaScript，采用 Skyline 渲染引擎，性能高，精简 CSS 特性</td><td>对性能要求极高的小程序（如游戏类、视频播放类）、长列表展示场景（如商品列表、新闻资讯）</td></tr><tr><td><strong>TS-Skyline - 基础模板</strong></td><td>融合 TypeScript 的代码质量保障与 Skyline 的高性能渲染，减少卡顿和内存占用</td><td>大型高性能小程序项目（如大型企业级应用、功能复杂的社交类）</td></tr><tr><td><strong>TS+Sass - 基础模板</strong></td><td>结合 TypeScript 的静态类型检查与 Sass 的强大样式功能，语法严谨，适合大型项目</td><td>大型企业级小程序（如大型电商、企业资源管理）、需要复杂样式设计的小程序（如设计类、时尚类）</td></tr><tr><td><strong>TS+Less - 基础模板</strong></td><td>基于 TypeScript，采用 Less 预处理器，语法简洁灵活，允许使用 JavaScript 语法</td><td>中等规模项目（如小型电商、生活服务类）、对样式要求不复杂但需提高编写效率的项目</td></tr></tbody></table><p>使用<strong>TS-基础模板</strong>创建的小程序项目结构如下图所示：<br /><img src="20250728141458327.png#big-center" alt="" /></p><h1 id="三-常用文件及项目结构"><a class="markdownIt-Anchor" href="#三-常用文件及项目结构"></a> 三、常用文件及项目结构</h1><h2 id="1常用文件类型"><a class="markdownIt-Anchor" href="#1常用文件类型"></a> 1.常用文件类型</h2><p>小程序代码中的文件类型大致分为以下四种：</p><ul><li><code>.wxml</code>：微信模板文件，类似网页开发的html文件。</li><li><code>.wxss</code>：微信样式表文件，用于定于页面样式。</li><li><code>.js</code>：脚本文件，代码逻辑写在这。</li><li><code>.json</code>：静态数据配置文件。</li></ul><h2 id="2项目中的重要文件"><a class="markdownIt-Anchor" href="#2项目中的重要文件"></a> 2.项目中的重要文件</h2><p>创建项目后，有一些重要的文件需要充分认识：</p><h3 id="appjson小程序全局配置文件"><a class="markdownIt-Anchor" href="#appjson小程序全局配置文件"></a> app.json：小程序全局配置文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;pages&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span> <span class="hljs-comment">//页面数组</span><br>    <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;pages/logs/logs&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;backgroundTextStyle&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;light&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//背景文本样式 可选light dark</span><br>    <span class="hljs-attr">&quot;navigationBarBackgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#fff&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//导航背景色，可定义任意颜色</span><br>    <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;WeChat&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//导航标题，可定义任意文本</span><br>    <span class="hljs-attr">&quot;navigationBarTextStyle&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;black&quot;</span> <span class="hljs-comment">//导航文本颜色，可选black white</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>此文件主要管理小程序的全局配置，如：</p><ul><li>小程序页面路径</li><li>界面表现(标题，背景色，字体色)</li><li>网络超时时间</li><li>底部tab</li></ul><p>其中，<strong>pages字段</strong>记录了小程序的所有页面路径（类似于vue中的路由表？）,添加或删除页面文件后需要在此处同步修改，以免小程序找不到页面；<strong>windows字段</strong>用于定于所有页面的顶部背景颜色，文字颜色，标题等，作为全局配置应用于所有页面。当然也可以在单个页面json配置中定义独特的风格覆盖全局配置。<br /><img src="20250728133628228.png" alt="" /></p><h3 id="projectconfigjson开发者工具配置"><a class="markdownIt-Anchor" href="#projectconfigjson开发者工具配置"></a> project.config.json：开发者工具配置</h3><p>用于定义开发者工具的个性化定制，如界面颜色，编译配置等等，类似于<code>npm</code>下的<code>package.json</code>，记录了项目使用的一些node包，在代码同步时无需同步这些包，只需要执行<code>npm install</code>即可根据<code>package.json</code>文件中的包信息临时下载安装。</p><h3 id="wxml文件"><a class="markdownIt-Anchor" href="#wxml文件"></a> wxml文件</h3><p>对应于web中的<code>html</code>文件，将类似于<code>div</code>、<code>p</code>、<code>span</code>这样的标签换成了<code>view</code>、<code>text</code>等标签。此外，wxml还新增了例如<code>wx:if</code>类似的属性（跟vue挺像的）。同时，微信小程序也推行了MVVM做法，我们只用关心数据层，当数据发生变化，通过数据绑定的做法，模板中的表达式以及<code>wx：</code>等属性自动实现视图变化。</p><h3 id="wxss样式"><a class="markdownIt-Anchor" href="#wxss样式"></a> wxss样式</h3><p>小程序中的样式表写法与网页开发类似，可以看到全局配置中和每个页面文件夹下都存在一个wxss文件，这点与json配置一样。我们可以在app.wxss中定义全局样式，而在页面下的wxss样式中定义此页面独有的页面。</p><h1 id="四-小程序开发与web开发的不同点"><a class="markdownIt-Anchor" href="#四-小程序开发与web开发的不同点"></a> 四、小程序开发与web开发的不同点</h1><ul><li>浏览器渲染层与逻辑层都由同一线程处理，所以会存在堵塞的情况；但微信小程序由不同线程处理，逻辑层在jscore中。<br /><img src="20250728134705499.png" alt="" /></li><li>web开发中能方便操作DOM、BOM，但微信小程序中没有完整的浏览器对象，所以无法操作DOM，类似JQuery的框架也无法正常运行。</li><li>web开发中常用mpn引入三方库，但jscore环境与node.js不太相同，因此在网页开发中npm的包一部分在微信小程序中可能也无法使用。</li></ul><h1 id="五-快捷添加页面"><a class="markdownIt-Anchor" href="#五-快捷添加页面"></a> 五、快捷添加页面</h1><p>前文提到，添加页面文件后需要在<code>pages.json</code>中同步修改，一般推荐添加页面时直接在<code>pages</code>数组中添加一个页面路径，保存后编辑器会自动生成一个页面。<br /><img src="20250728135211032.gif" alt="" /></p><h1 id="六-json文件的编写规则"><a class="markdownIt-Anchor" href="#六-json文件的编写规则"></a> 六、json文件的编写规则</h1><p>1.json文件都是被包裹在{}中，并以key-value方式展示。注意key一定要加上双引号，没加双引号或者加单引号都会报错。</p><p>2.其次，json的值只能以下几种：</p><ul><li>数字</li><li>字符串(需要加双引号)</li><li>布尔值</li><li>数组(放在[]中)</li><li>对象(放在{}中)</li><li>null</li></ul><p>不支持undefined以及其它数据结构，否则会报错。</p><p>3.json文件不支持注释，添加任意注释都会引发报错。</p><hr /><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>热爱技术的小郑.超详细微信小程序开发学习笔记，看完你也可以动手做微信小程序项目[EB/OL].(2024-08-20)[2025-07-28]. <a href="https://developer.aliyun.com/article/1590890">https://developer.aliyun.com/article/1590890</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>微信开放社区.开发 · 小程序开发从入门到进阶[EB/OL].(2021-08-24)[2025-07-28]. <a href="https://developers.weixin.qq.com/community/business">https://developers.weixin.qq.com/community/business</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>听风是风.从零开始的微信小程序入门教程(一)[EB/OL].(2019-06-29)[2025-07-28]. <a href="https://www.cnblogs.com/echolun/p/11094605.html">https://www.cnblogs.com/echolun/p/11094605.html</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微信小程序开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web学习笔记（四）：jQuery篇</title>
    <link href="/2025/07/08/Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AjQuery%E7%AF%87/"/>
    <url>/2025/07/08/Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AjQuery%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>声明：本篇笔记部分摘自<a href="https://www.wenjingketang.com/bookinfo?book_id=9310">《Web前端技术 - 航空工业出版社》</a>，遵循<a href="https://creativecommons.org/licenses/by/4.0/legalcode.zh-hans">CC BY 4.0协议</a>。<br />存在由AI生成的小部分内容，仅供参考，请仔细甄别可能存在的错误。</p></blockquote><hr /><h1 id="一-jquery基础"><a class="markdownIt-Anchor" href="#一-jquery基础"></a> 一、jQuery基础</h1><h2 id="1认识jquery"><a class="markdownIt-Anchor" href="#1认识jquery"></a> 1.认识jQuery</h2><blockquote><p>jQuery于2006年1月由John Resig发布，其设计宗旨是“write less, do more”，即倡导写更少的代码，做更多的事情。jQuery封装了JavaScript常用的功能代码，提供了一种简便的JavaScript设计模式，优化了HTML文档操作、事件处理、动画设计和Ajax交互。它的设计可以改变用户编写JavaScript代码的方式，有助于提高编程效率。jQuery主要有以下特点。</p></blockquote><ul><li>代码精致小巧。jQuery是一个轻量级的JavaScript库，其代码非常小巧。</li><li>强大的功能函数。使用jQuery的功能函数，能够帮助开发人员快速地实现各种功能，并且代码优雅简洁，结构清晰。</li><li>跨浏览器。jQuery具有良好的兼容性，可以兼容各大主流浏览器。</li><li>链式的语法风格。jQuery可以对元素的一组操作进行统一的处理，不需要重新获取对象，也就是说jQuery可以基于一个对象进行一组操作。</li><li>插件丰富。除了jQuery本身带有的一些特效外，它还可以通过插件实现更多的功能，如表单验证、拖放效果等。网上的jQuery插件很多，可以直接下载使用，而且插件会将JavaScript代码和HTML代码完全分离，便于维护代码。</li><li>使用jQuery可以极大地提高编写JavaScript代码的效率，还可以让代码更加简洁、健壮。可以说，jQuery适合任何应用JavaScript的项目开发。</li></ul><h2 id="2下载和配置jquery"><a class="markdownIt-Anchor" href="#2下载和配置jquery"></a> 2.下载和配置jQuery</h2><ol><li>点击进入<a href="https://jQuery.com">jQuery官网</a>,点击“Download jQuery”字样下载脚本文件。</li><li>进入代码页，右键后点击菜单中的“另存为”选项(或按下<code>Ctrl+S</code>)，保存jQuery到本地。</li><li>将保存的<code>jquery-xxx.mim.js</code>文件复制到项目文件夹。</li><li>通过<code>&lt;script src=&quot;文件路径&quot;&gt;&lt;/script&gt;</code>将jQuery引入HTML文档。<ul><li>注意：引用jQuery的<code>&lt;script&gt;</code>标签应该在所有的<code>&lt;script&gt;</code>标签之前！</li></ul></li></ol><h1 id="二-jquery选择器"><a class="markdownIt-Anchor" href="#二-jquery选择器"></a> 二、jQuery选择器</h1><h2 id="1基本选择器"><a class="markdownIt-Anchor" href="#1基本选择器"></a> 1.基本选择器</h2><table><thead><tr><th style="text-align:center">选择器</th><th style="text-align:center">语法</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">ID选择器</td><td style="text-align:center">$(“#类名”)</td><td>根据id属性获取一个元素，返回单个元素</td></tr><tr><td style="text-align:center">元素选择器</td><td style="text-align:center">$(“元素名”)</td><td>根据标签名获取相应元素，返回元素集</td></tr><tr><td style="text-align:center">类名选择器</td><td style="text-align:center">$(“.类名”)</td><td>根据元素拥有的类名获取元素，返回元素集</td></tr><tr><td style="text-align:center">复合选择器</td><td style="text-align:center">$(“选择器1, 选择器2, …”)</td><td>取各个选择器选中元素的并集(同时满足所有选择器)</td></tr><tr><td style="text-align:center">通配选择器</td><td style="text-align:center">$(“*”)</td><td>获取所有元素</td></tr></tbody></table><h2 id="2层级选择器"><a class="markdownIt-Anchor" href="#2层级选择器"></a> 2.层级选择器</h2><table><thead><tr><th style="text-align:center">选择器</th><th style="text-align:center">语法</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">后代选择器</td><td style="text-align:center">$(“祖先元素 后代元素”)</td><td>获取祖先元素中的所有后代元素，返回元素集</td></tr><tr><td style="text-align:center">子代选择器</td><td style="text-align:center">$(“父元素&gt;子元素”)</td><td>获取父元素的直接子元素，返回元素集</td></tr><tr><td style="text-align:center">相邻选择器</td><td style="text-align:center">$(“前元素+后元素”)</td><td>获取所有紧接在前元素后面的后元素，返回元素集</td></tr><tr><td style="text-align:center">兄弟选择器</td><td style="text-align:center">$(“兄元素~弟元素”)</td><td>获取兄元素后的所有弟元素，返回元素集</td></tr></tbody></table><h2 id="3过滤选择器"><a class="markdownIt-Anchor" href="#3过滤选择器"></a> 3.过滤选择器</h2><h3 id="1-简单过滤器"><a class="markdownIt-Anchor" href="#1-简单过滤器"></a> ① 简单过滤器</h3><table><thead><tr><th>过滤器</th><th>说明</th></tr></thead><tbody><tr><td>:first</td><td>获取第一个元素，返回单个元素</td></tr><tr><td>:list</td><td>获取最后一个元素，返回单个元素</td></tr><tr><td>:even</td><td>获取索引值（从0开始计数）为偶数的所有元素，返回元素集</td></tr><tr><td>:odd</td><td>获取索引值（从0开始计数）为奇数的所有元素，返回元素集</td></tr><tr><td>:eq(索引)</td><td>获取带有指定索引值的元素，返回单个元素</td></tr><tr><td>:gt(索引)</td><td>获取所有大于给定索引值的元素，返回元素集</td></tr><tr><td>:lt(索引)</td><td>获取所有小于给定索引值的元素，返回元素集</td></tr><tr><td>:header</td><td>获取所有标题元素，如h1、h2、h3等，返回元素集</td></tr><tr><td>:animated</td><td>获取当前正在执行动画效果的元素，返回元素集</td></tr><tr><td>:not(选择器)</td><td>去除所有与给定选择器匹配的元素</td></tr></tbody></table><ul><li>例：<code>$(&quot;tr:first&quot;)</code>，获取表格第一行</li></ul><h3 id="2-内容过滤器"><a class="markdownIt-Anchor" href="#2-内容过滤器"></a> ② 内容过滤器</h3><table><thead><tr><th style="text-align:center">选择器</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">:contains(内容)</td><td>获取包含给定文本的元素，返回元素集</td></tr><tr><td style="text-align:center">:empty</td><td>获取所有不包含子元素或文本的空元素，返回元素集</td></tr><tr><td style="text-align:center">:has(选择器)</td><td>获取包含选择器选中元素的元素，返回元素集</td></tr><tr><td style="text-align:center">:parent</td><td>获取含有子元素或文本的元素，返回元素集</td></tr></tbody></table><ul><li>例：<code>$(&quot;div:has(p)&quot;)</code>，获取所有含有p元素的<strong>div元素</strong></li></ul><h3 id="3-可见性选择器"><a class="markdownIt-Anchor" href="#3-可见性选择器"></a> ③ 可见性选择器</h3><table><thead><tr><th style="text-align:center">选择器</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">:visible</td><td>获取所有可见元素，返回元素集</td></tr><tr><td style="text-align:center">:hidden</td><td>获取所有不可见元素，返回元素集</td></tr></tbody></table><h3 id="4-子元素过滤选择器"><a class="markdownIt-Anchor" href="#4-子元素过滤选择器"></a> ④ 子元素过滤选择器</h3><table><thead><tr><th>过滤器</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>:first-child</code></td><td>获取每个父元素的第一个子元素，返回元素集</td><td><code>$(&quot;ul li:first-child&quot;)</code>，获取每个 <code>ul</code> 元素中的第一个 <code>li</code> 元素</td></tr><tr><td><code>:list-child</code></td><td>获取每个父元素的最后一个子元素，返回元素集</td><td><code>$(&quot;ul li:last-child&quot;)</code>，获取每个 <code>ul</code> 元素中的最后一个 <code>li</code> 元素</td></tr><tr><td><code>:only-child</code></td><td>获取每个父元素中唯一的子元素，返回元素集</td><td><code>$(&quot;ul li:only-child&quot;)</code>，获取每个 <code>ul</code> 元素中含有的唯一的 <code>li</code> 元素</td></tr><tr><td><code>:nth-child(index/odd/even/equation)</code></td><td>获取每个父元素下的第 <code>index</code> 个子元素或奇偶元素，返回元素集（<code>index</code> 从 1 开始计数）</td><td></td></tr></tbody></table><h3 id="5-表单对象的属性过滤器"><a class="markdownIt-Anchor" href="#5-表单对象的属性过滤器"></a> ⑤ 表单对象的属性过滤器</h3><table><thead><tr><th>过滤器</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>:enabled</td><td>获取所有可用元素，返回元素集</td><td><code>$(&quot;#form1:enabled&quot;)</code>，获取 id 属性值为 “form1” 的表单内的所有可用元素</td></tr><tr><td>:disabled</td><td>获取所有不可用元素，返回元素集</td><td><code>$(&quot;#form2:disabled&quot;)</code>，获取 id 属性值为 “form2” 的表单内的所有不可用元素</td></tr><tr><td>:checked</td><td>获取所有被选中的元素，返回元素集</td><td><code>$(&quot;input:checked&quot;)</code>，获取所有被选中的 input 元素</td></tr><tr><td>:selected</td><td>获取所有被选中的选项元素，返回元素集</td><td><code>$(&quot;select:selected&quot;)</code>，获取所有被选中的选项元素</td></tr></tbody></table><h2 id="4属性选择器"><a class="markdownIt-Anchor" href="#4属性选择器"></a> 4.属性选择器</h2><table><thead><tr><th>选择器</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>[属性]</td><td>获取拥有此属性的元素，返回元素集</td><td><code>$(&quot;div[id]&quot;)</code>，获取拥有属性 id 的 div 元素</td></tr><tr><td>[属性=值]</td><td>获取给定属性的值等于某个值的元素，返回元素集</td><td><code>$(&quot;div[title='test']&quot;)</code>，获取属性 title 的值等于 “test” 的 div 元素</td></tr><tr><td>[属性!=值]</td><td>获取给定属性的值不等于某个值的元素，返回元素集</td><td><code>$(&quot;div[title!='test']&quot;)</code>，获取属性 title 的值不等于 “test” 的 div 元素（注意：没有属性 title 的 div 元素也会被获取）</td></tr><tr><td>[属性^=值]</td><td>获取给定属性的值含有某个值的元素，返回元素集</td><td><code>$(&quot;div[title^='test']&quot;)</code>，获取属性 title 中含有 “test” 值的 div 元素</td></tr><tr><td>[属性$=值]</td><td>获取给定属性的值以某个值开始的元素，返回元素集</td><td><code>$(&quot;div[title$='test']&quot;)</code>，获取属性 title 的值以 “test” 开始的 div 元素</td></tr><tr><td>[属性*=值]</td><td>获取给定属性的值以某个值结束的元素，返回元素集</td><td><code>$(&quot;div[title*='test']&quot;)</code>，获取属性 title 的值以 “test” 结束的 div 元素</td></tr><tr><td>[选择器1][选择器2]…</td><td>复合属性选择器，在同时满足多个条件时使用，返回元素集</td><td><code>$(&quot;div[id][title$='test']&quot;)</code>，获取拥有属性 id，且属性 title 的值以 “test” 结束的 div 元素</td></tr></tbody></table><h2 id="5表单选择器"><a class="markdownIt-Anchor" href="#5表单选择器"></a> 5.表单选择器</h2><table><thead><tr><th>选择器</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>:input</td><td>获取所有的 input 元素，返回元素集</td><td><code>$(&quot;:input&quot;)</code>，获取所有的 input 元素</td></tr><tr><td>:text</td><td>获取所有的单行文本框，返回元素集</td><td><code>$(&quot;:text&quot;)</code>，获取所有的单行文本框</td></tr><tr><td>:password</td><td>获取所有的密码框，返回元素集</td><td><code>$(&quot;:password&quot;)</code>，获取所有的密码框</td></tr><tr><td>:button</td><td>获取所有的普通按钮，返回元素集</td><td><code>$(&quot;:button&quot;)</code>，获取所有的普通按钮</td></tr><tr><td>:submit</td><td>获取所有的提交按钮，返回元素集</td><td><code>$(&quot;:submit&quot;)</code>，获取所有的提交按钮</td></tr><tr><td>:image</td><td>获取所有的图像按钮，返回元素集</td><td><code>$(&quot;:image&quot;)</code>，获取所有的图像按钮</td></tr><tr><td>:reset</td><td>获取所有的重置按钮，返回元素集</td><td><code>$(&quot;:reset&quot;)</code>，获取所有的重置按钮</td></tr><tr><td>:radio</td><td>获取所有的单选钮，返回元素集</td><td><code>$(&quot;:radio&quot;)</code>，获取所有的单选钮</td></tr><tr><td>:checkbox</td><td>获取所有的复选钮，返回元素集</td><td><code>$(&quot;:checkbox&quot;)</code>，获取所有的复选框</td></tr><tr><td>:file</td><td>获取所有的文件域，返回元素集</td><td><code>$(&quot;:file&quot;)</code>，获取所有的文件域</td></tr></tbody></table><h1 id="三-jquery操作元素"><a class="markdownIt-Anchor" href="#三-jquery操作元素"></a> 三、jQuery操作元素</h1><h2 id="1操作元素的内容和值"><a class="markdownIt-Anchor" href="#1操作元素的内容和值"></a> 1.操作元素的内容和值</h2><table><thead><tr><th>分类</th><th>方法</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>操作元素的文本内容</td><td>text()</td><td><code>$(选择器).text()</code></td><td>返回被选元素的文本内容</td></tr><tr><td></td><td></td><td><code>$(选择器).text(内容)</code></td><td>设置被选元素的文本内容</td></tr><tr><td></td><td></td><td><code>$(选择器).text(function(索引,旧内容))</code></td><td>使用函数设置被选元素的文本内容</td></tr><tr><td>操作元素的 HTML 内容</td><td>html()</td><td><code>$(选择器).html()</code></td><td>返回被选元素的 HTML 内容</td></tr><tr><td></td><td></td><td><code>$(选择器).html(内容)</code></td><td>设置被选元素的 HTML 内容</td></tr><tr><td></td><td></td><td><code>$(选择器).html(function(索引,旧内容))</code></td><td>使用函数设置被选元素的 HTML 内容</td></tr><tr><td>操作元素的值</td><td>val()</td><td><code>$(选择器).val()</code></td><td>返回第一个被选元素的指定值属性的值</td></tr><tr><td></td><td></td><td><code>$(选择器).val(值)</code></td><td>设置被选元素的指定值属性的值</td></tr><tr><td></td><td></td><td><code>$(选择器).val(function(索引,旧值))</code></td><td>使用函数设置被选元素的指定值属性的值</td></tr></tbody></table><ul><li>元素的值是元素的一种属性，大部分元素的值都对应值属性。</li></ul><h2 id="2操作dom节点"><a class="markdownIt-Anchor" href="#2操作dom节点"></a> 2.操作DOM节点</h2><h3 id="1-创建节点"><a class="markdownIt-Anchor" href="#1-创建节点"></a> ① 创建节点</h3><ul><li>创建节点主要分为两步：<ol><li>创建新元素</li><li>将新元素插入文档</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ewady</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 法一</span><br><span class="hljs-keyword">var</span> $p1 = $(<span class="hljs-string">&quot;&lt;p&gt;&lt;/p&gt;&quot;</span>);                  <span class="hljs-comment">// 空元素 - 赋值 - 插入</span><br>$p1.<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;法一添加的内容&quot;</span>);<br>$(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">append</span>($p1);                   <span class="hljs-comment">// 创建并赋值 - 插入</span><br><span class="hljs-comment">// 法二</span><br><span class="hljs-keyword">var</span> $p2 = $(<span class="hljs-string">&quot;&lt;p&gt;法二添加的内容&lt;/p&gt;&quot;</span>);<br>$(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">append</span>($p2);<br><span class="hljs-comment">// 法三</span><br>$(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;&lt;p&gt;法三添加的内容&lt;/p&gt;&quot;</span>);  <span class="hljs-comment">// 一气呵成</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="2-插入节点"><a class="markdownIt-Anchor" href="#2-插入节点"></a> ② 插入节点</h3><table><thead><tr><th>分类</th><th>方法</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>在元素内部插入节点</td><td>append()</td><td><code>$(选择器).append(内容)</code></td><td>在被选元素内部的结尾插入指定的内容</td></tr><tr><td></td><td>appendTo()</td><td><code>$(内容).appendTo(选择器)</code></td><td>在被选元素内部的结尾插入指定的内容</td></tr><tr><td></td><td>prepend()</td><td><code>$(选择器).prepend(内容)</code></td><td>在被选元素内部的开头插入指定的内容</td></tr><tr><td></td><td>prependTo()</td><td><code>$(内容).prependTo(选择器)</code></td><td>在被选元素内部的开头插入指定的内容</td></tr><tr><td>在元素外部插入节点</td><td>after()</td><td><code>$(选择器).after(内容)</code></td><td>在被选元素后插入指定的内容</td></tr><tr><td></td><td>insertAfter()</td><td><code>$(内容).insertAfter(选择器)</code></td><td>在被选元素后插入指定的内容</td></tr><tr><td></td><td>before()</td><td><code>$(选择器).before(内容)</code></td><td>在被选元素前插入指定的内容</td></tr><tr><td></td><td>insertBefore()</td><td><code>$(内容).insertBefore(选择器)</code></td><td>在被选元素前插入指定的内容</td></tr></tbody></table><h3 id="3-删除-复制和替换节点"><a class="markdownIt-Anchor" href="#3-删除-复制和替换节点"></a> ③ 删除、复制和替换节点</h3><table><thead><tr><th>分类</th><th>方法</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>删除节点</td><td>empty()</td><td><code>$(选择器).empty()</code></td><td>移除被选元素中的所有内容，包括所有文本和子节点，但不删除该元素</td></tr><tr><td></td><td>remove()</td><td><code>$(选择器).remove()</code></td><td>移除被选元素，包括所有文本和子节点</td></tr><tr><td>复制节点</td><td>clone()</td><td><code>$(选择器).clone(includeEvents)</code></td><td>生成被选元素的副本，包含子节点、文本和属性</td></tr><tr><td>替换节点</td><td>replaceAll()</td><td><code>$(内容).replaceAll(选择器)</code></td><td>用指定的 HTML 内容或元素替换被选元素，但 <code>replaceAll()</code> 无法使用函数进行替换</td></tr><tr><td>替换节点</td><td>replaceWith()</td><td><code>$(选择器).replaceWith(内容)</code></td><td>用指定的 HTML 内容或元素替换被选元素</td></tr></tbody></table><h2 id="3操作元素属性"><a class="markdownIt-Anchor" href="#3操作元素属性"></a> 3.操作元素属性</h2><table><thead><tr><th>方法</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>attr()</td><td><code>$(选择器).attr(属性)</code></td><td>返回被选元素的属性值</td></tr><tr><td></td><td><code>$(选择器).attr(属性,值)</code></td><td>设置被选元素的属性和值</td></tr><tr><td></td><td><code>$(选择器).attr(属性,function(索引,旧值))</code></td><td>使用函数来设置被选元素的属性和值</td></tr><tr><td></td><td><code>$(选择器).attr(&#123;属性:值, 属性:值 ...&#125;)</code></td><td>为被选元素设置一个以上的属性和值</td></tr><tr><td>removeAttr()</td><td><code>$(选择器).removeAttr(属性)</code></td><td>从被选元素中移除指定的属性</td></tr><tr><td>has类名()</td><td><code>$(选择器).has类名(类名)</code></td><td>检查被选元素是否包含指定的类</td></tr><tr><td>add类名()</td><td><code>$(选择器).add类名(类名)</code></td><td>向被选元素添加指定的类</td></tr><tr><td>remove类名()</td><td><code>$(选择器).remove类名(类名)</code></td><td>从被选元素中删除全部或者指定的类</td></tr><tr><td>toggle类名()</td><td><code>$(选择器).toggle类名(类名,switch)</code></td><td>设置或移除被选元素的一个或多个类进行切换</td></tr></tbody></table><h2 id="4操作元素的css样式"><a class="markdownIt-Anchor" href="#4操作元素的css样式"></a> 4.操作元素的CSS样式</h2><table><thead><tr><th>方法</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>css()</td><td><code>$(选择器).css(name)</code></td><td>返回第一个匹配元素的 CSS 属性值</td></tr><tr><td></td><td><code>$(选择器).css(name,值)</code></td><td>设置所有匹配元素的指定 CSS 属性</td></tr><tr><td></td><td><code>$(选择器).css(name,function(索引,值))</code></td><td>使用函数设置所有匹配的元素中样式属性的值</td></tr><tr><td></td><td><code>$(选择器).css(&#123;属性:值, 属性:值, ...&#125;)</code></td><td>设置多个 CSS 属性 / 值对，把 “名 / 值对” 对象设置为所有匹配元素的样式属性</td></tr><tr><td>height()</td><td><code>$(选择器).height()</code></td><td>返回第一个匹配元素的高度</td></tr><tr><td></td><td><code>$(选择器).height(length)</code></td><td>设置所有匹配元素的高度</td></tr><tr><td></td><td><code>$(选择器).height(function(索引,旧height))</code></td><td>使用函数设置所有匹配元素的高度</td></tr><tr><td>width()</td><td><code>$(选择器).width()</code></td><td>返回第一个匹配元素的宽度</td></tr><tr><td></td><td><code>$(选择器).width(length)</code></td><td>设置所有匹配元素的宽度</td></tr><tr><td></td><td><code>$(选择器).width(function(索引,旧width))</code></td><td>使用函数设置所有匹配元素的宽度</td></tr></tbody></table><h1 id="四-jquery事件处理"><a class="markdownIt-Anchor" href="#四-jquery事件处理"></a> 四、jQuery事件处理</h1><h2 id="1页面加载响应事件"><a class="markdownIt-Anchor" href="#1页面加载响应事件"></a> 1.页面加载响应事件</h2><p><code>$(document).ready()</code>方法是时间模块中最重要的一个方法，极大地提高了Web页面的响应速度，语法格式如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 页面加载完成时的操作</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>可以使用此方法代替DOM中的window.onloaded()方法，且具有以下特点：<ul><li>可以多次定义<code>$(document).ready()</code>，各方法之间不冲突且按顺序执行，而<code>window.onloaded()</code>方法仅能定义一个。</li><li>此方法在所有DOM元素加载完毕时就被调用，相比之下<code>window.onloaded()</code>方法会等待图片等关联的文件加载完成后才运行，因此前者相对更加快速高效。</li></ul></li></ul><h2 id="2jquery中的事件"><a class="markdownIt-Anchor" href="#2jquery中的事件"></a> 2.jQuery中的事件</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;(选择器).click(函数)</code></td><td>鼠标单击时运行函数或将函数绑定到此事件</td></tr><tr><td><code>&amp;(选择器).dbclick(函数)</code></td><td>鼠标双击时运行函数或将函数绑定到此事件</td></tr><tr><td><code>&amp;(选择器).mouseover(函数)</code></td><td>鼠标悬停时运行函数或将函数绑定到此事件</td></tr><tr><td><code>&amp;(选择器).focus(函数)</code></td><td>鼠标时运行函数或将函数绑定到此事件</td></tr></tbody></table><ul><li>这些事件处理程序的写法几乎与传统的JavaScript写法一致，只是名称略有不同而已。</li></ul><h2 id="3事件绑定"><a class="markdownIt-Anchor" href="#3事件绑定"></a> 3.事件绑定</h2><h3 id="1-为元素绑定事件"><a class="markdownIt-Anchor" href="#1-为元素绑定事件"></a> ① 为元素绑定事件</h3><ul><li>使用<code>bind()</code>方法为元素绑定事件：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">$(选择器).<span class="hljs-title function_">bind</span>(事件, 参数, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 事件处理程序</span><br>&#125;)<br><br><span class="hljs-comment">// 或者采用下面的方式来定义多种事件对应的处理程序:</span><br>$(选择器).<span class="hljs-title function_">bind</span>(事件<span class="hljs-number">1</span>:处理程序<span class="hljs-number">1</span>, 事件<span class="hljs-number">2</span>:处理程序<span class="hljs-number">2</span>, …)<br></code></pre></td></tr></table></figure><h3 id="2-移除绑定"><a class="markdownIt-Anchor" href="#2-移除绑定"></a> ② 移除绑定</h3><ul><li>使用<code>unbind()</code>方法解除元素绑定的事件：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(选择器).<span class="hljs-title function_">unbind</span>(事件, 处理程序)<br></code></pre></td></tr></table></figure><ul><li>其中两个参数均可选，分别用于删除指定的事件和指定的处理程序，若留空会移除所有事件。</li></ul><h3 id="3-绑定一次性事件"><a class="markdownIt-Anchor" href="#3-绑定一次性事件"></a> ③ 绑定一次性事件</h3><ul><li>使用<code>one()</code>方法为元素绑定一个或多个事件处理程序：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(选择器).<span class="hljs-title function_">one</span>(事件, 参数, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 事件处理程序</span><br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="五-jquery动画效果"><a class="markdownIt-Anchor" href="#五-jquery动画效果"></a> 五、jQuery动画效果</h1><ul><li>主要用于动态显示和隐藏元素，实现类似于PPT动画的效果。</li></ul><h2 id="1元素的隐藏和显示"><a class="markdownIt-Anchor" href="#1元素的隐藏和显示"></a> 1.元素的隐藏和显示</h2><h3 id="1-分别隐藏和显示匹配元素"><a class="markdownIt-Anchor" href="#1-分别隐藏和显示匹配元素"></a> ① 分别隐藏和显示匹配元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 隐藏元素</span><br>$(选择器).<span class="hljs-title function_">hide</span>(时长, 回调函数);<br><br><span class="hljs-comment">// 显示元素</span><br>$(选择器).<span class="hljs-title function_">show</span>(时长, 回调函数);<br></code></pre></td></tr></table></figure><ul><li>&quot;时长&quot;参数可选，可取以ms为单位的数值，也可以用关键字<code>slow</code>、<code>normal</code>及<code>fast</code>。</li><li>&quot;回调函数&quot;参数可选，接收一个定义好的函数，在动画结束后执行相关操作。</li></ul><h3 id="2-切换元素的可见状态"><a class="markdownIt-Anchor" href="#2-切换元素的可见状态"></a> ② 切换元素的可见状态</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(选择器).<span class="hljs-title function_">toggle</span>(时长, 回调函数);<br></code></pre></td></tr></table></figure><h2 id="2元素的淡入淡出"><a class="markdownIt-Anchor" href="#2元素的淡入淡出"></a> 2.元素的淡入淡出</h2><ul><li>隐藏和显示元素会改变元素的宽度和高度，若希望改变透明度，可以使用淡入淡出效果实现。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 将隐藏的元素淡入显示</span><br>$(选择器).<span class="hljs-title function_">fadeIn</span>(时长, 回调函数);<br><br><span class="hljs-comment">// 将显示的元素淡出隐藏</span><br>$(选择器).<span class="hljs-title function_">fadeOut</span>(时长, 回调函数);<br><br><span class="hljs-comment">// 淡入-淡出切换</span><br>$(选择器).<span class="hljs-title function_">fadeToggle</span>(时长, 回调函数);<br><br><span class="hljs-comment">// 使元素过渡到指定的透明度</span><br>$(选择器).<span class="hljs-title function_">fadeTo</span>(时长, 透明度, 回调函数);<br></code></pre></td></tr></table></figure><ul><li>透明度参数取值<code>0~1</code>。</li><li><code>fadeTo()</code>方法的时长参数必须给出，其他三个方法均可省略时长参数。</li><li>所有方法的回调函数参数可选。</li></ul><h2 id="3元素的滑动隐藏与显示效果"><a class="markdownIt-Anchor" href="#3元素的滑动隐藏与显示效果"></a> 3.元素的滑动隐藏与显示效果</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 向下滑动渐显</span><br>$(选择器).<span class="hljs-title function_">slideDown</span>(时长, 回调函数);<br><br><span class="hljs-comment">// 向上滑动渐隐</span><br>$(选择器).<span class="hljs-title function_">slideUp</span>(时长, 回调函数);<br><br><span class="hljs-comment">// 切换显示-隐藏状态</span><br>$(选择器).<span class="hljs-title function_">slideToggle</span>(时长, 回调函数);<br></code></pre></td></tr></table></figure><ul><li>两个参数均可选。</li></ul><h1 id="六-结语"><a class="markdownIt-Anchor" href="#六-结语"></a> 六、结语</h1><ul><li>jQuery通过工厂函数<code>$()</code>以及选择器获取HTML页面上的各种元素或元素集，将它们构造为一个对象，通过各种改进自JavaScript的方法来进行高效的操作，有效地提高了JavaScript代码的易读性和简洁性。</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Web</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web学习笔记（三）：JavaScript篇</title>
    <link href="/2025/07/07/Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AJavaScript%E7%AF%87/"/>
    <url>/2025/07/07/Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AJavaScript%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>声明：本篇笔记部分摘自<a href="https://www.wenjingketang.com/bookinfo?book_id=9310">《Web前端技术 - 航空工业出版社》</a>，遵循<a href="https://creativecommons.org/licenses/by/4.0/legalcode.zh-hans">CC BY 4.0协议</a>。<br />存在由AI生成的小部分内容，仅供参考，请仔细甄别可能存在的错误。</p></blockquote><hr /><h1 id="一-javascript概述"><a class="markdownIt-Anchor" href="#一-javascript概述"></a> 一、JavaScript概述</h1><blockquote><p>JavaScript 是一种高级、解释型编程语言，主要用于网页开发。它运行在浏览器中，能动态操作网页内容（如DOM）、处理用户交互、发送网络请求等。特点包括：</p><ul><li><strong>动态性</strong>：无需编译，代码可直接运行。</li><li><strong>面向对象</strong>：支持基于原型的继承。</li><li><strong>事件驱动</strong>：通过事件监听响应用户操作。</li><li><strong>跨平台</strong>：几乎所有浏览器都支持。</li></ul><p>常与HTML、CSS结合使用，现代框架如React、Vue使其功能更强大。Node.js扩展了其用途，可用于服务器端开发。</p></blockquote><h1 id="二-基本语法"><a class="markdownIt-Anchor" href="#二-基本语法"></a> 二、基本语法</h1><h2 id="1标识符"><a class="markdownIt-Anchor" href="#1标识符"></a> 1.标识符</h2><ul><li>指开发者自定义的变量名、函数名、属性等名称。</li><li>JavaScript中的标识符命名规则：<ul><li>由字母、下划线<code>_</code>、美元符号<code>$</code>和数字组成；</li><li>不允许以数字开头；</li><li>不允许使用关键字和保留字定义标识符（如<code>char</code>）。</li></ul></li><li>标识符的常用格式<ul><li>全大写命名法：<code>REDBAG</code>（常用于常量命名）</li><li>驼峰命名法：<code>redBag</code>（常用于函数命名）</li><li>帕斯卡命名法：<code>RedBag</code>（常用于类名和构造器命名）</li><li>下划线命名法：<code>red_bag</code>（常用于变量命名）</li></ul></li></ul><h2 id="2关键字和保留字"><a class="markdownIt-Anchor" href="#2关键字和保留字"></a> 2.关键字和保留字</h2><ul><li>关键字，指JavaScript预先定义好的单词，被赋予了一定的意义。<ul><li>常见关键字：<code>break</code>、<code>case</code>、<code>catch</code>、<code>continue</code>、<code>debugger</code>、<code>default</code>、<code>delete</code>、<code>do</code>、<code>else</code>、<code>finally</code>、<code>for</code>、<code>funciton</code>、<code>if</code>、<code>in</code>、<code>instanceof</code>、<code>new</code>、<code>return</code>、<code>switch</code>、<code>this</code>、<code>throw</code>、<code>try</code>、<code>typeof</code>、<code>var</code>、<code>void</code>、<code>while</code>、<code>with</code>。</li></ul></li><li>保留字，指将来可能使用的关键字，是为js发展空间预留的一些单词。<ul><li>常见保留字：<code>abstract</code>、<code>boolean</code>、<code>byte</code>、<code>char</code>、<code>class</code>、<code>const</code>、<code>double</code>、<code>enum</code>、<code>export</code>、<code>extends</code>、<code>final</code>、<code>float</code>、<code>goto</code>、<code>implements</code>、<code>import</code>、<code>int</code>、<code>interface</code>、<code>long</code>、<code>native</code>、<code>package</code>、<code>private</code>、<code>protected</code>、<code>public</code>、<code>short</code>、<code>static</code>、<code>super</code>、<code>synchronized</code>、<code>throws</code>、<code>transient</code>、<code>volatile</code>。</li></ul></li></ul><h2 id="3变量的声明与赋值"><a class="markdownIt-Anchor" href="#3变量的声明与赋值"></a> 3.变量的声明与赋值</h2><ul><li>与Python类似，JavaScript是一种<strong>弱类型语言</strong>，在声明变量时无需确定变量的数据类型，也可以给变量赋予不同类型的数据，JavaScript会根据上下文自动进行类型转换。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="王铁柱6.为什么说js是弱类型语言，它的优缺点分别是什么？\[EB/OL].(2024-11-28)\[2025-05-13]. https://www.cnblogs.com/ai888/p/18573400.">[1]</span></a></sup></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义变量</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 更改变量数据类型</span><br>a = <span class="hljs-string">&quot;小明&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="4输出方式常用"><a class="markdownIt-Anchor" href="#4输出方式常用"></a> 4.输出方式(常用)</h2><h3 id="1-页面输出"><a class="markdownIt-Anchor" href="#1-页面输出"></a> ① 页面输出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;div&gt;输出的内容&lt;/div&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="20250520081716000.png" alt="" /></p><ul><li>直接将<strong>元素</strong>加载到页面上（加载的不是文字，而是一个<strong>标签</strong>）</li></ul><h3 id="2-控制台输出"><a class="markdownIt-Anchor" href="#2-控制台输出"></a> ② 控制台输出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;输出的内容&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="20250520082256298.png" alt="" /></p><ul><li>在控制台输出内容，多用于打印相关变量的值，进行调试。</li></ul><h3 id="3-弹窗输出"><a class="markdownIt-Anchor" href="#3-弹窗输出"></a> ③ 弹窗输出</h3><h4 id="普通弹窗适用于通知"><a class="markdownIt-Anchor" href="#普通弹窗适用于通知"></a> 普通弹窗(适用于通知)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;输出的内容&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="20250523100337688.png" alt="" /></p><ul><li>多用于触发相关事件时，弹出相应的警告信息(如关闭标签时询问是否保存)。</li></ul><h4 id="选择弹窗多用于询问"><a class="markdownIt-Anchor" href="#选择弹窗多用于询问"></a> 选择弹窗(多用于询问)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> is_confirmed = <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;提示信息&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="20250520083211096.png" alt="" /></p><ul><li>需要确认某项操作，而不仅是通知用户时，使用次方法弹出一个包含&quot;确定&quot;与&quot;取消&quot;按钮的弹窗。<ul><li>用户点击其中某个选项时，会返回<code>true</code>(确定)或<code>false</code>(取消)。</li></ul></li></ul><h4 id="输入弹窗多用于获取信息"><a class="markdownIt-Anchor" href="#输入弹窗多用于获取信息"></a> 输入弹窗(多用于获取信息)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> input_info = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;提示信息&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="20250520083410880.png" alt="" /></p><ul><li>用于提示用户输入一些信息，返回值为输入的内容。</li></ul><h2 id="5在字符串中嵌入变量"><a class="markdownIt-Anchor" href="#5在字符串中嵌入变量"></a> 5.在字符串中嵌入变量</h2><h3 id="1-模版字符串es6推荐使用"><a class="markdownIt-Anchor" href="#1-模版字符串es6推荐使用"></a> ① 模版字符串(<a href="https://www.bookstack.cn/read/es6-3rd/docs-intro.md">ES6</a>推荐使用)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;Alice&#x27;</span>;<br><span class="hljs-keyword">const</span> age = <span class="hljs-number">25</span>;<br><br><span class="hljs-keyword">const</span> message = <span class="hljs-string">`My name is <span class="hljs-subst">$&#123;name&#125;</span> and I&#x27;m <span class="hljs-subst">$&#123;age&#125;</span> years old.`</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message); <br><span class="hljs-comment">// 输出: My name is Alice and I&#x27;m 25 years old.</span><br></code></pre></td></tr></table></figure><h3 id="2-字符串拼接传统方式"><a class="markdownIt-Anchor" href="#2-字符串拼接传统方式"></a> ② 字符串拼接(传统方式)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;Charlie&#x27;</span>;<br><span class="hljs-keyword">const</span> age = <span class="hljs-number">35</span>;<br><br><span class="hljs-keyword">const</span> message = <span class="hljs-string">&#x27;My name is &#x27;</span>.<span class="hljs-title function_">concat</span>(name, <span class="hljs-string">&#x27; and I\&#x27;m &#x27;</span>, age, <span class="hljs-string">&#x27; years old.&#x27;</span>); <span class="hljs-comment">// 可也以用“+”进行连接</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message);<br><span class="hljs-comment">// 输出: My name is Charlie and I&#x27;m 35 years old.</span><br></code></pre></td></tr></table></figure><p>其中，<strong>模版字符串</strong>具有以下优点，一般是最佳的方案：</p><ul><li>更简洁易读</li><li>支持多行字符串</li><li>可以直接嵌入表达式 <code>$&#123;expression&#125;</code></li><li>自动处理类型转换</li></ul><h2 id="6javascript注释"><a class="markdownIt-Anchor" href="#6javascript注释"></a> 6.JavaScript注释</h2><p>js中的注释方式与C/C++类似,使用下面两种格式进行注释：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这是单行注释</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释的第一行</span><br><span class="hljs-comment">多行注释的第二行</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="三-javascript的引入与连接"><a class="markdownIt-Anchor" href="#三-javascript的引入与连接"></a> 三、JavaScript的引入与连接</h1><h2 id="1行内式"><a class="markdownIt-Anchor" href="#1行内式"></a> 1.行内式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 单击按钮出现提示框 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;清除缓存成功！&#x27;)&quot;</span>&gt;</span>清除浏览器缓存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 单击标签出现提示框 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript: alert(&#x27;弹窗内容&#x27;)&quot;</span>&gt;</span>点击这里显示弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>将js代码作为HTML标签的属性值使用。</li></ul><h2 id="2内嵌式"><a class="markdownIt-Anchor" href="#2内嵌式"></a> 2.内嵌式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-comment">&lt;!-- 这里写JavaScript代码 --&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3外链式"><a class="markdownIt-Anchor" href="#3外链式"></a> 3.外链式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js文件路径&quot;</span> [<span class="hljs-attr">async</span> | <span class="hljs-attr">defer</span>]&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>一般将外链js的标签写在<code>&lt;body&gt;</code>的末尾，方便浏览器优先加载网页内容，提高响应速度。</li><li>async属性(可选)表示<strong>异步下载同步执行</strong>,即下载js文件时不阻塞HTML的解析和显示，js文件下载后立即执行。</li><li>defer属性(可选)表示异步下载异步执行，即即下载js文件时不阻塞HTML的解析和显示，等HTML解析渲染完成后再执行文件。</li></ul><h1 id="四-变量与数据类型"><a class="markdownIt-Anchor" href="#四-变量与数据类型"></a> 四、变量与数据类型</h1><h2 id="1变量的声明与赋值"><a class="markdownIt-Anchor" href="#1变量的声明与赋值"></a> 1.变量的声明与赋值</h2><ul><li>与Python类似，JavaScript是一种<strong>弱类型语言</strong>；与C/C++不同，在声明变量时无需确定变量的数据类型，也可以给变量赋予不同类型的数据，JavaScript 会根据上下文自动进行类型转换。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="王铁柱6.为什么说js是弱类型语言，它的优缺点分别是什么？\[EB/OL].(2024-11-28)\[2025-05-13]. https://www.cnblogs.com/ai888/p/18573400.">[1]</span></a></sup></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义变量</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 更改变量数据类型</span><br>a = <span class="hljs-string">&quot;小明&quot;</span>;<br><br><span class="hljs-comment">// 声明一个常量</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PI</span> = <span class="hljs-number">3.1415926</span>;<br></code></pre></td></tr></table></figure><ul><li>ES6以前，声明变量时多用<code>var</code>关键字，格式为<code>var 变量名;</code></li><li>ES6以后，增加了<code>let</code>关键字用于声明便联合，语法格式同样为<code>let 变量名;</code></li><li>声明常量使用<code>const</code>关键字；常量一般用全大写命名，在程序运行中的值不变化。</li><li>使用<code>var</code>与<code>let</code>的区别：<ul><li><code>let</code>支持块作用域(循环体、函数体等)，<code>var</code>不支持。</li><li>在同一个作用域中，<code>var</code>关键字可以重复声明一个变量，而<code>let</code>不可以。</li></ul></li></ul><h2 id="什么是es6"><a class="markdownIt-Anchor" href="#什么是es6"></a> 什么是ES6：</h2><blockquote><p>“ES6（ECMAScript）是由Ecma国际（前身为欧洲计算机制造商协会）通过ECMA-262标<br />准化的脚本程序设计语言。JavaScript和Jscript语言可以理解为ECMAScript的实现和扩<br />展。完整的 JavaScript由三部分组成，分别是ECMAScript、DOM、BOM。2015年6月，<br />ECMAScript 6发布了正式版本。&quot; ——《Web前端技术》P207</p></blockquote><h2 id="2变量的作用域"><a class="markdownIt-Anchor" href="#2变量的作用域"></a> 2.变量的作用域</h2><ul><li>全局变量：在所有函数之外声明的变量。</li><li>局部变量：在函数体重声明的变量，或者函数的形参。</li><li>块级变量：在代码块(循环体、if分支)中声明的变量，只在对应的块中有效。</li></ul><h2 id="3数据类型"><a class="markdownIt-Anchor" href="#3数据类型"></a> 3.数据类型</h2><h3 id="1-undefined类型未定义"><a class="markdownIt-Anchor" href="#1-undefined类型未定义"></a> ① Undefined类型：未定义</h3><ul><li>是JavaScript特有的数据类型，仅有<code>Undefined</code>一种取值，表示未定义的值。</li><li>定义一个变量但未赋值时，变量的值就是<code>undefined</code>。</li></ul><h3 id="2-null类型空"><a class="markdownIt-Anchor" href="#2-null类型空"></a> ② Null类型：空</h3><ul><li>也是JavaScript中特有的数据类型，仅有<code>null</code>一种取值，是一个空的对象指针。</li><li>与<code>Undefined</code>类型相似，<code>null == undefined</code>。</li><li>不同之处在于，<code>null</code>表示变量(或对象)不存在或无效，<code>undefined</code>表示变量没有被赋值。</li></ul><h3 id="3-boolean类型布尔值"><a class="markdownIt-Anchor" href="#3-boolean类型布尔值"></a> ③ Boolean类型：布尔值</h3><ul><li>有两个取值，<code>true</code>（真）与<code>false</code>（假）。</li><li>使用<code>Boolean()</code>方法，可将<code>undefined</code>类型与<code>Null</code>类型的数据转换成<code>false</code>。</li></ul><h3 id="4-number类型数值"><a class="markdownIt-Anchor" href="#4-number类型数值"></a> ④ Number类型：数值</h3><ul><li>JavaScript中，数值不分整数与小数，所有的数值都属于<code>Number</code>类型。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>, b = -<span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> c = <span class="hljs-number">9.85</span>, d = <span class="hljs-number">2.12E5</span>; <span class="hljs-comment">// d的值为2.12 * 100000</span><br><span class="hljs-keyword">var</span> e = <span class="hljs-number">026</span>, f = <span class="hljs-number">0x34</span>;    <span class="hljs-comment">// 分别为8进制(以0开头)与16进制(以0x开头)</span><br></code></pre></td></tr></table></figure><ul><li>使用<code>Number()</code>方法将其他类型的值转换成数值类型，转换规则如下表：</li></ul><table><thead><tr><th>类型</th><th>Number()的值</th></tr></thead><tbody><tr><td>Undefined</td><td>NaN</td></tr><tr><td>Null</td><td>0</td></tr><tr><td>true</td><td>1</td></tr><tr><td>false</td><td>0</td></tr></tbody></table><ul><li><code>NaN</code>的全称为&quot;not a numble&quot;，表示非数字，但本身属<code>Number</code>类型。</li><li>在JavaScript中，将一个数除以0不会报错，而是得到一个<code>NaN</code>的值。</li><li>对<code>NaN</code>进行任何计算操作，结果都是<code>NaN</code>。<code>NaN</code>不等于任何值，包括它本身。<ul><li>因此，判断一个值是否非数字时，不应使用<code>if (a == NaN)</code>，而是使用<code>isNaN(a)</code>方法。</li></ul></li><li>此外，在大数据方向，经常使用<code>Number(Null) = 0</code>的特性来将空值化0。</li></ul><h3 id="5-string类型字符串"><a class="markdownIt-Anchor" href="#5-string类型字符串"></a> ⑤ String类型：字符串</h3><ul><li>是由多个Unicode字符组成的<strong>字符序列</strong>，可由一对单引号（‘’）或双引号（“”），但是需要正确配对。</li><li>常用转义字符见下表：</li></ul><table><thead><tr><th>字符</th><th>含义</th><th>字符</th><th>含义</th><th>字符</th><th>含义</th></tr></thead><tbody><tr><td><code>\'</code></td><td>单引号</td><td><code>\b</code></td><td>退格</td><td><code>\r</code></td><td>回车</td></tr><tr><td><code>\&quot;</code></td><td>双引号</td><td><code>\\</code></td><td>反斜杠</td><td><code>\f</code></td><td>换页</td></tr><tr><td><code>\n</code></td><td>换行</td><td><code>\t</code></td><td>Tab制表符</td><td><code>\e</code></td><td>Esc字符</td></tr></tbody></table><ul><li>使用<code>String()</code>方法将其他类型的值转换成字符串类型的值，转换规则如下表：</li></ul><table><thead><tr><th>类型</th><th>String()的值</th></tr></thead><tbody><tr><td>Undefined</td><td>‘undefined’</td></tr><tr><td>Null</td><td>‘null’</td></tr><tr><td>true</td><td>‘true’</td></tr><tr><td>false</td><td>‘false’</td></tr></tbody></table><h1 id="五-运算符"><a class="markdownIt-Anchor" href="#五-运算符"></a> 五、运算符</h1><h2 id="1算数运算符与逻辑运算符"><a class="markdownIt-Anchor" href="#1算数运算符与逻辑运算符"></a> 1.算数运算符与逻辑运算符</h2><ul><li>与C/C++类似，JavaScript中同样有<code>+、-、*、/、%、++、--、+=、=</code>等算数运算符与赋值运算符，且用法相同，此处省略。</li></ul><h2 id="2比较运算符"><a class="markdownIt-Anchor" href="#2比较运算符"></a> 2.比较运算符</h2><ul><li><code>&lt;、&gt;、&lt;=、&gt;=</code>的用法与C/C++相同。</li><li>与C/C++不同的是，JavaSCript中除了使用<code>==、!=</code>进行比较，还支持<code>===、!===</code>的比较运算符。<ul><li>前者在比较时会进行<strong>隐式类型转换</strong>，即将两者转换成相同的数据类型后再进行数值的比较。</li><li>后者不会进行隐式类型转换，且在比较数值以外，还会比较二者的数据类型是否相同。</li></ul></li></ul><h2 id="3条件运算符"><a class="markdownIt-Anchor" href="#3条件运算符"></a> 3.条件运算符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">max = a &gt; b ? a : b;<br><span class="hljs-comment">// 变量 = 表达式 ？ 为真时的返回值 ： 为假时的返回值；</span><br></code></pre></td></tr></table></figure><ul><li>即C语言中的<strong>问号表达式</strong>，用法相同。</li></ul><h2 id="4逻辑运算符"><a class="markdownIt-Anchor" href="#4逻辑运算符"></a> 4.逻辑运算符</h2><ul><li>分别用<code>&amp;&amp;</code>、<code>||</code>与<code>!</code>表示逻辑与、逻辑或和逻辑非。</li></ul><h1 id="六-流程控制语句"><a class="markdownIt-Anchor" href="#六-流程控制语句"></a> 六、流程控制语句</h1><p>JavaScript的流程控制语句语法与C/C++基本相同，此处只给出语法实例。</p><h2 id="1选择语句"><a class="markdownIt-Anchor" href="#1选择语句"></a> 1.选择语句</h2><h3 id="1-if语句"><a class="markdownIt-Anchor" href="#1-if语句"></a> ① if语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (条件<span class="hljs-number">1</span>) &#123;<br>操作<span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件<span class="hljs-number">2</span>) &#123;<br>操作<span class="hljs-number">2</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>操作<span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-switch语句"><a class="markdownIt-Anchor" href="#2-switch语句"></a> ② switch语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">switch</span> (变量) &#123;<br><span class="hljs-keyword">case</span> 取值<span class="hljs-number">1</span>:<br>操作<span class="hljs-number">1</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> 取值<span class="hljs-number">2</span>:<br>操作<span class="hljs-number">2</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-attr">default</span>:<br>操作<span class="hljs-number">3</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意：此语句使用<code>===</code>进行匹配，即需要确保<code>case</code>中的数据类型与<code>switch</code>的相同，例如：<ul><li><code>switch(字符型变量) &#123;case &quot;1&quot;…… case &quot;2&quot;……&#125;</code></li><li><code>switch(Number(字符型变量)) &#123;case 1…… case 2……&#125;</code></li></ul></li></ul><h2 id="2循环语句"><a class="markdownIt-Anchor" href="#2循环语句"></a> 2.循环语句</h2><h3 id="1-for语句"><a class="markdownIt-Anchor" href="#1-for语句"></a> ① for语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// C/C++风格：</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>循环体<br>&#125;<br><br><span class="hljs-comment">// Python风格：</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> name <span class="hljs-keyword">in</span> names) &#123;    <span class="hljs-comment">// 可以遍历数组的元素和对象的属性</span><br>循环体<br>&#125;<br><span class="hljs-comment">// 例：遍历输出窗口(window对象)上的所有属性：</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> name <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>多用于明确循环次数的场景</li><li><code>for(;;) &#123;&#125;</code>的写法构成死循环，若无跳出逻辑会导致后续脚本无法执行。</li></ul><h3 id="2-while语句"><a class="markdownIt-Anchor" href="#2-while语句"></a> ② while语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">while</span>(循环条件) &#123;<br>循环体<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>多用于不明确循环次数的场景，或需要根据循环中的状态灵活决定是否继续循环的场景。</li></ul><h3 id="3-do-while语句"><a class="markdownIt-Anchor" href="#3-do-while语句"></a> ③ do-while语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">do</span> &#123;<br>循环体<br>&#125; <span class="hljs-keyword">while</span>(循环条件)<br></code></pre></td></tr></table></figure><ul><li><code>while</code>循环可能一次都不进行，但<code>do-while</code>语句至少执行一次。</li></ul><h2 id="3跳转语句"><a class="markdownIt-Anchor" href="#3跳转语句"></a> 3.跳转语句</h2><h3 id="1-break语句"><a class="markdownIt-Anchor" href="#1-break语句"></a> ① break语句</h3><p>用于跳出所在的一层循环</p><h3 id="2-continue语句"><a class="markdownIt-Anchor" href="#2-continue语句"></a> ② continue语句</h3><p>用于终止此轮循环，立即跳转到判断是否进行下一轮循环</p><h1 id="七-函数"><a class="markdownIt-Anchor" href="#七-函数"></a> 七、函数</h1><h2 id="1-函数的定义与调用"><a class="markdownIt-Anchor" href="#1-函数的定义与调用"></a> 1. 函数的定义与调用</h2><h3 id="1-函数声明"><a class="markdownIt-Anchor" href="#1-函数声明"></a> ① 函数声明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数声明</span><br><span class="hljs-keyword">function</span> 函数名(形参列表) &#123;     <span class="hljs-comment">// 无需指明变量类型，直接写形参名，如(para1, para2)</span><br>函数体<br><span class="hljs-keyword">return</span> 返回值;<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(函数名(实参列表));<br></code></pre></td></tr></table></figure><ul><li>这种写法会被提升(hoisting)，即可以在定义前调用</li></ul><h3 id="2-函数表达式"><a class="markdownIt-Anchor" href="#2-函数表达式"></a> ② 函数表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数表达式</span><br><span class="hljs-keyword">const</span> 函数名 = <span class="hljs-keyword">function</span>(<span class="hljs-params">形参列表</span>) &#123;<br>函数体<br><span class="hljs-keyword">return</span> 返回值;<br>&#125;;<br><br><span class="hljs-comment">// 另一种写法:直接使用function语句进行定义</span><br><span class="hljs-keyword">function</span> 函数名(形参列表) &#123;<br>函数体<br><span class="hljs-keyword">return</span> 返回值;<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(函数名(实参列表));<br></code></pre></td></tr></table></figure><ul><li>这种写法不会被提升</li></ul><h3 id="3-函数的嵌套与递归"><a class="markdownIt-Anchor" href="#3-函数的嵌套与递归"></a> ③ 函数的嵌套与递归</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 嵌套：在函数中定义另一个函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">putOut</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">putIn</span>(<span class="hljs-params">x, y</span>) &#123;<br><span class="hljs-title function_">alert</span>(x + y);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">putIn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-comment">// 递归：在函数体中调用函数本身</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>) &#123;<br><span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> n * <span class="hljs-title function_">factorial</span>(n - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2箭头函数"><a class="markdownIt-Anchor" href="#2箭头函数"></a> 2.箭头函数</h2><ul><li>箭头函数（Arrow Functions）是ES6引入的一种更简洁的函数语法形式。它使用 <code>=&gt;</code> 符号定义函数：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">a, b</span>) =&gt; &#123;        <span class="hljs-comment">// 定义add函数，返回两参之和</span><br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-comment">// 单参数时可省略括号</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">square</span> = x =&gt; &#123;          <span class="hljs-comment">// 定义square函数，返回二次幂</span><br><span class="hljs-keyword">return</span> x * x;<br>&#125;<br><br><span class="hljs-comment">// 函数体只有一行时，可以直接写成</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">sqare</span> = x =&gt; x * x;<br><br><span class="hljs-comment">// 无参数时，需要写空括号</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">greet</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello!&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>箭头函数没有自己的 <code>this</code>，继承自外围作用域。</li><li>常用在回调函数中，如数组方法、事件处理等。</li></ul><h2 id="3回调函数"><a class="markdownIt-Anchor" href="#3回调函数"></a> 3.回调函数</h2><ul><li>回调函数是指<strong>作为参数传递给另一个函数，并在该函数内部被调用的函数</strong>。回调函数允许我们在某个操作完成或某个事件发生后执行特定的代码。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 简单的回调函数示例</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name, callback</span>) &#123;     <span class="hljs-comment">// 第二个参数是函数，这个参数在该函数的末尾被调用，即为回调函数</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Hello, <span class="hljs-subst">$&#123;name&#125;</span>!`</span>);<br>  <span class="hljs-title function_">callback</span>(); <span class="hljs-comment">// 调用回调函数</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayGoodbye</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Goodbye!&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_">greet</span>(<span class="hljs-string">&#x27;Alice&#x27;</span>, sayGoodbye); <span class="hljs-comment">// 将sayGoodbye作为回调函数传入</span><br></code></pre></td></tr></table></figure><h3 id="javascript中回调函数的特点"><a class="markdownIt-Anchor" href="#javascript中回调函数的特点"></a> JavaScript中回调函数的特点</h3><ul><li>异步编程的核心机制：定时器、文件读写、网络请求等</li><li>函数可以像变量一样被传递、赋值和返回</li><li>控制反转：被调用方决定何时调用回调函数</li><li>多层嵌套回调，也会导致代码难以阅读和维护（Callback Hell，回调地狱）</li></ul><h1 id="八-对象"><a class="markdownIt-Anchor" href="#八-对象"></a> 八、对象</h1><blockquote><p>在实际编程中，不仅存在来自客观世界的具体对象，还存在着一些为了解决问题引入的，较为抽象的对象。对象可以理解为属性和方法的集合，用户通过操作方法，访问或设置对象的属性，从而实现不同的功能。</p></blockquote><h2 id="1对象的创建"><a class="markdownIt-Anchor" href="#1对象的创建"></a> 1.对象的创建</h2><h3 id="1-直接创建对象"><a class="markdownIt-Anchor" href="#1-直接创建对象"></a> ① 直接创建对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 对象名 = &#123;<br>属性: 值;<br><br>方法: <span class="hljs-keyword">function</span>(<span class="hljs-params">参数列表</span>) &#123;<br>方法体<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这种写法注意不要把方法的定义写成<code>方法(): function &#123;&#125;</code></li></ul><h3 id="2-通过自定义构造函数创建对象"><a class="markdownIt-Anchor" href="#2-通过自定义构造函数创建对象"></a> ② 通过自定义构造函数创建对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> 对象名 (参数列表) &#123;<br><span class="hljs-variable language_">this</span>.属性 = 值;<br><br><span class="hljs-variable language_">this</span>.方法 = <span class="hljs-keyword">function</span>(<span class="hljs-params">参数列表</span>) &#123;<br>方法体<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用构造函数定义对象：</span><br><span class="hljs-keyword">var</span> 对象 = <span class="hljs-keyword">new</span> 对象名(参数列表);<br></code></pre></td></tr></table></figure><ul><li>特征：使用<code>this</code>标识出内部的函数为<strong>构造函数</strong><ul><li>它们的参数多用于创建和初始化对象，而不是用于计算</li></ul></li></ul><h3 id="3-通过object对象创建对象"><a class="markdownIt-Anchor" href="#3-通过object对象创建对象"></a> ③ 通过<code>Object对象</code>创建对象</h3><ul><li><code>object对象</code>是JavaScript的内部对象，通过这样的对象来创建对象不需要定义构造函数，并且可以随时对其添加属性。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 对象名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(参数列表)<br><br><span class="hljs-comment">// 例：通过Object对象定义一个user对象：</span><br><span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title function_">object</span>();            <span class="hljs-comment">// 先定义一个空对象</span><br>user.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;张三&quot;</span>;                  <span class="hljs-comment">// 添加属性</span><br>user.<span class="hljs-property">age</span> = <span class="hljs-number">20</span>;<br>user.<span class="hljs-property">show</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;            <span class="hljs-comment">// 添加方法</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;姓名：&quot;</span> + user.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;年龄：&quot;</span> + user.<span class="hljs-property">age</span> + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2对象的访问"><a class="markdownIt-Anchor" href="#2对象的访问"></a> 2.对象的访问</h2><h3 id="1-forin语句"><a class="markdownIt-Anchor" href="#1-forin语句"></a> ① for……in语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (变量 <span class="hljs-keyword">in</span> 对象) &#123;<br>循环体<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>变量用于存储某个对象的所有属性名，使用此语句输出对象的属性时，需要使用数组(<code>对象[&quot;属性&quot;]</code>)的方式，而不是<code>对象.属性</code>的方式，如下所示：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a <span class="hljs-keyword">in</span> user) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user[a]);     <span class="hljs-comment">// 不能写成 user.a !</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-with语句"><a class="markdownIt-Anchor" href="#2-with语句"></a> ② with语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">with</span> (对象名) &#123;<br>语句<br>&#125;<br><br><span class="hljs-comment">// 这种写法可以省略多次书写对象名和句点，如下所示：</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user.<span class="hljs-property">name</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user.<span class="hljs-property">age</span>);<br><span class="hljs-comment">// 等价于如下写法：</span><br><span class="hljs-title function_">with</span> (user) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3常用的内置對象"><a class="markdownIt-Anchor" href="#3常用的内置對象"></a> 3.常用的内置對象</h2><h3 id="1-string对象字符串"><a class="markdownIt-Anchor" href="#1-string对象字符串"></a> ① String对象：字符串</h3><ul><li>用于存储和处理字符串（文本），常用属性与方法见下表：</li><li><strong>所有的方法都不能改变原字符串的内容，而是将结果作为方法的返回值给出。</strong></li></ul><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>获取字符串的长度</td></tr><tr><td>replace(旧字符， 新字符)</td><td>使用新字符替换字符串中首次出现的旧字符</td></tr><tr><td>replaceAll(旧字符， 新字符)</td><td>使用新字符替换字符串中所有的旧字符</td></tr><tr><td>indexOf(目标字符)</td><td>获取目标字符在字符串中首次出现的位置</td></tr><tr><td>lastIndexOf(目标字符)</td><td>获取目标字符在字符串中最后出现的位置</td></tr><tr><td>subString(起始位置， 结束位置)</td><td>截取两个位置之间的子字符串，结束位置可省略</td></tr><tr><td>toLowerCase()</td><td>将字符串的所有字符变为小写</td></tr><tr><td>toUpperCase()</td><td>将字符串的所有字符变为大写</td></tr><tr><td>split(分隔符， 数组长度)</td><td>使用分隔符将字符串分隔为指定长度的数组，规则如下所示</td></tr><tr><td>trim()</td><td>去掉字符串中首尾的空格</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">str = <span class="hljs-string">&quot;This is a string&quot;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;s&quot;</span>));<br><span class="hljs-comment">// 输出[&quot; Thi&quot;, &quot; i&quot;, &quot; a&quot;, &quot; tring&quot;]</span><br><span class="hljs-variable language_">console</span>,<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-number">2</span>));<br><span class="hljs-comment">// 输出[&quot; Thi&quot;, &quot; i&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="2-date对象日期"><a class="markdownIt-Anchor" href="#2-date对象日期"></a> ② Date对象：日期</h3><ul><li>常用于对时间进行处理，常用属性和方法见下表：</li></ul><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>now()</td><td>返回自1970-01-01 00:00:00到当前时间的毫秒数（静态方法）</td></tr><tr><td>getTime()</td><td>返回自1970-01-01 00:00:00到当前时间的毫秒数</td></tr><tr><td>getTime(时间值)</td><td>设置时间</td></tr><tr><td>getFullYear()</td><td>获取四位数字的当前年份，如2025</td></tr><tr><td>setFullYear(年分值)</td><td>设置年份</td></tr><tr><td>getMonth()</td><td>获取当前月份，取值为0~11（加1才是当前月份）</td></tr><tr><td>setMonth(月份值)</td><td>设置月份</td></tr><tr><td>getDate()</td><td>获取当前日期，取值为1~31</td></tr><tr><td>setDate(日期值)</td><td>设置日期</td></tr><tr><td>getDay()</td><td>获取当前是周几，取值为0~6</td></tr><tr><td>getHours()</td><td>获取当前小时数，取值为0~23</td></tr><tr><td>setHours()</td><td>设置小时数</td></tr><tr><td>getMinutes()</td><td>获取当前分钟数，取值为0~59</td></tr><tr><td>setMinutes()</td><td>设置秒数</td></tr><tr><td>getSeconds()</td><td>获取当前分钟数，取值为0~59</td></tr><tr><td>setSeconds()</td><td>设置分钟数</td></tr><tr><td>getMilliseconds()</td><td>获取当前毫秒数，取值为0~999</td></tr><tr><td>setMilliseconds()</td><td>设置毫秒数</td></tr></tbody></table><h3 id="3-math对象数学"><a class="markdownIt-Anchor" href="#3-math对象数学"></a> ③ Math对象：数学</h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>PI</td><td>圆周率，值为3.141592653589793</td></tr><tr><td>random()</td><td>获取一个0~1的随机数</td></tr><tr><td>ceil(x)</td><td>取大于原数的最小整数，如3.4 -&gt; 4</td></tr><tr><td>floor(x)</td><td>取小于原数的最大整数，如3.4 -&gt; 3</td></tr><tr><td>round(x)</td><td>获取x四舍五入后的整数</td></tr><tr><td>abs(x)</td><td>获取x的绝对值</td></tr><tr><td>max(x1, x2, x3，···)</td><td>取最大值</td></tr><tr><td>min(x1, x2, x3，···)</td><td>取最小值</td></tr><tr><td>pow(基数, 指数)</td><td>计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>基</mtext><msup><mtext>数</mtext><mtext>指数</mtext></msup></mrow><annotation encoding="application/x-tex">基数^{指数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord cjk_fallback">基</span><span class="mord"><span class="mord cjk_fallback">数</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">指</span><span class="mord cjk_fallback mtight">数</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td>sqrt(x)</td><td>计算x的平方根</td></tr></tbody></table><h1 id="九-数组"><a class="markdownIt-Anchor" href="#九-数组"></a> 九、数组</h1><h2 id="1定义数组"><a class="markdownIt-Anchor" href="#1定义数组"></a> 1.定义数组</h2><h3 id="1-使用array对象"><a class="markdownIt-Anchor" href="#1-使用array对象"></a> ① 使用Array对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">var</span> fruits = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;pear&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>);<br><br><span class="hljs-comment">// 复合类型的数组定义</span><br><span class="hljs-keyword">var</span> scentence = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;have&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;apples.That is&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;.&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>其中，关键字<code>new</code>在定义数组时可以省略，如<code>var nums = Array(1, 2, 3);</code>。但考虑到规范性，不建议省略<code>new</code>。</li></ul><h3 id="2-使用-定义"><a class="markdownIt-Anchor" href="#2-使用-定义"></a> ② 使用“[ ]”定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;pear&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>];<br><br><span class="hljs-keyword">var</span> scentence = [<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;have&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;apples.That is&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;.&quot;</span>];<br></code></pre></td></tr></table></figure><blockquote><p>使用Array对象与使用[]符号定义数组的区别：</p><ul><li>前者可通过传入数值参数定义数组长度，如<code>new Array(2)</code>。</li><li>后者可定义包含空值的数组，如<code>var array = [1, , 2, 3]</code>。</li></ul></blockquote><h2 id="2数组元素操作"><a class="markdownIt-Anchor" href="#2数组元素操作"></a> 2.数组元素操作</h2><h3 id="1-输出数组元素"><a class="markdownIt-Anchor" href="#1-输出数组元素"></a> ① 输出数组元素</h3><ul><li>// 与Python类似，直接打印数组，即可输出数组中的所有元素：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>(nums); <br><span class="hljs-comment">// 弹窗输出：1, 2, 3</span><br><span class="hljs-title function_">alert</span>(nims[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">// 弹窗输出：2</span><br></code></pre></td></tr></table></figure><ul><li>若数组下标越界，输出<code>undefined</code>。</li></ul><h3 id="2-遍历数组元素"><a class="markdownIt-Anchor" href="#2-遍历数组元素"></a> ② 遍历数组元素</h3><ul><li>for循环实现，略。</li></ul><h3 id="3-数组元素增删"><a class="markdownIt-Anchor" href="#3-数组元素增删"></a> ③ 数组元素增删</h3><ul><li>增加元素：直接对数组的新下标赋值</li><li>删除元素：使用delete关键字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-title function_">alert</span>(nums);            <span class="hljs-comment">// 输出1, 2, 3</span><br><br>nums[<span class="hljs-number">3</span>] = <span class="hljs-number">4</span>;<br>nums[<span class="hljs-number">4</span>] = <span class="hljs-number">5</span>;<br><span class="hljs-title function_">alert</span>(nums);            <span class="hljs-comment">// 输出1, 2, 3, 4, 5</span><br><br><span class="hljs-keyword">delete</span> nums[<span class="hljs-number">0</span>];<br><span class="hljs-title function_">alert</span>(nums);            <span class="hljs-comment">// 输出2, 3, 4, 5</span><br></code></pre></td></tr></table></figure><h3 id="4-数组的属性和方法"><a class="markdownIt-Anchor" href="#4-数组的属性和方法"></a> ④ 数组的属性和方法</h3><table><thead><tr><th>名称/方法</th><th>说明</th></tr></thead><tbody><tr><td><code>length</code></td><td>获取数组的长度。</td></tr><tr><td><code>concat(arr1[, arr2, ..., arrN])</code></td><td>连接两个或多个数组，返回一个新数组，不会改变现有的数组。</td></tr><tr><td><code>push(item1[, item2, ..., itemX])</code></td><td>向数组末尾添加一个或多个元素，并返回新的数组长度。</td></tr><tr><td><code>unshift(item1[, item2, ..., itemX])</code></td><td>向数组开头添加一个或多个元素，并返回新的数组长度。</td></tr><tr><td><code>pop()</code></td><td>删除数组的最后一个元素，并返回该元素。</td></tr><tr><td><code>shift()</code></td><td>删除数组的第一个元素，并返回该元素。</td></tr><tr><td><code>splice(位置[, 数量, 元素1, ..., 元素])</code></td><td>在指定位置添加或删除指定数量的元素。</td></tr><tr><td><code>reverse()</code></td><td>反转数组中元素的顺序。</td></tr><tr><td><code>sort([sortby])</code></td><td>对数组元素排序。<code>sortby</code>为可选排序函数。</td></tr><tr><td><code>slice([start, end])</code></td><td>返回选中的元素组成的新数组。<code>start</code>和<code>end</code>为可选起止位置（负数表示从末尾计算）。</td></tr><tr><td><code>join([separator])</code></td><td>将数组元素连接成字符串。<code>separator</code>为可选分隔符（默认逗号）。</td></tr></tbody></table><h1 id="十-dom"><a class="markdownIt-Anchor" href="#十-dom"></a> 十、DOM</h1><blockquote><p>DOM(ducoment object model,文本档对象模型)为开发者提供了操作HTML元素和文档节点的属性和方法。 --《Web前端技术》P250</p></blockquote><h2 id="1dom概述"><a class="markdownIt-Anchor" href="#1dom概述"></a> 1.DOM概述</h2><ul><li>DOM是**W3C(万维网联盟)**组织定义的一个标准，定义了访问文档的标准：“W3C DOM是中立于平台和语言的接口，允许程序和脚本动态地访问、更新文档的内容、结构和样式。”</li><li>在JavaScript中，一个HTML文档是一个树状结构，其中的元素、属性、文本等不同的内容在内存中转换成DOM树种相应类型的节点(node)。在DOM中，有以下的对应关系：</li></ul><table><thead><tr><th style="text-align:center">HTML</th><th style="text-align:center">DOM</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">文档自身</td><td style="text-align:center">document节点</td><td style="text-align:center">访问和修改网页的结构</td></tr><tr><td style="text-align:center">标签</td><td style="text-align:center">元素节点</td><td style="text-align:center">访问和修改网页的内容</td></tr><tr><td style="text-align:center">属性</td><td style="text-align:center">属性节点</td><td style="text-align:center">访问和修改网页的样式</td></tr><tr><td style="text-align:center">文本</td><td style="text-align:center">文本节点</td><td style="text-align:center">访问和修改网页的内容</td></tr></tbody></table><ul><li><p>HTML代码及对应的DOM树结构如下图所示：<br /><img src="20250630002900286.png" alt="" /></p></li><li><p>DOM提供了操作HTML元素和文档节点的属性和方法，在实际场景下有如下常见应用：</p><ul><li><strong>修改</strong>：全局替换内容（学校更名，需要全局替换网站所有内容中的校名字段）</li><li><strong>读取</strong>：爬虫程序，抓取网页元素</li><li><strong>动态</strong>：动态修改网页的内容或样式</li></ul></li></ul><h2 id="2html元素操作"><a class="markdownIt-Anchor" href="#2html元素操作"></a> 2.HTML元素操作</h2><h3 id="1-获取元素"><a class="markdownIt-Anchor" href="#1-获取元素"></a> ① 获取元素</h3><ul><li>通常利用document对象中的方法来获取HTML文档中的元素。</li></ul><table><thead><tr><th>名称</th><th>说明</th><th>输出内容</th></tr></thead><tbody><tr><td>getElementById(id值)</td><td>此处Element后没有复数后缀s，说明通过id获取的是<strong>唯一</strong>的元素</td><td>整个标签</td></tr><tr><td>getElementsByName(name值)</td><td>获取<strong>所有</strong>指定name属性的HTML元素</td><td>获取到的节点数组，其中的元素为标签名，如a、span等</td></tr><tr><td>getElementsByTagName(标签名)</td><td>获取<strong>所有</strong>指定标签的HTML元素</td><td>输出获取到的标签组合(HTMLColletion)</td></tr><tr><td>getElementsByClassName(类名)</td><td>获取<strong>所有</strong>指定class属性的HTML元素</td><td>输出获取到的标签组合(HTMLColletion)</td></tr><tr><td>querySelectorAll(选择器名)</td><td>获取<strong>所有</strong>被选择器选中的HTML元素</td><td></td></tr></tbody></table><ul><li>实用技巧：将获取到的节点数组赋给一个变量，通过数组下标来访问和操作数组中的标签元素。</li></ul><h3 id="2-操作元素内容"><a class="markdownIt-Anchor" href="#2-操作元素内容"></a> ② 操作元素内容</h3><ul><li>原理：直接修改元素样式的属性及属性值</li><li>在开发中，通常需要获取和修改元素的内容，DOM提供了以下属性和方法来操作元素内容：</li></ul><table><thead><tr><th>名称</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>innerText</td><td>返回或设置指定元素内<strong>去除所有标签和样式</strong>的<strong>文本</strong>内容</td><td>前者可赋值给变量，后者可修改元素内容</td></tr><tr><td>innerHTML</td><td>返回或设置指定<strong>元素开始和结束标签</strong>中间的<strong>HTML</strong>内容</td><td>innerText属性不会获取到&lt;script&gt;标签中的内容，此属性可以</td></tr><tr><td>textContent</td><td>返回或指定元素的文本内容</td><td></td></tr><tr><td>write()</td><td>在文档中写入对应HTML内容</td><td>一般直接使用<code>xxx.innerText = xxx</code>的形式直接修改内容，此方法使用较少</td></tr><tr><td>writeln()</td><td>在文档中写入对应HTML内容并换行</td><td>同上，此方法使用较少</td></tr></tbody></table><h3 id="3-操作元素样式"><a class="markdownIt-Anchor" href="#3-操作元素样式"></a> ③ 操作元素样式</h3><ul><li>原理：修改元素的类名列表来让不同的CSS选择器匹配，实现对样式属性的修改</li><li>DOM提供了两种操作元素样式的方式，分别是<code>style属性</code>和<code>class属性</code>。</li></ul><h4 id="通过style属性"><a class="markdownIt-Anchor" href="#通过style属性"></a> 通过style属性</h4><ul><li>CSS中的属性名以-为间隔，在DOM中采用驼峰命名法来设置元素的style属性，如<code>text-align</code> -&gt; <code>textAlign</code></li><li>通过<code>a.style.属性</code>可以访问或设置元素的样式，例：<code>a.style.width = 420px;</code></li><li>style属性的一些常用属性与方法见下表：</li></ul><table><thead><tr><th>名称</th><th>属性</th><th>名称</th><th>属性</th></tr></thead><tbody><tr><td>width</td><td>宽度</td><td>display</td><td>可见性</td></tr><tr><td>height</td><td>高度</td><td>position</td><td>位置</td></tr><tr><td>color</td><td>字体颜色</td><td>border</td><td>边框</td></tr><tr><td>backgroundColor</td><td>背景颜色</td><td>fontsize</td><td>字体大小</td></tr><tr><td>marginTop</td><td>元素顶部外边距</td><td>overflow</td><td>溢出显示方法</td></tr><tr><td>paddingTop</td><td>元素顶部内边距</td><td>transform</td><td>2D或3D变形</td></tr><tr><td>top</td><td>元素相对顶部位置</td><td></td><td></td></tr></tbody></table><h4 id="通过class属性"><a class="markdownIt-Anchor" href="#通过class属性"></a> 通过class属性</h4><ul><li>使用元素的classList属性获取元素的类选择器列表</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 例如，HTML中有元素&lt;a id=&quot;target&quot; class=&quot;bg box hover&quot;&gt;&lt;/a&gt;</span><br><br>tar_element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;target&quot;</span>);<br><span class="hljs-title function_">alert</span>(tar_element.<span class="hljs-property">classList</span>);    <span class="hljs-comment">// 输出：bg box hover</span><br></code></pre></td></tr></table></figure><ul><li>classList的一些属性和方法见下表：</li></ul><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>返回classList的长度</td></tr><tr><td>value</td><td>返回classList的所有元素，用空格分开</td></tr><tr><td>add(类名)</td><td>添加指定的类名到元素的class属性中</td></tr><tr><td>remove(类名)</td><td>从元素的class属性中去除指定的类名</td></tr><tr><td>toggle(类名)</td><td>若存在则删去，不存在则添加</td></tr><tr><td>replace(旧类名, 新类名)</td><td>使用新类名取代原有的类名</td></tr><tr><td>contains(类名)</td><td>判断元素的classList中是否已有某类名，返回布尔结果</td></tr></tbody></table><h4 id="应用实例"><a class="markdownIt-Anchor" href="#应用实例"></a> 应用实例</h4><ul><li><p>在某软件的导航栏中，需要实现页面在最顶端时，导航栏透明；页面向下滚动时导航栏变成蓝色，当页面向上滚动回到顶部时，导航栏又恢复透明。</p><ul><li>实现思路：为导航栏编写一个向下滚动的hover类样式，添加JavaScript事件，检测到页面滚动时将hover类样式添加到导航栏的标签中或从导航栏标签中移除。</li></ul></li><li><p>HTML中的导航栏元素：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main-nav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>CSS中定义的样式：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#main-nav</span> &#123;<br><span class="hljs-attribute">background-color</span>: transparent;<br>    <span class="hljs-attribute">transition-duration</span>: <span class="hljs-number">500ms</span>;<br>&#125;<br><br><span class="hljs-selector-id">#main-nav</span><span class="hljs-selector-class">.scrolled</span> &#123;    <span class="hljs-comment">/*页面发生滚动（不在顶端）*/</span><br><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">100</span>, <span class="hljs-number">203</span>, <span class="hljs-number">255</span>);<br>    <span class="hljs-attribute">transition-duration</span>: <span class="hljs-number">500ms</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过事件和DOM实现动态向导航栏标签中添加/移除scrolled类：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 事件：主页向下滚触发的导航栏渐变动画</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> nav = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;main-nav&#x27;</span>);<br>  <span class="hljs-title function_">checkScroll</span>();<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, checkScroll);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkScroll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">scrollY</span> &gt; <span class="hljs-number">50</span>) &#123;<br>  <span class="hljs-comment">// 向下滚动超过50，添加scrolled类到导航栏标签中</span><br>      nav.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;scrolled&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 滚动回顶部，移除scrolled类到导航栏标签中</span><br>      nav.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;scrolled&#x27;</span>);<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-操作元素属性"><a class="markdownIt-Anchor" href="#4-操作元素属性"></a> ④ 操作元素属性</h3><ul><li>常用属性与方法见下表：</li></ul><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>attributes</td><td>获取元素的所有属性，返回元素的属性集合</td></tr><tr><td>getAttribute(属性名)</td><td>返回指定属性的属性值</td></tr><tr><td>setAttributes(属性名，值)</td><td>将指定属性设置为某个值</td></tr><tr><td>removeAttribute(属性名)</td><td>删除指定的属性</td></tr><tr><td>hasAttribute(属性名)</td><td>查询元素是否包含某个属性，返回布尔值结果</td></tr></tbody></table><h2 id="3dom节点操作"><a class="markdownIt-Anchor" href="#3dom节点操作"></a> 3.DOM节点操作</h2><h3 id="1-获取节点"><a class="markdownIt-Anchor" href="#1-获取节点"></a> ① 获取节点</h3><ul><li>DOM提供了一些属性用于获取HTML文档中的节点(元素、属性、文本等不同的内容)</li></ul><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>childNodes</td><td>获取当前节点的所有子节点</td></tr><tr><td>firstChild</td><td>获取当前节点的第一个子节点</td></tr><tr><td>lastChild</td><td>获取当前节点的最后一个子节点</td></tr><tr><td>previousSibling</td><td>获取当前节点的前一个兄弟节点</td></tr><tr><td>nextSinling</td><td>获取当前节点的后一个兄弟节点</td></tr><tr><td>parentNode</td><td>获取当前节点的兄弟节点</td></tr><tr><td>nodeName</td><td>获取当前节点的节点名称</td></tr><tr><td>nodeType</td><td>获取当前节点的类型</td></tr><tr><td>nodeValue</td><td>获取当前节点的值</td></tr></tbody></table><ul><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// HTML中有元素&lt;span id=&quot;target&quot;&gt;span标签&lt;/span&gt;</span><br>span_element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getEllementById</span>(<span class="hljs-string">&quot;target&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(span_element.<span class="hljs-property">nodeName</span>);   <span class="hljs-comment">// 控制台输出：SPAN</span><br></code></pre></td></tr></table></figure><h3 id="2-增加节点"><a class="markdownIt-Anchor" href="#2-增加节点"></a> ② 增加节点</h3><ul><li>DOM提供了一些方法用于增加节点：</li></ul><table><thead><tr><th>所属对象</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>document</td><td>createElement()</td><td>创建并返回元素节点</td></tr><tr><td></td><td>createTextNode()</td><td>创建并返回文本节点</td></tr><tr><td></td><td>createComment()</td><td>创建并返回注释节点</td></tr><tr><td></td><td>createAttribute()</td><td>创建并返回属性节点</td></tr><tr><td>element</td><td>appendChild()</td><td>在子节点列表尾部添加节点</td></tr><tr><td></td><td>insertBefore()</td><td>在当前节点之前添加节点</td></tr><tr><td></td><td>replaceChild()</td><td>替换当前节点</td></tr><tr><td></td><td>setAttributeNode()</td><td>设置或改变指定名称的属性节点</td></tr><tr><td></td><td>getAttributeNode()</td><td>获取指定名称的属性节点</td></tr></tbody></table><h3 id="3-删除节点"><a class="markdownIt-Anchor" href="#3-删除节点"></a> ③ 删除节点</h3><ul><li>DOM提供了两个方法来删除节点：<ul><li><code>removeChild()</code>：删除指定的元素节点</li><li><code>removeAttributeNode()</code>：删除指定属性节点</li></ul></li></ul><h1 id="十一-bom"><a class="markdownIt-Anchor" href="#十一-bom"></a> 十一、BOM</h1><h2 id="1bom概述"><a class="markdownIt-Anchor" href="#1bom概述"></a> 1.BOM概述</h2><blockquote><p>BOM(browser object model,浏览器对象模型)提供了独立于内容的、可与浏览器窗口进行互动的对象结构，方便使用浏览器开放的功能实现更强大的网站。 --《Web前端技术》P250</p></blockquote><ul><li>BOM的结构如下图所示：<br /><img src="20250701111045475.jpg" alt="" /></li><li>BOM由多个对象组成，其核心对象是window，其它内置对象都以属性的形式附属在window对象之下。<ul><li>BOM的window对象所包含的document属性就是对DOM的document对象的引用。</li></ul></li></ul><h2 id="2window对象浏览器打开的窗口"><a class="markdownIt-Anchor" href="#2window对象浏览器打开的窗口"></a> 2.window对象：浏览器打开的窗口</h2><ul><li>window对象表示浏览器打开的窗口。如果HTML文档中包含<code>&lt;frame&gt;</code>或<code>&lt;iframe&gt;</code>标签，浏览器将会对每个框架创建一个window对象，并将它们放在frames集合中。</li><li>window对象的常用属性与方法见下表：</li></ul><table><thead><tr><th>类型</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td rowspan="6">属性</td><td>name</td><td>设置或返回窗口的名称</td></tr><tr><td>opener</td><td>返回创建当前窗口的窗口</td></tr><tr><td>self</td><td>返回当前窗口，等价于 window 对象</td></tr><tr><td>top</td><td>返回最顶层窗口</td></tr><tr><td>parent</td><td>返回当前窗口的父窗口</td></tr><tr><td>frames</td><td>获取页面中的所有框架</td></tr><tr><td rowspan="10">方法</td><td>alert(警告信息字符串)</td><td>显示警告对话框，用于提示用户注意某些事项</td></tr><tr><td>confirm(确认信息字符串)</td><td>显示确认对话框，有 “确认” 和 “取消” 两个按钮，单击 “确认” 按钮返回 true，单击 “取消” 按钮返回 false</td></tr><tr><td>prompt(提示字符串)</td><td>显示提示输入信息对话框，返回用户输入信息</td></tr><tr><td>open(URL, target, features, replace)</td><td>打开一个新的浏览器窗口或查找一个已命名的窗口</td></tr><tr><td>close()</td><td>关闭浏览器窗口</td></tr><tr><td>setTimeout(code, millisec)</td><td>在指定毫秒数（millisec）后调用函数或计算表达式（code）</td></tr><tr><td>clearTimeout(id_of_settimeout)</td><td>取消 setTimeout 设置的定时器。id_of_settimeout 表示由 setTimeout()返回的 ID 值，该值标识要取消的延迟执行代码块</td></tr><tr><td>setInterval(code, millisec)</td><td>按照指定的周期（以毫秒计）调用函数或计算表达式</td></tr><tr><td>clearInterval(id_of_setinterval)</td><td>取消 setInterval 设置的定时器。id_of_setinterval 表示由 setInterval()返回的 ID 值</td></tr></tbody></table>### ① 打开和关闭浏览器窗口- `open(URL, name, features, replace)`方法中包含4个参数：- `URL`表示将要打开的网页地址，若为空则打开空白页- `target`表示网页加载的形式，可选值如下：- `_blank`:默认参数，打开一个新窗口- `_self`:在当前窗口访问URL- `_top`:在任何可加载的框架集访问对应URL- `_parent`:在父框架访问对应URL- `name`:使用自定义窗口名称打开一个新窗口- `features`参数表示新打开页面的基本属性，可选值如下：- `channelmode = yes | no`:是否使用剧院模式显示窗口（默认为no）,仅限IE- `directories = yes | no`:是否添加目录按钮，默认为yes，仅限IE- `fullscrean = yes | no`:是否使用全屏模式，默认为no，仅限IE- `height = 像素值`:窗口高度，最小值为100- `width = 像素值`:窗口宽度，最小值为100- `left = 像素值`:该窗口的左侧位置- `top = 像素值`:该窗口的顶部位置- `location = yes | no`:是否显示地址字段，默认为yes- `menubar = yes | no`:是否显示菜单栏，默认为yes- `resizable = yes | no`:窗口是否可调节尺寸，默认为yes- `scrollbars = yes | no`:是否显示滚动条，默认为yes- `status = yes | no`:是否添加状态栏，默认为yes- `titlebar = yes | no`:是否显示标题栏，默认为yes- `toolbar = yes | no`:是否显示浏览器工具栏，默认为yes- `features`中的设置仅在`target`参数为`_blank`时有效- 使用`open()`方法打开新窗口后，返回值为新窗口的窗口对象，使用此对象的`close()`方法可以将窗口关闭。如下所示：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> new_window = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;www.baidu.com&quot;</span>, <span class="hljs-string">&quot;_blank&quot;</span>); <span class="hljs-comment">// 打开百度</span><br>new_window.<span class="hljs-title function_">close</span>(); <span class="hljs-comment">// 关闭窗口</span><br></code></pre></td></tr></table></figure>### ② 设置和取消定时器#### 延迟定时器：延迟一段时间后执行操作- 设置：`setTimeout()`- 取消：`clearTimeout()`<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> timeoutTimer = <span class="hljs-literal">null</span>;<br><br>timeoutTimer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-comment">// 延迟执行的操作</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-comment">/*取消定时器的条件*/</span>) &#123;<br><span class="hljs-built_in">clearTimeout</span>(timeoutTimer);<br>&#125;<br>&#125;, <span class="hljs-comment">/*延迟时间（ms）*/</span>);<br></code></pre></td></tr></table></figure>#### 周期定时器：按指定周期执行操作- 设置：`setInterval()`- 取消：`clearInterval()`<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> timeoutTimer = <span class="hljs-literal">null</span>; <br><br>intervalTimer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-comment">// 周期执行的操作</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-comment">/*取消定时器的条件*/</span>) &#123;<br><span class="hljs-built_in">clearInterval</span>(intervalTimer);<br>&#125;<br>&#125;, <span class="hljs-comment">/*执行周期（ms）*/</span>);<br></code></pre></td></tr></table></figure>## 2.location对象：地址栏对象- 用于获取或管理浏览器地址栏中的相关数据，如获取当前网页地址，从一个网页跳转到另一个网页等。- 常见locatio对象的属性及方法见下表：<table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>href</td><td>返回完整的URL路径</td></tr><tr><td>protocol</td><td>返回URPL协议</td></tr><tr><td>host</td><td>返回URL的域名，包含端口号</td></tr><tr><td>hostname</td><td>返回URL的域名，不含端口号</td></tr><tr><td>pathnamne</td><td>返回URL的路径</td></tr><tr><td>port</td><td>返回URL的端口号</td></tr><tr><td>search</td><td>返回URL的参数</td></tr><tr><td>hash</td><td>返回URL的hash值</td></tr><tr><td>reload()</td><td>刷新当前URL的页面</td></tr><tr><td>replace()</td><td>使用另一个URL地址替换当前URL</td></tr><tr><td>assign()</td><td>跳转到另一个URL</td></tr></tbody></table><ul><li>location对象既是window对象的属性，也是document对象的属性，即<code>window.location</code>和<code>document.location</code>的写法等价。日常开发中，通常使用<code>window.location</code>或直接写<code>location</code>。</li></ul><h2 id="3history对象历史对象"><a class="markdownIt-Anchor" href="#3history对象历史对象"></a> 3.history对象：历史对象</h2><ul><li>用于记录浏览器的历史访问操作，存储当前窗口访问过的所有网页历史记录。</li><li>其常用属性和方法如下表：</li></ul><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>历史列表中的网址数量</td></tr><tr><td>state</td><td>当前历史记录的状态，默认为null，仅<code>pushState()</code>和<code>replaceState()</code>生成的历史记录才有值</td></tr><tr><td>scrollRestoration</td><td>前进后退的滚动行为，可选值为<code>auto</code>、<code>manual</code></td></tr><tr><td>back()</td><td>返回到上一个历史记录</td></tr><tr><td>forward()</td><td>前进到下一个历史记录</td></tr><tr><td>go()</td><td>前往某一个历史记录</td></tr><tr><td>pushState()</td><td>新建一个历史记录，不刷新页面</td></tr><tr><td>replaceState()</td><td>新创建一个历史记录并覆盖当前历史，不刷新页面</td></tr></tbody></table><ul><li><code>go(-1)</code>与<code>back()</code>功能一致，都可以返回上个页面</li><li><code>go(1)</code>与<code>foward()</code>功能一致，都可以前进道下一个页面</li></ul><h2 id="4navigator对象浏览器对象"><a class="markdownIt-Anchor" href="#4navigator对象浏览器对象"></a> 4.navigator对象：浏览器对象</h2><ul><li>主要用于获取浏览器的相关信息，如浏览器名称、浏览器版本等。</li><li>主流浏览器支持的常用属性与方法见下表：</li></ul><table><thead><tr><th>名称</th><th>方法</th></tr></thead><tbody><tr><td>userAgent</td><td>浏览器相关信息，用于在http请求中发送给服务端</td></tr><tr><td>language</td><td>浏览器语言</td></tr><tr><td>cookieEnabled</td><td>是否开启浏览器cookie</td></tr><tr><td>appName</td><td>完整浏览器名称（一般和实际浏览器不一致）</td></tr><tr><td>appCodeName</td><td>浏览器名称，几乎都为Mozilla</td></tr><tr><td>appVersion</td><td>浏览器版本和平台信息</td></tr><tr><td>platform</td><td>浏览器所在的操作系统平台</td></tr><tr><td>sendBeacon()</td><td>发送网络请求信息</td></tr><tr><td>javaEnabled()</td><td>是否在浏览器中启用Java</td></tr><tr><td>示例：(Chrome + WIndows11环境)</td><td></td></tr><tr><td><img src="20250706173010664.png" alt="" /></td><td></td></tr></tbody></table><blockquote><p><code>navigator.appName</code> 和 <code>navigator.appCodeName</code> 的不准确性主要源于浏览器发展的历史遗留问题和兼容性策略。</p><p>早期 Netscape 浏览器的 <code>appName</code> 返回 <code>&quot;Netscape&quot;</code>，而 IE 返回 <code>&quot;Microsoft Internet Explorer&quot;</code>，但现代浏览器（如 Chrome、Firefox、Edge）为了兼容旧网站（可能依赖 <code>appName</code> 检测浏览器），默认沿用 <code>&quot;Netscape&quot;</code>，避免被错误拦截。此外，W3C 并未规范该属性，因此浏览器厂商无需更新它。</p><p>而 <code>appCodeName</code> 普遍返回 <code>&quot;Mozilla&quot;</code>，则是因为初代 Netscape 的代码名是 <code>&quot;Mozilla&quot;</code>（意为 “Mosaic Killer”），其 User-Agent 格式被后续浏览器（包括 IE、Chrome 等）沿用，以绕过早期的服务器端检测。如今，所有主流浏览器仍默认返回 <code>&quot;Mozilla&quot;</code>，以保持对老旧网站的兼容性。</p><p>若要准确识别浏览器，建议解析 <code>navigator.userAgent</code> 或使用特性检测而非依赖这些过时属性。</p></blockquote><h2 id="5screen对象屏幕对象"><a class="markdownIt-Anchor" href="#5screen对象屏幕对象"></a> 5.screen对象：屏幕对象</h2><ul><li>用于获取屏幕的相关信息，如宽度、高度、分辨率等。</li><li>主流浏览器常用screen属性及方法见下表：</li></ul><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>width</td><td>返回设备屏幕宽度</td></tr><tr><td>height</td><td>返回设备屏幕高度</td></tr><tr><td>availWidth</td><td>返回设备屏幕可用宽度</td></tr><tr><td>availHeight</td><td>返回设备屏幕可用高度</td></tr><tr><td>avalilTop</td><td>返回屏幕顶部第一个像素点</td></tr><tr><td>availLeft</td><td>返回屏幕左侧第一个像素点</td></tr><tr><td>orientation</td><td>返回屏幕的方向（多用于移动设备的旋转适配）</td></tr><tr><td>pixelDepth</td><td>返回屏幕像素点</td></tr><tr><td>colorDepth</td><td>返回屏幕色彩深度</td></tr></tbody></table><h1 id="十二-事件"><a class="markdownIt-Anchor" href="#十二-事件"></a> 十二、事件</h1><h2 id="1事件概述"><a class="markdownIt-Anchor" href="#1事件概述"></a> 1.事件概述</h2><h3 id="1-认识事件"><a class="markdownIt-Anchor" href="#1-认识事件"></a> ① 认识事件</h3><blockquote><p>事件可以理解为JavaScript监测到的浏览器行为或用户行为，包括页面加载、鼠标单击、鼠标滑过某区域等。当JavaScript监测到这些事件时，执行一段程序来做出响应，就实现了用户与网页的交互。</p></blockquote><blockquote><p>目前大多数浏览器（Chrome、Safari、Firefox等）都支持DOM 2级事件的核心部分，但IE9之前的IE浏览器仍使用自己的事件标准。当需要兼容IE8及更低版本的浏览器时，需要做好浏览器环境的兼容处理。</p></blockquote><h3 id="2-事件流"><a class="markdownIt-Anchor" href="#2-事件流"></a> ② 事件流</h3><blockquote><p>所谓事件流，就是指事件在子元素中发生时，其在各级元素中的流动与传播。例如子元素被点击时，认为子元素和其所有的父级元素均触发单击事件。</p></blockquote><h4 id="情景示例"><a class="markdownIt-Anchor" href="#情景示例"></a> 情景示例：</h4><p>HTML文档结构如下：</p><ul><li>document<ul><li>html<ul><li>body<ul><li>button<br />当文档中的button被点击时，认为上面四个对象均触发单击事件，如何处理这四个对象事件触发的顺序，即如何对安排这些事件处理程序的执行顺序？</li></ul></li></ul></li></ul></li></ul><h4 id="事件冒泡"><a class="markdownIt-Anchor" href="#事件冒泡"></a> 事件冒泡</h4><ul><li>IE团队提出</li><li>从最内层元素开始到最外层元素逐层触发</li><li><img src="20250707093103236.png" alt="" /></li></ul><h4 id="事件捕获"><a class="markdownIt-Anchor" href="#事件捕获"></a> 事件捕获</h4><ul><li>Netscape团队提出</li><li>从最外层元素开始到最内层元素逐层触发</li><li><img src="20250707093134884.png" alt="" /></li></ul><h4 id="dom事件流"><a class="markdownIt-Anchor" href="#dom事件流"></a> DOM事件流</h4><ul><li>W3C制定的DOM事件流规范</li><li><img src="20250707093202219.png" alt="" /><ul><li>事件发生后，首先事件捕获，但不对事件进行处理；</li><li>然后进行到目标阶段，定位目标后执行当前元素对象的事件处理程序；</li><li>最后实现数据冒泡，向外逐级处理事件。</li></ul></li></ul><blockquote><p>老版本（IE8及以下）浏览器不支持DOM事件流。</p></blockquote><h2 id="2事件绑定"><a class="markdownIt-Anchor" href="#2事件绑定"></a> 2.事件绑定</h2><h3 id="1-内联绑定"><a class="markdownIt-Anchor" href="#1-内联绑定"></a> ① 内联绑定</h3><ul><li>使用HTML标签的事件属性绑定事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;btnClicked&quot;</span>&gt;</span>点击弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">btnClicked</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;检测到按钮被点击&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>这种写法不利于HTML与JavaScript的分离，不建议使用。</p></blockquote><h3 id="2-动态绑定"><a class="markdownIt-Anchor" href="#2-动态绑定"></a> ② 动态绑定</h3><ul><li>使用元素对象的时间属性绑定事件，即在JavaScript中获取标签元素，然后利用标签元素的事件属性绑定事件的处理程序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// HTML中有&lt;button id=&quot;target&quot;&gt;点击弹窗&lt;/button&gt;</span><br><span class="hljs-keyword">var</span> tar_element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;target&quot;</span>);    <span class="hljs-comment">// 获取页面元素</span><br>tar_element.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;                      <span class="hljs-comment">// 添加处理程序</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;检测到按钮被点击&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-事件监听"><a class="markdownIt-Anchor" href="#3-事件监听"></a> ③ 事件监听</h3><ul><li>利用DOM对象的事件监听方法绑定事件，即在JavaScript代码中获取标签元素，然后使用该元素调用addEventListener()方法绑定事件处理程序，语法格式如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;目标元素ID&quot;</span>);<br><br>element.<span class="hljs-title function_">addEvenrListener</span>(事件， <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>响应程序<br>&#125;， <span class="hljs-literal">true</span>/<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><ul><li><code>true/false</code>值可省略，默认/缺省为<code>false</code>，表示冒泡阶段执行；设为<code>true</code>表示捕获阶段执行</li><li>使用此方法，可以为同一个元素添加多个事件处理程序，且标签元素触发事件时，所有该事件类型绑定的事件处理程序会按照绑定顺序依次调用执行</li></ul><h2 id="3事件element对象"><a class="markdownIt-Anchor" href="#3事件element对象"></a> 3.事件(element)对象</h2><ul><li>每触发一个事件时，都会产生一个事件对象，包含了与事件有关的所有信息。</li><li>JavaScript会把产生的事件对象<code>event</code>作为参数传递给事件处理程序，方便开发人员获取事件信息。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;confirm_btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">type</span>);              <span class="hljs-comment">// 控制台输出click</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>常用事件对象的属性及方法见下表：</li></ul><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>返回事件类型</td></tr><tr><td>target</td><td>返回触发事件的目标元素</td></tr><tr><td>currentTarget</td><td>返回响应当前事件的元素</td></tr><tr><td>bubbles</td><td>该元素是否可以冒泡，返回一个布尔值</td></tr><tr><td>cancelable</td><td>是否可以取消事件的默认行为，返回一个布尔值</td></tr><tr><td>eventPhrase</td><td>返回事件所处的事件阶段：1、2、3分别表示捕获、目标、冒泡</td></tr><tr><td>preventDefault()</td><td>取消事件的默认行为，当<code>cancelable</code>为true时有效</td></tr><tr><td>stopPropagation()</td><td>阻止事件冒泡，在<code>bubbles</code>为true时有效</td></tr></tbody></table><ul><li>当点击子元素时，被直接点击的元素<code>eventPhrase</code>为2(目标阶段)，而父元素的<code>eventPhrase</code>为3(冒泡阶段)</li><li>通过查询元素响应事件时的<code>eventPhrase</code>，能够判断元素是被直接点击，还是点击了其下的子元素。</li></ul><h2 id="4常见事件类型"><a class="markdownIt-Anchor" href="#4常见事件类型"></a> 4.常见事件类型</h2><h3 id="1-鼠标事件"><a class="markdownIt-Anchor" href="#1-鼠标事件"></a> ① 鼠标事件</h3><table><thead><tr><th>事件名称</th><th>触发场景</th></tr></thead><tbody><tr><td>click</td><td>鼠标单击</td></tr><tr><td>dbclick</td><td>鼠标双击</td></tr><tr><td>mousedown</td><td>按下任何按键</td></tr><tr><td>mouseup</td><td>释放鼠标按键</td></tr><tr><td>mouseover</td><td>鼠标进入元素区域</td></tr><tr><td>mouseout</td><td>鼠标离开元素区域</td></tr><tr><td>mousemove</td><td>鼠标在元素内移动</td></tr><tr><td>mouseenter</td><td>鼠标首次进入元素区域</td></tr><tr><td>mouseleave</td><td>鼠标离开元素区域</td></tr><tr><td>mousewheel</td><td>鼠标滚轮滑动</td></tr></tbody></table><ul><li>mouseleave和mouseout这两个事件的区别：<ul><li><strong><code>mouseout</code></strong>：<ul><li>只要鼠标离开<strong>当前元素的边界</strong>（包括进入子元素），就会触发。</li><li>即从父元素进入子元素时，父元素会触发 <code>mouseout</code>，子元素会触发 <code>mouseover</code>。</li></ul></li><li><strong><code>mouseleave</code></strong>：<ul><li>只有鼠标<strong>完全离开当前元素及其所有子元素</strong>时才会触发。</li><li>即在父元素和子元素之间移动不会触发父元素的 <code>mouseleave</code>。</li></ul></li></ul></li></ul><h3 id="2-键盘事件"><a class="markdownIt-Anchor" href="#2-键盘事件"></a> ② 键盘事件</h3><table><thead><tr><th>事件名称</th><th>触发场景</th></tr></thead><tbody><tr><td>keydown</td><td>按下键盘按键（长安多次触发）</td></tr><tr><td>keyup</td><td>松开键盘按键</td></tr><tr><td>keypress</td><td>按下键盘字符键（不包括Esc、Shift等）</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 监听按下Enter键时，执行登录操作</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onkeydown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br><span class="hljs-keyword">if</span> (e.<span class="hljs-property">keyCode</span> == <span class="hljs-number">13</span>) &#123;<br><span class="hljs-title function_">login</span>();     <span class="hljs-comment">// 实现登录的方法</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>触发此类事件时，事件对象的<code>keyCode</code>属性将返回一个键码。<a href="https://tool.ip138.com/keycode/">点击查看常用按键-键码对照表</a><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="查询网.KeyCode键盘按键码\[EB/OL]()\[2025-07-07]. https://tool.ip138.com/keycode/">[2]</span></a></sup></li></ul><h3 id="3-焦点事件"><a class="markdownIt-Anchor" href="#3-焦点事件"></a> ③ 焦点事件</h3><table><thead><tr><th>事件名称</th><th>触发场景</th></tr></thead><tbody><tr><td>focus</td><td>文本框获取焦点</td></tr><tr><td>blur</td><td>文本框失去焦点</td></tr></tbody></table><ul><li>常用于输入检测，在文本框失焦时认为用户编辑完毕，对输入内容进行合法性检测。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;phone&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;blur&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> phoneInput = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br>  <span class="hljs-keyword">const</span> phoneRegex = <span class="hljs-regexp">/^1[3-9]\d&#123;9&#125;$/</span>; <br>  <span class="hljs-comment">// 示例：中国大陆手机号（11位，1开头，第二位数字是3-9）</span><br>  <br>  <span class="hljs-keyword">if</span> (!phoneRegex.<span class="hljs-title function_">test</span>(phoneInput)) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;手机号无效，请重新输入！&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">focus</span>(); <span class="hljs-comment">// 焦点重新回到输入框</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">borderColor</span> = <span class="hljs-string">&quot;red&quot;</span>; <span class="hljs-comment">// 高亮错误输入</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">borderColor</span> = <span class="hljs-string">&quot;green&quot;</span>; <span class="hljs-comment">// 标识合法输入</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-页面事件"><a class="markdownIt-Anchor" href="#4-页面事件"></a> ④ 页面事件</h3><table><thead><tr><th>事件名称</th><th>触发场景</th></tr></thead><tbody><tr><td>load</td><td>页面完成加载/图片完成加载/框架完成加载</td></tr><tr><td>unload</td><td>页面或框架卸载</td></tr><tr><td>scroll</td><td>滚动页面或其他元素</td></tr><tr><td>resize</td><td>window的大小或框架大小发生变化</td></tr><tr><td>error</td><td>js执行出现异常，或<code>&lt;img&gt;</code>元素、框架加载失败</td></tr></tbody></table><h2 id="5事件优化"><a class="markdownIt-Anchor" href="#5事件优化"></a> 5.事件优化</h2><h3 id="1-事件委托"><a class="markdownIt-Anchor" href="#1-事件委托"></a> ① 事件委托</h3><ul><li>事件委托(事件代理、事件托管)利用浏览器事件冒泡机制对事件的处理过程进行优化。</li><li>例如，页面上存在很多按钮，单独为这些按钮绑定单击事件会占用大量资源。此时可以将事件绑到定它们的父元素上，能够节约计算机的资源，同时优化网页。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>btn1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>btn2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>btn3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 事件对象的tagName为BUTTON,表明点击的是按钮</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span>.<span class="hljs-property">tagName</span> == <span class="hljs-string">&quot;BUTTON&quot;</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span>.<span class="hljs-property">innerText</span> == <span class="hljs-string">&quot;btn1&quot;</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;点击了btn1&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-事件绑定删除"><a class="markdownIt-Anchor" href="#2-事件绑定删除"></a> ② 事件绑定删除</h3><ul><li>当网页中有元素绑定了事件时，这些事件会始终占用系统资源。<ul><li>使用<code>addEventListener</code>、<code>onEvent</code>属性绑定的事件会在js将元素从HTML中去除时被自动回收，但是通过事件委托（监听父元素）绑定的事件不受影响。</li><li>有些事件在触发一次后不再需要使用，或者有些事件不能在无用之后自动清除，需要手动设置清除逻辑（类似于C++中的<s>洗狗</s>析构操作）。</li></ul></li><li>直接覆盖事件的定义，将其设置为<code>null</code>即可。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// HTML中有：&lt;button id=&quot;target&quot;&gt;点击我&lt;/button&gt;</span><br><br><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(target);<br>btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;btn被点击&quot;</span>);<br>&#125;<br>btn.<span class="hljs-property">onclick</span> = <span class="hljs-literal">null</span>;      <span class="hljs-comment">// 删除绑定事件</span><br></code></pre></td></tr></table></figure><h3 id="3-事件监听删除"><a class="markdownIt-Anchor" href="#3-事件监听删除"></a> ③ 事件监听删除</h3><ul><li>使用<code>removeEventListener()</code>删除事件监听，其参数应当与<code>addEventListener()</code>一致。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 续上例</span><br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-params"><span class="hljs-string">&quot;click&quot;</span>， handler, <span class="hljs-literal">false</span></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;btn被点击&quot;</span>);<br>&#125;<br>btn.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>， handler, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><hr /><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>王铁柱6.为什么说js是弱类型语言，它的优缺点分别是什么？[EB/OL].(2024-11-28)[2025-05-13]. <a href="https://www.cnblogs.com/ai888/p/18573400">https://www.cnblogs.com/ai888/p/18573400</a>.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>查询网.KeyCode键盘按键码[EB/OL]()[2025-07-07]. <a href="https://tool.ip138.com/keycode/">https://tool.ip138.com/keycode/</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Web</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++学习笔记</title>
    <link href="/2025/06/11/CPP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/06/11/CPP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>本篇笔记摘自<a href="https://www.bilibili.com/video/BV1Up4y1R7AR">《C++程序设计》3小时期末速成不挂科！！！ - 数学建模老哥</a>,遵循<a href="https://creativecommons.org/licenses/by/4.0/legalcode.zh-hans">CC BY 4.0协议</a>。<br />存在由AI生成的小部分内容，仅供参考，请仔细甄别可能存在的错误。</p></blockquote><h1 id="一-数据类型"><a class="markdownIt-Anchor" href="#一-数据类型"></a> 一、数据类型</h1><ul><li>C++的数据包括常量与变量，都具有一些数据类型：</li></ul><h2 id="1-常见数据类型"><a class="markdownIt-Anchor" href="#1-常见数据类型"></a> 1. 常见数据类型</h2><p><img src="20250608235449540.png" alt="" /></p><h2 id="2常量"><a class="markdownIt-Anchor" href="#2常量"></a> 2.常量</h2><ul><li>分为数值常量和字符(串)型常量两种</li></ul><h3 id="1-数值常量"><a class="markdownIt-Anchor" href="#1-数值常量"></a> ① 数值常量</h3><p><img src="20250609085905688.png" alt="" /></p><ul><li>指数形式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3.14</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">3.14 \times 10 ^ {-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">.</span><span class="mord">1</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span> -&gt; 3.14e-2</li></ul><h3 id="2-字符型常量"><a class="markdownIt-Anchor" href="#2-字符型常量"></a> ② 字符型常量</h3><p><img src="20250609090023633.png" alt="" /></p><h3 id="2-字符串型常量"><a class="markdownIt-Anchor" href="#2-字符串型常量"></a> ② 字符串型常量</h3><p><img src="20250609090156339.png" alt="" /></p><h3 id="3-常考例题"><a class="markdownIt-Anchor" href="#3-常考例题"></a> ③ 常考例题</h3><p><img src="20250609090342900.png" alt="" /></p><h2 id="3整型"><a class="markdownIt-Anchor" href="#3整型"></a> 3.整型</h2><p><img src="20250609090620422.png" alt="" /></p><ul><li>占n个字节的有符号整数，取值范围是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mrow><mn>8</mn><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">-2^{8n - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mn>8</mn><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2 ^ {8n - 1} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li><li>占n个字节的有符号整数，取值范围是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mn>8</mn><mi>n</mi></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2 ^ {8n} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li></ul><h2 id="4浮点型"><a class="markdownIt-Anchor" href="#4浮点型"></a> 4.浮点型</h2><p><img src="20250609090940153.png" alt="" /></p><h2 id="5布尔类型"><a class="markdownIt-Anchor" href="#5布尔类型"></a> 5.布尔类型</h2><p><img src="20250609091027828.png" alt="" /></p><h2 id="6变量命名规则"><a class="markdownIt-Anchor" href="#6变量命名规则"></a> ６.变量命名规则</h2><p><img src="20250609091302367.png" alt="" /></p><h2 id="7局部变量与全局变量"><a class="markdownIt-Anchor" href="#7局部变量与全局变量"></a> 7.局部变量与全局变量</h2><p><img src="20250609091352232.png" alt="" /></p><h1 id="二-运算符"><a class="markdownIt-Anchor" href="#二-运算符"></a> 二、运算符</h1><h2 id="1算术运算符"><a class="markdownIt-Anchor" href="#1算术运算符"></a> 1.算术运算符</h2><p><img src="20250609091647441.png" alt="" /><br /><img src="20250609091917412.png" alt="" /><br /><img src="20250609092214525.png" alt="" /></p><ul><li>例题：<br /><img src="20250609092639222.png" alt="" /></li></ul><h2 id="2赋值运算符"><a class="markdownIt-Anchor" href="#2赋值运算符"></a> 2.赋值运算符</h2><p><img src="20250609093050519.png" alt="" /></p><h2 id="3比较运算符关系运算符"><a class="markdownIt-Anchor" href="#3比较运算符关系运算符"></a> 3.比较运算符（关系运算符）</h2><ul><li>用于表达式的比较，并返回一个真值或假值<br /><img src="20250609093114972.png" alt="" /></li></ul><h2 id="4逻辑运算符"><a class="markdownIt-Anchor" href="#4逻辑运算符"></a> 4.逻辑运算符</h2><p><img src="20250609093240265.png" alt="" /></p><h2 id="5位运算符"><a class="markdownIt-Anchor" href="#5位运算符"></a> 5.位运算符</h2><ul><li>两个多位二进制进行逻辑运算，采取<strong>按位逻辑运算</strong>的方法：<br /><img src="20250609093615367.png" alt="" /></li></ul><h2 id="6杂项运算符"><a class="markdownIt-Anchor" href="#6杂项运算符"></a> 6.杂项运算符</h2><p><img src="20250609093722900.png" alt="" /></p><ul><li><code>sizeof()</code>多用于获取数组长度，如：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(a) / <span class="hljs-built_in">sizeof</span>(a[<span class="hljs-number">0</span>]) <br><span class="hljs-comment">// 数组总的字节数除以任何一个元素的字节数，即 16 / 4 = 4</span><br></code></pre></td></tr></table></figure><h2 id="7运算符优先级"><a class="markdownIt-Anchor" href="#7运算符优先级"></a> 7.运算符优先级</h2><p>略</p><h1 id="三-流程控制语句"><a class="markdownIt-Anchor" href="#三-流程控制语句"></a> 三、流程控制语句</h1><p>if语句、switch语句、while语句、for语句、Switch语句等过于基础，此处略去</p><h1 id="四-数组"><a class="markdownIt-Anchor" href="#四-数组"></a> 四、数组</h1><h2 id="1一维数组"><a class="markdownIt-Anchor" href="#1一维数组"></a> 1.一维数组</h2><p><img src="20250609105650074.png" alt="" /><br /><img src="20250609105951798.png" alt="" /><br /><img src="20250609110013625.png" alt="" /></p><h2 id="2二维数组"><a class="markdownIt-Anchor" href="#2二维数组"></a> 2.二维数组</h2><p><img src="20250609110232024.png" alt="" /><br /><img src="20250609110735962.png" alt="" /><br /><img src="20250609110908436.png" alt="" /></p><h2 id="3vector动态数组"><a class="markdownIt-Anchor" href="#3vector动态数组"></a> 3.vector动态数组</h2><p><code>vector</code>是C++标准模板库(STL)中的一个动态数组容器，它提供了以下主要功能：</p><ol><li><strong>动态大小</strong>：可以自动调整大小，不像普通数组需要预先指定固定大小</li><li><strong>连续存储</strong>：元素在内存中是连续存储的，支持随机访问</li><li><strong>自动内存管理</strong>：自动处理内存分配和释放</li><li><strong>丰富的成员函数</strong>：提供多种便捷操作元素的方法</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个空的int类型vector</span><br>    std::vector&lt;<span class="hljs-type">int</span>&gt; numbers;<br>    <br>    <span class="hljs-comment">// 添加元素</span><br>    numbers.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>    numbers.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>    numbers.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>    <br>    <span class="hljs-comment">// 访问元素</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;第一个元素: &quot;</span> &lt;&lt; numbers[<span class="hljs-number">0</span>] &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;第二个元素: &quot;</span> &lt;&lt; numbers.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>) &lt;&lt; std::endl;<br>    <br>    <span class="hljs-comment">// 遍历vector</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> num : numbers) &#123;  <span class="hljs-comment">// 范围for 循环</span><br>        std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>常用操作：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// 创建与初始化</span><br>std::vector&lt;<span class="hljs-type">int</span>&gt; v1;                <span class="hljs-comment">// 空vector</span><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v2</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;             <span class="hljs-comment">// 5个元素，默认值为0</span><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v3</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)</span></span>;         <span class="hljs-comment">// 5个元素，每个都是10</span><br>std::vector&lt;<span class="hljs-type">int</span>&gt; v4 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;    <span class="hljs-comment">// 初始化列表</span><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v5</span><span class="hljs-params">(v4)</span></span>;            <span class="hljs-comment">// 拷贝构造</span><br><br><span class="hljs-comment">// 添加元素 </span><br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">100</span>);       <span class="hljs-comment">// 在末尾添加元素</span><br>v.<span class="hljs-built_in">insert</span>(v.<span class="hljs-built_in">begin</span>(), <span class="hljs-number">5</span>); <span class="hljs-comment">// 在开头插入元素</span><br>v.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">200</span>);    <span class="hljs-comment">// 在末尾高效构造并添加元素(C++11)</span><br><br><span class="hljs-comment">// 访问元素</span><br><span class="hljs-type">int</span> first = v[<span class="hljs-number">0</span>];       <span class="hljs-comment">// 通过下标访问(不检查边界)</span><br><span class="hljs-type">int</span> second = v.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>);   <span class="hljs-comment">// 通过at()访问(会检查边界)</span><br><span class="hljs-type">int</span> last = v.<span class="hljs-built_in">back</span>();    <span class="hljs-comment">// 访问最后一个元素</span><br><span class="hljs-type">int</span> first = v.<span class="hljs-built_in">front</span>();  <span class="hljs-comment">// 访问第一个元素</span><br><br><span class="hljs-comment">// 删除元素</span><br>v.<span class="hljs-built_in">pop_back</span>();           <span class="hljs-comment">// 删除最后一个元素</span><br>v.<span class="hljs-built_in">erase</span>(v.<span class="hljs-built_in">begin</span>());     <span class="hljs-comment">// 删除第一个元素</span><br>v.<span class="hljs-built_in">erase</span>(v.<span class="hljs-built_in">begin</span>()<span class="hljs-number">+1</span>);   <span class="hljs-comment">// 删除第二个元素</span><br>v.<span class="hljs-built_in">clear</span>();              <span class="hljs-comment">// 清空所有元素</span><br><br><span class="hljs-comment">// 容器操作</span><br><span class="hljs-type">int</span> size = v.<span class="hljs-built_in">size</span>();        <span class="hljs-comment">// 当前元素数量</span><br><span class="hljs-type">bool</span> empty = v.<span class="hljs-built_in">empty</span>();     <span class="hljs-comment">// 判断是否为空</span><br>v.<span class="hljs-built_in">resize</span>(<span class="hljs-number">10</span>);              <span class="hljs-comment">// 调整大小</span><br><span class="hljs-type">int</span> cap = v.<span class="hljs-built_in">capacity</span>();     <span class="hljs-comment">// 当前容量(内存空间)</span><br>v.<span class="hljs-built_in">reserve</span>(<span class="hljs-number">100</span>);            <span class="hljs-comment">// 预留空间(不改变size)</span><br><br><span class="hljs-comment">// 迭代器操作</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>    std::cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> rit = v.<span class="hljs-built_in">rbegin</span>(); rit != v.<span class="hljs-built_in">rend</span>(); ++rit) &#123;<br>    std::cout &lt;&lt; *rit &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 反向迭代</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="五-函数"><a class="markdownIt-Anchor" href="#五-函数"></a> 五、函数</h1><h2 id="1函数定义"><a class="markdownIt-Anchor" href="#1函数定义"></a> 1.函数定义</h2><p><img src="20250609111942139.png" alt="" /><br /><img src="20250609112043359.png" alt="" /></p><ul><li>即使制定了函数返回值类型为void，在函数体中也可以写<code>return;</code>实现直接返回、取消执行后续逻辑的操作。</li></ul><h2 id="2函数声明"><a class="markdownIt-Anchor" href="#2函数声明"></a> 2.函数声明</h2><p><img src="20250609112304336.png" alt="" /></p><h2 id="3函数调用"><a class="markdownIt-Anchor" href="#3函数调用"></a> 3.函数调用</h2><p><img src="20250609112411381.png" alt="" /></p><h2 id="4默认参数"><a class="markdownIt-Anchor" href="#4默认参数"></a> 4.默认参数</h2><p><img src="20250609112440742.png" alt="" /></p><ul><li>默认值参数应该位于形参列表的尾部，即无默认值的参数前面不应该出现有默认值的参数</li></ul><h2 id="5内联函数内置函数"><a class="markdownIt-Anchor" href="#5内联函数内置函数"></a> 5.内联函数(内置函数)</h2><p><img src="20250609112639363.png" alt="" /></p><ul><li>内联函数分<strong>显示声明</strong>与<strong>隐式声明</strong>两种：<ul><li>显示声明：声明在定义类的外，并加上<code>inline</code>关键字</li><li>隐式声明：声明在定义类的内部，不用加上<code>inline</code>关键字</li></ul></li></ul><h1 id="六-指针"><a class="markdownIt-Anchor" href="#六-指针"></a> 六、指针</h1><h2 id="1指针定义"><a class="markdownIt-Anchor" href="#1指针定义"></a> 1.指针定义</h2><p><img src="20250609230814994.png" alt="" /><br /><img src="20250609233925345.png" alt="" /></p><h2 id="2常量与指针"><a class="markdownIt-Anchor" href="#2常量与指针"></a> 2.常量与指针</h2><p><img src="20250610010819685.png" alt="" /></p><ul><li>对于<code>int * p = 1</code>,认为<code>*</code>前面是对指针目标的描述(目标的数据类型等)，<code>*</code>后面是对指针自身的描述(指针名)，<code>const</code>在哪个部分，对应的描述对象就不可修改。<ul><li>const int * p:先<code>const</code>后<code>*</code>(指向常量的指针（pointer to const）)，此时可以修改指针的目标，不能修改目标的值。</li><li>int * const p:先<code>*</code>后<code>const</code>(指针本身是常量（constant pointer）)，此时可以修改指针目标的值，不能修改指针的目标。</li><li>const int * const p:<code>const</code>修饰<code>p</code>变量以及<code>*p</code>指针，此时不能修改指针目标的值，也不能修改指针的目标。<br /><img src="20250610093921218.png" alt="" /></li></ul></li></ul><h2 id="3多级指针指向指针的指针"><a class="markdownIt-Anchor" href="#3多级指针指向指针的指针"></a> 3.多级指针（指向指针的指针）</h2><p><img src="20250610094943781.png" alt="" /></p><h2 id="4指针函数返回值为指针的函数"><a class="markdownIt-Anchor" href="#4指针函数返回值为指针的函数"></a> 4.指针函数（返回值为指针的函数）</h2><p>定义语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> *<span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br><span class="hljs-comment">// 函数体</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="七-自定义数据类型"><a class="markdownIt-Anchor" href="#七-自定义数据类型"></a> 七、自定义数据类型</h1><h2 id="1结构体"><a class="markdownIt-Anchor" href="#1结构体"></a> 1.结构体</h2><p><img src="20250610105321688.png" alt="" /></p><ul><li>访问结构体的成员时可以用<code>.</code>和<code>-&gt;</code>(后者可重载)；<code>ptr-&gt;member</code> 等价于 <code>(*ptr).member</code>。</li></ul><h2 id="2联合体共用体"><a class="markdownIt-Anchor" href="#2联合体共用体"></a> 2.联合体(共用体)</h2><p><img src="20250610110553670.png" alt="" /><br /><img src="20250610110656567.png" alt="" /></p><ul><li>使用联合体的目的主要是为了提高内存的使用效率，但只能同时使用其中一个成员，所以要及时取用共用体中的值，防止改用其他成员时旧的数据被覆盖掉。</li></ul><h2 id="3枚举"><a class="markdownIt-Anchor" href="#3枚举"></a> 3.枚举</h2><ul><li>本质上类似于用数值给一组东西编号，如<code>week[7] = &#123;1, 2, 3, 4, 5, 6, 7&#125;</code>（称为&quot;魔法数字&quot;）。</li><li>这样写会降低代码可读性，其他用户很难看出1~7的具体意义，因此产生了枚举的数据类型：<br /><img src="20250610111131317.png" alt="" /><br /><img src="20250610125653689.png" alt="" /><br /><img src="20250610125759803.png" alt="" /></li></ul><h1 id="八-类和对象"><a class="markdownIt-Anchor" href="#八-类和对象"></a> 八、类和对象</h1><h2 id="1类和对象的定义"><a class="markdownIt-Anchor" href="#1类和对象的定义"></a> 1.类和对象的定义</h2><p><img src="20250610170304987.png" alt="" /><br /><img src="20250610170400281.png" alt="" /><br /><img src="20250610170558062.png" alt="" /></p><h2 id="2构造函数与析构函数"><a class="markdownIt-Anchor" href="#2构造函数与析构函数"></a> 2.构造函数与析构函数</h2><h3 id="1-构造函数"><a class="markdownIt-Anchor" href="#1-构造函数"></a> ① 构造函数</h3><p><img src="20250610170702611.png" alt="" /></p><ul><li>构造函数的常用写法：<br /><img src="20250610170816355.png" alt="" /></li></ul><h3 id="2-析构函数"><a class="markdownIt-Anchor" href="#2-析构函数"></a> ② 析构函数</h3><p><img src="20250610171003934.png" alt="" /><br /><img src="20250610171138463.png" alt="" /></p><h2 id="3成员函数-静态成员"><a class="markdownIt-Anchor" href="#3成员函数-静态成员"></a> 3.成员函数、静态成员</h2><h3 id="1-成员函数"><a class="markdownIt-Anchor" href="#1-成员函数"></a> ① 成员函数</h3><p><img src="20250610172032705.png" alt="" /></p><h3 id="2-静态成员"><a class="markdownIt-Anchor" href="#2-静态成员"></a> ② 静态成员</h3><p><img src="20250610173741458.png" alt="" /><br /><img src="20250610173835103.png" alt="" /></p><h2 id="4类的友元"><a class="markdownIt-Anchor" href="#4类的友元"></a> 4.类的友元</h2><p><img src="20250610174027397.png" alt="" /></p><ul><li>A是B的友元 -&gt; A可以访问B中标记为<code>private</code>和<code>protected</code>的属性和方法。<br /><img src="20250610174339952.png" alt="" /></li></ul><h1 id="九-继承与多态"><a class="markdownIt-Anchor" href="#九-继承与多态"></a> 九、继承与多态</h1><h2 id="1继承"><a class="markdownIt-Anchor" href="#1继承"></a> 1.继承</h2><ul><li>派生类(子类)可访问基类(父类)的<code>public</code>和<code>protected</code>属性与方法，无论选择哪种方式都无法直接访问基类的<code>private</code>属性与方法。<br /><img src="20250610175406295.png" alt="" /><br /><img src="20250610175514263.png" alt="" /><br /><img src="20250610180026727.png" alt="" /></li><li>构造函数与析构函数都不能被派生类所继承。</li></ul><h2 id="2多态"><a class="markdownIt-Anchor" href="#2多态"></a> 2.多态</h2><p><img src="20250610180328767.png" alt="" /></p><h3 id="1-静态多态"><a class="markdownIt-Anchor" href="#1-静态多态"></a> ① 静态多态</h3><h4 id="函数重载"><a class="markdownIt-Anchor" href="#函数重载"></a> 函数重载</h4><p><img src="20250610180353733.png" alt="" /></p><ul><li>C++不以返回值区分函数重载，而是根据形参列表来区分。<br /><img src="20250610180531206.png" alt="" /></li></ul><h4 id="运算符重载"><a class="markdownIt-Anchor" href="#运算符重载"></a> 运算符重载</h4><p><img src="20250610180633724.png" alt="" /><br /><img src="20250610180759170.png" alt="" /><br /><img src="20250610201732468.png" alt="" /></p><ul><li><code>&lt;&lt;</code>与<code>&gt;&gt;</code>的重载：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> real;  <span class="hljs-comment">// 实部</span><br>    <span class="hljs-type">double</span> imag;  <span class="hljs-comment">// 虚部</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-built_in">Complex</span>(<span class="hljs-type">double</span> r = <span class="hljs-number">0.0</span>, <span class="hljs-type">double</span> i = <span class="hljs-number">0.0</span>) : <span class="hljs-built_in">real</span>(r), <span class="hljs-built_in">imag</span>(i) &#123;&#125;<br><br>    <span class="hljs-comment">// 重载 + 运算符 (成员函数形式)</span><br>    Complex <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Complex&amp; other) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Complex</span>(real + other.real, imag + other.imag);<br>    &#125;<br><br>    <span class="hljs-comment">// 重载 &lt; 运算符 (按模比较)</span><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Complex&amp; other) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> (std::<span class="hljs-built_in">sqrt</span>(real*real + imag*imag) &lt; <br>                std::<span class="hljs-built_in">sqrt</span>(other.real*other.real + other.imag*other.imag));<br>    &#125;<br><br>    <span class="hljs-comment">// 获取实部</span><br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getReal</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> real; &#125;<br>    <br>    <span class="hljs-comment">// 获取虚部</span><br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getImag</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> imag; &#125;<br><br>    <span class="hljs-comment">// 友元函数声明</span><br>    <span class="hljs-keyword">friend</span> std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="hljs-type">const</span> Complex&amp; c);<br>    <span class="hljs-keyword">friend</span> std::istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(std::istream&amp; is, Complex&amp; c);<br>&#125;;<br><br><span class="hljs-comment">// 重载 &lt;&lt; 运算符 (输出虚数)</span><br>std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="hljs-type">const</span> Complex&amp; c) &#123;<br>    os &lt;&lt; c.real;<br>    <span class="hljs-keyword">if</span> (c.imag &gt;= <span class="hljs-number">0</span>) &#123;<br>        os &lt;&lt; <span class="hljs-string">&quot;+&quot;</span> &lt;&lt; c.imag &lt;&lt; <span class="hljs-string">&quot;i&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        os &lt;&lt; c.imag &lt;&lt; <span class="hljs-string">&quot;i&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> os;<br>&#125;<br><br><span class="hljs-comment">// 重载 &gt;&gt; 运算符 (输入虚数)</span><br>std::istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(std::istream&amp; is, Complex&amp; c) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;输入实部: &quot;</span>;<br>    is &gt;&gt; c.real;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;输入虚部: &quot;</span>;<br>    is &gt;&gt; c.imag;<br>    <span class="hljs-keyword">return</span> is;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Complex c1, c2;<br>    <br>    <span class="hljs-comment">// 测试 &gt;&gt; 运算符</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;输入第一个虚数:\n&quot;</span>;<br>    std::cin &gt;&gt; c1;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;输入第二个虚数:\n&quot;</span>;<br>    std::cin &gt;&gt; c2;<br>    <br>    <span class="hljs-comment">// 测试 &lt;&lt; 运算符</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;c1 = &quot;</span> &lt;&lt; c1 &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;c2 = &quot;</span> &lt;&lt; c2 &lt;&lt; std::endl;<br>    <br>    <span class="hljs-comment">// 测试 + 运算符</span><br>    Complex sum = c1 + c2;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;c1 + c2 = &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;<br>    <br>    <span class="hljs-comment">// 测试 &lt; 运算符</span><br>    <span class="hljs-keyword">if</span> (c1 &lt; c2) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;c1的模小于c2的模&quot;</span> &lt;&lt; std::endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;c1的模不小于c2的模&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-动态多态"><a class="markdownIt-Anchor" href="#2-动态多态"></a> ② 动态多态</h3><h4 id="虚函数"><a class="markdownIt-Anchor" href="#虚函数"></a> 虚函数</h4><p><img src="20250610203345173.png" alt="" /></p><ul><li>静态链接在类的多态(成员函数重载)中出现的问题：<br /><img src="20250610203701260.png" alt="" /></li><li>通过将同样的<code>shape()</code>方法以<code>virtual</code>关键字标识为虚函数，可以实现根据子类的不同调用不同的方法，即使方法名、返回值，甚至参数列表都是相同的。<br /><img src="20250610204321179.png" alt="" /></li><li><code>virtual</code>关键字只需要写在基类的(纯)虚函数上即可，派生类中的虚函数无需再写<code>virtual</code>。</li></ul><h4 id="虚基类"><a class="markdownIt-Anchor" href="#虚基类"></a> 虚基类</h4><ul><li>虚基类（Virtual Base Class）是C++中用于解决多重继承中的&quot;菱形继承问题&quot;（Diamond Problem）的一种机制。当多个派生类从同一个基类继承时，使用虚继承可以确保在最终的派生类中只有一份基类子对象。</li><li>例：A派生出B和C，同时D又继承自B和C（菱形继承），类D中就会有两份类A的成员，这会导致访问的二义性。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 基类A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-built_in">A</span>() : <span class="hljs-built_in">data</span>(<span class="hljs-number">10</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;A constructor&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 使用虚继承的类B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> A &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">B</span>() &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;B constructor&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 使用虚继承的类C</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> A &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">C</span>() &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;C constructor&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 类D继承B和C</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> : <span class="hljs-keyword">public</span> B, <span class="hljs-keyword">public</span> C &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">D</span>() &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;D constructor&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printData</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Data: &quot;</span> &lt;&lt; data &lt;&lt; endl; <span class="hljs-comment">// 没有二义性</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    D d;<br>    d.<span class="hljs-built_in">printData</span>();<br>    <br>    <span class="hljs-comment">// 输出A、B、C、D的构造函数，但A只被构造一次</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>通过在继承时使用<code>virtual</code>关键字，B和C都虚继承自A，A即为<strong>虚基类</strong></li><li>当D继承B和C时，A的子对象在D中只有一份</li><li>构造函数调用顺序：<ul><li>虚基类构造函数最先被调用（A）</li><li>然后是普通基类构造函数（B、C）</li><li>最后是派生类自己的构造函数（D）</li></ul></li></ol><ul><li>如果不使用虚继承，D中将有两份A的成员，访问<code>data</code>时需要指定路径（<code>B::data</code>或<code>C::data</code>），否则会产生编译错误。</li></ul><h1 id="十-输入输出流"><a class="markdownIt-Anchor" href="#十-输入输出流"></a> 十、输入输出流</h1><p><img src="20250610205651539.png" alt="" /><br /><img src="20250610205838721.png" alt="" /><br /><img src="20250610205857736.png" alt="" /></p><h1 id="十一-编程例题"><a class="markdownIt-Anchor" href="#十一-编程例题"></a> 十一、编程例题</h1><h2 id="1虚函数"><a class="markdownIt-Anchor" href="#1虚函数"></a> 1.虚函数</h2><blockquote><p>完整实现Shape抽象基类，包含：</p><ul><li>2个纯虚函数（area和perimeter）1个带默认实现的虚函数（printInfo）</li><li>虚析构函数：必须使用虚析构函数<br />实现3个具体派生类：</li><li>Circle（标记为final）</li><li>Rectangle</li><li>Square（继承自Rectangle）<br />总体任务：</li><li>抽象基类 Shape：定义图形的基本接口</li><li>具体图形类（Circle、Rectangle、Square）：实现特定图形功能</li><li>管理类 ShapeManager：演示多态的实际应用</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">double</span> <span class="hljs-title">perimeter</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">printInfo</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;图形信息如下：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;面积为&quot;</span> &lt;&lt; <span class="hljs-built_in">area</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;周长为&quot;</span> &lt;&lt; <span class="hljs-built_in">perimeter</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Shape</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;图形已被回收。&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">final</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">double</span> radius;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Circle</span>(<span class="hljs-type">double</span> r) :<span class="hljs-built_in">radius</span>(r) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span> *radius *radius;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">perimeter</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span> *radius *radius;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printInfo</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;圆形的信息如下：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;半径为：&quot;</span> &lt;&lt; radius &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;面积为&quot;</span> &lt;&lt; <span class="hljs-built_in">area</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;周长为&quot;</span> &lt;&lt; <span class="hljs-built_in">perimeter</span>() &lt;&lt; endl;<br>Shape::<span class="hljs-built_in">printInfo</span>();<br>&#125;<br><br>~<span class="hljs-built_in">Circle</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;圆形已被回收。&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">double</span> width;<br><span class="hljs-type">double</span> length;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Rectangle</span>(<span class="hljs-type">double</span> l, <span class="hljs-type">double</span> w) :<span class="hljs-built_in">length</span>(l), <span class="hljs-built_in">width</span>(w) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span> </span>&#123;<br><span class="hljs-keyword">return</span> width * length;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">perimeter</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span> </span>&#123;<br><span class="hljs-keyword">return</span> (width +length) * <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printInfo</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;长方形的信息如下：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;长度为：&quot;</span> &lt;&lt; length &lt;&lt; <span class="hljs-string">&quot;,宽度为：&quot;</span> &lt;&lt; width &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;面积为&quot;</span> &lt;&lt; <span class="hljs-built_in">area</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;周长为&quot;</span> &lt;&lt; <span class="hljs-built_in">perimeter</span>() &lt;&lt; endl;<br>Shape::<span class="hljs-built_in">printInfo</span>();<br>&#125;<br><br>~<span class="hljs-built_in">Rectangle</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;长方形已被回收。&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> : <span class="hljs-keyword">public</span> Rectangle &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">double</span> size;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Square</span>(<span class="hljs-type">double</span> s) : <span class="hljs-built_in">Rectangle</span>(s, s) &#123;<br>size = s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printInfo</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;正方形的信息如下：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;边长为：&quot;</span> &lt;&lt; size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;面积为&quot;</span> &lt;&lt; <span class="hljs-built_in">area</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;周长为&quot;</span> &lt;&lt; <span class="hljs-built_in">perimeter</span>() &lt;&lt; endl;<br>Shape::<span class="hljs-built_in">printInfo</span>();<br>&#125;<br><br>~<span class="hljs-built_in">Square</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;正方形已被回收。&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShapeManager</span> &#123;<br><span class="hljs-keyword">private</span>:<br>vector&lt;Shape*&gt; shapes;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addShape</span><span class="hljs-params">(Shape* s)</span> </span>&#123;<br>shapes.<span class="hljs-built_in">push_back</span>(s);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printAllShapes</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;所有图形信息如下：&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp;shape : shapes) &#123;<br>shape-&gt;<span class="hljs-built_in">printInfo</span>();<br>cout &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">totalArea</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-type">double</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp;shape : shapes) &#123;<br>sum += shape-&gt;<span class="hljs-built_in">area</span>();<br>&#125;<br><br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">totalPerimeter</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-type">double</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp;shape : shapes) &#123;<br>sum += shape-&gt;<span class="hljs-built_in">perimeter</span>();<br>&#125;<br><br><span class="hljs-keyword">return</span> sum;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>ShapeManager sm;<br><br>sm.<span class="hljs-built_in">addShape</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Circle</span>(<span class="hljs-number">4</span>));<br>sm.<span class="hljs-built_in">addShape</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Rectangle</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>));<br>sm.<span class="hljs-built_in">addShape</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Square</span>(<span class="hljs-number">4</span>));<br><br>sm.<span class="hljs-built_in">printAllShapes</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;所有图形的面积之和为&quot;</span> &lt;&lt; sm.<span class="hljs-built_in">totalArea</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;所有图形的周长之和为&quot;</span> &lt;&lt; sm.<span class="hljs-built_in">totalPerimeter</span>() &lt;&lt; endl; <br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2运算符重载"><a class="markdownIt-Anchor" href="#2运算符重载"></a> 2.运算符重载</h2><blockquote><p>定义一个时间类Time，包含三个属性： hour, minute 和 second<br />要求通过运算符重载实现如下功能:</p><ul><li>时间输入输出(&gt;&gt;、&lt;&lt;)；</li><li>时间增加减少若干(+=、-=)，<ul><li>例：Time&amp; operator+=(const Time&amp;);Time&amp; operator-=(const Time&amp;)；</li></ul></li><li>时间前、后自增加/减少1秒(++、–)，<ul><li>前自增例：Time&amp; operator++();</li><li>后自增例：Time operator++(int)；<br />输入形式：</li></ul></li><li>输入固定为两个Time实例(time1，time2),每个实例占一行；</li><li>Time实例输入格式为：hour minute second。<br />输出形式：</li><li>Time实例输出格式为：hour:minute:second；</li><li>每个输出实例占一行。<br />依次输出以下表达式的值</li><li>time1 += (time2++)</li><li>time1 -= time2</li><li>++time2</li><li>time2 += (time1–)</li><li>–time1</li><li>time2 -= time1</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Time</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> hour;<br><span class="hljs-type">int</span> minute;<br><span class="hljs-type">int</span> second;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>minute += second / <span class="hljs-number">60</span>;<br>second %= <span class="hljs-number">60</span>;<br><span class="hljs-keyword">if</span> (second &lt; <span class="hljs-number">0</span>) &#123;<br>second += <span class="hljs-number">60</span>;<br>minute--;<br>&#125;<br><br>hour += minute / <span class="hljs-number">60</span>;<br>minute %= <span class="hljs-number">60</span>;<br><span class="hljs-keyword">if</span> (minute &lt; <span class="hljs-number">0</span>) &#123;<br>minute += <span class="hljs-number">60</span>;<br>hour--;<br>&#125;<br><br>hour %= <span class="hljs-number">24</span>;<br><span class="hljs-keyword">if</span> (hour &lt; <span class="hljs-number">0</span>) &#123;<br>hour += <span class="hljs-number">24</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Time</span>(<span class="hljs-type">int</span> h = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> m = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>) : <span class="hljs-built_in">hour</span>(h), <span class="hljs-built_in">minute</span>(m), <span class="hljs-built_in">second</span>(s) &#123;<br><span class="hljs-built_in">init</span>();<br>&#125;<br><br><span class="hljs-keyword">friend</span> istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream&amp; is, Time&amp; t) &#123;<br>is &gt;&gt; t.hour &gt;&gt; t.minute &gt;&gt; t.second;<br>t.<span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">return</span> is;<br>&#125;<br><br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; os, Time&amp; t) &#123;<br>os &lt;&lt; t.hour &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; t.minute &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; t.second;<br><span class="hljs-keyword">return</span> os;<br>&#125;<br><br>Time&amp; <span class="hljs-keyword">operator</span>+=(<span class="hljs-type">const</span> Time&amp; other) &#123;<br>hour += other.hour;<br>minute += other.minute;<br>second += other.second;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br>Time&amp; <span class="hljs-keyword">operator</span>-=(<span class="hljs-type">const</span> Time&amp; other) &#123;<br>hour -= other.hour;<br>minute -= other.minute;<br>second -= other.second;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br>Time <span class="hljs-keyword">operator</span>++() &#123;<br>second++;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br>Time <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>) &#123;<br>Time temp = *<span class="hljs-keyword">this</span>;<br>++(*<span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br>Time <span class="hljs-keyword">operator</span>--() &#123;<br>second--;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br>Time <span class="hljs-keyword">operator</span>--(<span class="hljs-type">int</span>) &#123;<br>Time temp = *<span class="hljs-keyword">this</span>;<br>--(*<span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>Time t1, t2;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入两个时间：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; t1 &gt;&gt; t2;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;第一个时间为：&quot;</span> &lt;&lt; t1 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;第二个时间为：&quot;</span> &lt;&lt; t2 &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;t1 += (t2++) = &quot;</span> &lt;&lt; (t1 += (t2++)) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;t1 -= t2 = &quot;</span> &lt;&lt; (t1 -= t2) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;++t2 = &quot;</span> &lt;&lt; (++t2) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;t2 += (t1--) = &quot;</span> &lt;&lt; (t2 += (t1--)) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot; --t1 = &quot;</span> &lt;&lt; (--t1) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;t2 -= t1 = &quot;</span> &lt;&lt; (t2 -= t1) &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3虚基类"><a class="markdownIt-Anchor" href="#3虚基类"></a> 3.虚基类</h2><blockquote><p>设计一个学校人员管理系统，包含以下角色：</p><ul><li>人员基础信息（姓名、年龄、ID）</li><li>学生（额外信息：专业、年级）</li><li>教师（额外信息：部门、职称）</li><li>教授（可以是教师又是研究员）</li><li>助教（可以是学生又是教师）</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">protected</span>:<br>string name;<br><span class="hljs-type">int</span> age;<br>string id;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(string n, <span class="hljs-type">int</span> a, string i) : <span class="hljs-built_in">name</span>(n), <span class="hljs-built_in">age</span>(a), <span class="hljs-built_in">id</span>(i) &#123;&#125;<br><br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Person</span>() &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;年龄：&quot;</span> &lt;&lt; age &lt;&lt; <span class="hljs-string">&quot;ID：&quot;</span> &lt;&lt; id &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> :<span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Person&#123;<br><span class="hljs-keyword">protected</span>:<br>string major;<br><span class="hljs-type">int</span> grade;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Student</span>(string n, <span class="hljs-type">int</span> a, string id, string m, <span class="hljs-type">int</span> g) : <span class="hljs-built_in">Person</span>(n, a, id), <span class="hljs-built_in">major</span>(m), <span class="hljs-built_in">grade</span>(g) &#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>Person::<span class="hljs-built_in">display</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;专业：&quot;</span> &lt;&lt; major &lt;&lt; <span class="hljs-string">&quot;年级：&quot;</span> &lt;&lt; grade &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> :<span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Person&#123;<br><span class="hljs-keyword">protected</span>:<br>string department;<br>string title;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Teacher</span>(string n, <span class="hljs-type">int</span> a, string id, string d, string t) : <span class="hljs-built_in">Person</span>(n, a, id), <span class="hljs-built_in">department</span>(d), <span class="hljs-built_in">title</span>(t) &#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>Person::<span class="hljs-built_in">display</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;部门：&quot;</span> &lt;&lt; department &lt;&lt; <span class="hljs-string">&quot;职称：&quot;</span> &lt;&lt; title &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Professor</span> : <span class="hljs-keyword">public</span> Teacher&#123;<br><span class="hljs-keyword">private</span>:<br>string field;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Professor</span>(string n, <span class="hljs-type">int</span> a, string id, string d, string t, string f) :<span class="hljs-built_in">Person</span>(n, a, id), <span class="hljs-built_in">Teacher</span>(n, a, id, d, t), <span class="hljs-built_in">field</span>(f) &#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>Teacher::<span class="hljs-built_in">display</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;研究领域&quot;</span> &lt;&lt; field &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tutor</span> : <span class="hljs-keyword">public</span> Student, <span class="hljs-keyword">public</span> Teacher&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Tutor</span>(string n, <span class="hljs-type">int</span> a, string id, string m, <span class="hljs-type">int</span> g, string d, string t) : <span class="hljs-built_in">Person</span>(n, a, id), <span class="hljs-built_in">Student</span>(n, a, id, m, g),<span class="hljs-built_in">Teacher</span>(n, a, id, d, t) &#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>Person::<span class="hljs-built_in">display</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;专业：&quot;</span> &lt;&lt; major &lt;&lt; <span class="hljs-string">&quot;年级：&quot;</span> &lt;&lt; grade &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;部门：&quot;</span> &lt;&lt; department &lt;&lt; <span class="hljs-string">&quot;职称：&quot;</span> &lt;&lt; title &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SChoolManageSys</span> &#123;<br><span class="hljs-keyword">private</span>:<br>vector&lt;Person*&gt; people;<br><span class="hljs-keyword">public</span>:<br>~<span class="hljs-built_in">SChoolManageSys</span>() &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : people) &#123;<br><span class="hljs-keyword">delete</span> p;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addPerson</span><span class="hljs-params">(Person *p)</span> </span>&#123;<br>people.<span class="hljs-built_in">push_back</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;所有人员信息：&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;p : people) &#123;<br>p-&gt;<span class="hljs-built_in">display</span>();<br>cout &lt;&lt; endl;<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>SChoolManageSys sys;<br>sys.<span class="hljs-built_in">addPerson</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;25001&quot;</span>, <span class="hljs-string">&quot;计算机科学与技术&quot;</span>, <span class="hljs-number">2</span>));<br>sys.<span class="hljs-built_in">addPerson</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Teacher</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&quot;25002&quot;</span>, <span class="hljs-string">&quot;数学系&quot;</span>, <span class="hljs-string">&quot;教授&quot;</span>));<br>sys.<span class="hljs-built_in">addPerson</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Professor</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">42</span>, <span class="hljs-string">&quot;25003&quot;</span>, <span class="hljs-string">&quot;计算机系&quot;</span>, <span class="hljs-string">&quot;教授&quot;</span>, <span class="hljs-string">&quot;C++程序设计&quot;</span>));<br>sys.<span class="hljs-built_in">addPerson</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Tutor</span>(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;25004&quot;</span>, <span class="hljs-string">&quot;物理学&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;物理系&quot;</span>, <span class="hljs-string">&quot;助教&quot;</span>));<br><br>sys.<span class="hljs-built_in">display</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web学习笔记(二)：CSS篇</title>
    <link href="/2025/05/12/Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9ACSS%E7%AF%87/"/>
    <url>/2025/05/12/Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9ACSS%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>声明：本篇笔记部分摘自<a href="https://www.wenjingketang.com/bookinfo?book_id=9310">《Web前端技术 - 航空工业出版社》</a>，遵循<a href="https://creativecommons.org/licenses/by/4.0/legalcode.zh-hans">CC BY 4.0协议</a>。<br />存在由AI生成的小部分内容，仅供参考，请仔细甄别可能存在的错误。</p></blockquote><hr /><h1 id="一-css3概述"><a class="markdownIt-Anchor" href="#一-css3概述"></a> 一、CSS3概述</h1><blockquote><p><code>CSS（Cascading Style Sheets，层叠样式表）</code>是一种用于描述网页<strong>外观和格式</strong>的样式表语言，具有<strong>控制网页样式</strong>、<strong>实现结构与样式分离</strong>、<strong>提升用户体验</strong>三大功能。<br />CSS3采用模块化设计，W3C将其划分为一系列独立发展的模块。浏览器厂商按CSS节奏快速创新，因此通过采用模块方法，CSS3规范里的元素能以不同速度向前发展，因为不同的浏览器厂商只支持给定特性。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="百度百科.CSS3\[EB/OL].(2024-06-17)\[2025-05-07]. https://baike.baidu.com/item/CSS3/4059544#reference-3.">[1]</span></a></sup></p></blockquote><hr /><h1 id="二-css3基础"><a class="markdownIt-Anchor" href="#二-css3基础"></a> 二、CSS3基础</h1><h2 id="1css3基本语法"><a class="markdownIt-Anchor" href="#1css3基本语法"></a> 1.CSS3基本语法</h2><p>CSS3样式表由一个或多个CSS3样式组成，，每个CSS3样式由选择器和声明组成。<br /><img src="20250506075340513.png" alt="CSS3样式的基本格式" /></p><ul><li>选择器：用于匹配<code>H5</code>中的不同元素，可以是标签名、类名、ID等。</li><li>声明：用于命令浏览器如何渲染指定的对象，由属性和属性值两部分组成。</li><li>属性：用于设置元素样式的项。</li><li>属性值：设置属性效果的参数，可以是带单位的数字或关键字。</li></ul><p>CSS3的注释格式： <code>/* 注释内容 */</code></p><h2 id="2css3的网页引入方式"><a class="markdownIt-Anchor" href="#2css3的网页引入方式"></a> 2.CSS3的网页引入方式</h2><h3 id="1-行内样式"><a class="markdownIt-Anchor" href="#1-行内样式"></a> ① 行内样式</h3><p><code>&lt;标签名 style=&quot;属性1: 属性值1; 属性2: 属性值2; ···&quot;&gt;&lt;/标签名&gt;</code></p><h3 id="2-内嵌样式表"><a class="markdownIt-Anchor" href="#2-内嵌样式表"></a> ② 内嵌样式表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">选择器&#123;</span><br><span class="language-css">属性<span class="hljs-number">1</span>: 属性值<span class="hljs-number">1</span>;</span><br><span class="language-css">属性<span class="hljs-number">2</span>: 属性值<span class="hljs-number">2</span>;</span><br><span class="language-css">···</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为保证浏览器提前识别解析CSS样式，<strong>一般将内嵌样式表写在HTM34L文件的<code>&lt;head&gt;</code>之中，<code>&lt;title&gt;</code>之后</strong>。</p><h3 id="3-链接样式表"><a class="markdownIt-Anchor" href="#3-链接样式表"></a> ③ 链接样式表</h3><p>将样式放在独立的CSS文件中，使用<code>&lt;link&gt;</code>标签进行链接:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;CSS3文件路径&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3css3选择器"><a class="markdownIt-Anchor" href="#3css3选择器"></a> 3.CSS3选择器</h2><h3 id="1-基本选择器"><a class="markdownIt-Anchor" href="#1-基本选择器"></a> ① 基本选择器</h3><table><thead><tr><th style="text-align:center">选择器</th><th style="text-align:center">格式</th><th style="text-align:center">举例</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>标签选择器</strong></td><td style="text-align:center"><code>标签名 &#123;&#125;</code></td><td style="text-align:center"><code>p &#123;font-size: 20px; color: lightBlue;&#125;</code></td><td></td></tr><tr><td style="text-align:center"><strong>类选择器</strong></td><td style="text-align:center"><code>.类名 &#123;&#125;</code></td><td style="text-align:center"><code>.author &#123;font-size: 20px; color: lightBlue;&#125;</code></td><td></td></tr><tr><td style="text-align:center"><strong>ID选择器</strong></td><td style="text-align:center"><code>#ID &#123;&#125;</code></td><td style="text-align:center"><code>#stu1 &#123;font-size: 20px; color: lightBlue;&#125;</code></td><td></td></tr><tr><td style="text-align:center"><strong>通配选择器</strong></td><td style="text-align:center"><code>* &#123;&#125;</code></td><td style="text-align:center"><code>* &#123;margin: 0; padding: 0; border: 2px;&#125;</code></td><td>用于选择所有标签</td></tr></tbody></table><p>注：可以为同一个元素设定多个<code>class类名</code>，通过多个选择器分别控制样式，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item-1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item-2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.item</span> &#123;  <span class="hljs-comment">/* 设置所有项目的共同样式 */</span></span><br><span class="language-css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;</span><br><span class="language-css">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e5e4e9</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.item-1</span> &#123;  <span class="hljs-comment">/* 单独设置item1的样式 */</span></span><br><span class="language-css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ef342a</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-复合选择器"><a class="markdownIt-Anchor" href="#2-复合选择器"></a> ② 复合选择器</h3><table><thead><tr><th style="text-align:center">选择器</th><th style="text-align:left">格式</th><th style="text-align:left">范围图示</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>交集选择器</strong></td><td style="text-align:left"><code>标签名.类名 &#123;&#125;</code><br><code>标签名#ID &#123;&#125;</code></td><td style="text-align:left">同时满足两个选择器的标签<br><img src="20250506112846756.png" alt="" /></td><td style="text-align:left">前者必须为标签选择器；后者为类选择器或ID选择器</td></tr><tr><td style="text-align:center"><strong>并集选择器</strong></td><td style="text-align:left"><code>选择器1，选择器2，选择器3，··· &#123;&#125;</code></td><td style="text-align:left">所有满足选择器的标签<br><img src="20250506113046770.png" alt="" /></td><td style="text-align:left">有利于减少CSS样式的冗余，提高网页加载速度</td></tr><tr><td style="text-align:center"><strong>后代选择器</strong></td><td style="text-align:left"><code>选择器1 选择器2 &#123;&#125;</code></td><td style="text-align:left">选择器1<br>├─ <mark>选择器2</mark><br>├─ 其他元素<br>│├─ <mark>选择器2</mark><br>│└─ 其他元素<br>└─ 其他元素</td><td style="text-align:left">选择<strong>所有后代元素</strong>，包括直接子元素和更深层级的元素</td></tr><tr><td style="text-align:center"><strong>子代选择器</strong></td><td style="text-align:left"><code>选择器1&gt;选择器2 &#123;&#125;</code></td><td style="text-align:left">选择器1<br>├─ <mark>选择器2</mark><br>├─ 其他元素<br>│├─ 选择器2<br>│└─ 其他元素<br>└─ 其他元素</td><td style="text-align:left">只选择<strong>直接子元素</strong>，不会深入到更低层级的后代</td></tr><tr><td style="text-align:center"><strong>相邻选择器</strong></td><td style="text-align:left"><code>选择器1+选择器2 &#123;&#125;</code></td><td style="text-align:left">根元素<br>├─ 选择器1<br>├─ <mark>选择器2</mark><br>├─ 其他元素<br>├─ 选择器2<br>└─ 其他元素</td><td style="text-align:left">选择元素1之后<strong>紧接着的</strong>兄弟元素元素2</td></tr><tr><td style="text-align:center"><strong>兄弟选择器</strong></td><td style="text-align:left"><code>选择器1~选择器2 &#123;&#125;</code></td><td style="text-align:left">根元素<br>├─ 选择器1<br>├─ <mark>选择器2</mark><br>├─ 其他元素<br>├─ <mark>选择器2</mark><br>└─ 其他元素</td><td style="text-align:left">选择元素1之后的<strong>所有</strong>元素2<br>（只要它们是同一父元素的子元素）</td></tr></tbody></table><h3 id="3-伪类选择器"><a class="markdownIt-Anchor" href="#3-伪类选择器"></a> ③ 伪类选择器</h3><ul><li>用于定义元素的特殊状态</li></ul><table>  <thead>    <tr>      <th style="text-align: center;">性质</th>      <th style="text-align: center;">分类</th>      <th style="text-align: center;">选择器</th>      <th>示例</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="5" style="text-align: center; vertical-align: middle;">动态伪类选择器</th>      <td rowspan="2" style="text-align: center; vertical-align: middle;">锚点伪类</td>      <td style="text-align: center;">:link</td>      <td>a:link {clolr: blue;}</td>      <td>只用于设置链接访问前的样式</td>    </tr>    <tr>      <td style="text-align: center;">:visited</td>      <td>a:link {clolr: red;}</td>      <td>只用于设置链接访问后的样式</td>    </tr>    <tr>      <td rowspan="3" style="text-align: center; vertical-align: middle;">行为伪类</td>      <td style="text-align: center;">:hover</td>      <td>a:hover {color: blue;}</td>      <td>设置鼠标悬浮的样式</td>    </tr>    <tr>      <td style="text-align: center;">:active</td>      <td>a:active {color: red;}</td>      <td>设置鼠标按下但未松开时的样式</td>    </tr>    <tr>      <td style="text-align: center;">:focus</td>      <td>a:hover {color: blue;}</td>      <td>设置元素获得焦点时的样式</td>    </tr>    <tr>      <th style="text-align: center; vertical-align: middle;">否定伪类选择器</th>      <td style="text-align: center; vertical-align: middle;">否定</td>      <td style="text-align: center;">:not()</td>      <td>grid:not(p) {color: red;}</td>      <td>匹配非指定元素或选择器的每个元素</td>    </tr>    <tr>      <th rowspan="3" style="text-align: center; vertical-align: middle;">状态伪类选择器</th>      <td style="text-align: center; vertical-align: middle;">启用</td>      <td style="text-align: center;">:enabled</td>      <td>input[type="text"]:enabled {color: blue;}</td>      <td>匹配每个被启用的元素(多用于表单)</td>    </tr>    <tr>      <td style="text-align: center; vertical-align: middle;">禁用</td>      <td style="text-align: center;">:disabled</td>      <td>input[type="text"]:disabled {color: grey;}</td>      <td>匹配每个被禁用的元素(多用于表单)</td>    </tr>    <tr>      <td style="text-align: center; vertical-align: middle;">选中</td>      <td style="text-align: center;">:checked</td>      <td>input[type="button"]:checked {color: blue;}</td>      <td>匹配每个被选中的元素(多用于按钮、复选框)</td>    </tr>  </tbody></table><p>备注：</p><ul><li>同时使用动态伪类选择器时，<code>:hover</code>必须在<code>:link</code>和<code>:visited</code>之后，<code>:active</code>必须在<code>:hover</code>之后；否则对应的样式会无法显示。</li><li>四者的顺序为：<strong>a:link -&gt; a:visited -&gt; a:hover -&gt; a:active</strong>*（简记：LoVe HAte）<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="牧之 |.a与a:link、a:visited、a:hover、a:active\[EB/OL].(2013-07-30)\[2025-05-07]. https://www.cnblogs.com/exmyth/p/3226654.html.">[2]</span></a></sup>。</li><li><code>结构伪类选择器</code>不常用，此处略去。</li><li>常见cursor属性(鼠标指针样式)见下表：<br /><img src="20250509093412491.png" alt="常见鼠标指针及说明" /></li></ul><h3 id="4-伪元素选择器"><a class="markdownIt-Anchor" href="#4-伪元素选择器"></a> ④ 伪元素选择器</h3><ul><li>用于定义元素<strong>指定部分</strong>的样式，使用<strong>双冒号</strong>为前缀。</li><li>基本格式：<code>选择器::伪类名 &#123;属性1：属性值1; 属性2：属性值2; ···&#125;</code></li></ul><table><thead><tr><th>选择器</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>::before</code></td><td>在选定的元素前添加内容</td><td><code>p::before &#123;content: &quot;CSS3&quot;;&#125;</code></td></tr><tr><td><code>::after</code></td><td>在选定的元素后添加内容</td><td><code>p::after &#123;content: &quot;CSS3&quot;;&#125;</code></td></tr></tbody></table><ul><li>备注：使用伪元素选择器添加的内容无法被鼠标框选选中。</li></ul><h3 id="5-属性选择器"><a class="markdownIt-Anchor" href="#5-属性选择器"></a> ⑤ 属性选择器</h3><ul><li>根据标签的属性匹配元素</li></ul><table><thead><tr><th>选择器</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>E[attr]</code></td><td>用于匹配所有拥有attr属性的E元素，无论属性的值是多少</td><td><code>a[id] &#123;color: blue;&#125;</code><br><code>a[id][class] &#123;color: blue;&#125;</code></td></tr><tr><td><code>E[attr=&quot;value&quot;]</code></td><td>用于匹配所有attr属性值为value的E元素</td><td><code>a[id=&quot;first&quot;] &#123;color: red;&#125;</code><br><code>a[id=&quot;first&quot;][class=&quot;nav&quot;] &#123;color: red;&#125;</code></td></tr><tr><td><code>E[attr~=&quot;value&quot;]</code></td><td>用于匹配attr属性列表中包含value的E元素</td><td><code>a[title~=&quot;web&quot;] &#123;color: red;&#125;</code></td></tr><tr><td><code>E[attr^=&quot;value&quot;]</code></td><td>用于匹配attr属性列表以value开头的E元素</td><td><code>a[title^=&quot;web&quot;] &#123;color: red;&#125;</code></td></tr><tr><td><code>E[attr$=&quot;value&quot;]</code></td><td>用于匹配attr属性列表以value结尾的E元素</td><td><code>a[title$=&quot;web&quot;] &#123;color: red;&#125;</code></td></tr><tr><td><code>E[attr*=&quot;value&quot;]</code></td><td>用于匹配attr属性列表中包含&quot;value&quot;字符串的E元素</td><td><code>a[title*=&quot;web&quot;] &#123;color: red;&#125;</code></td></tr><tr><td><code>E[attr|=&quot;value&quot;]</code></td><td>用于匹配attr属性为&quot;value&quot;或以以&quot;value&quot;开头的E元素</td><td><code>a[title|=&quot;web&quot;] &#123;color: red;&#125;</code></td></tr></tbody></table><h2 id="4css3的继承性与层叠性"><a class="markdownIt-Anchor" href="#4css3的继承性与层叠性"></a> 4.CSS3的继承性与层叠性</h2><ul><li>继承性：在HTML5结构中，后代元素会继承祖先元素的CSS3样式(不可继承边框、边界、背景、定位、布局、尺寸等)。</li><li>层叠性：为一个元素设置多个样式时，高优先级的样式会覆盖低优先级的样式。<ul><li>优先级递减排序：行内样式 &gt; ID选择器 &gt; 类、伪类、属性选择器 &gt; 标签选择器 &gt; 通配选择器 &gt; 继承样式</li><li>权重相同时遵循<strong>就近原则</strong></li></ul></li></ul><hr /><h1 id="三-css3常用属性"><a class="markdownIt-Anchor" href="#三-css3常用属性"></a> 三、CSS3常用属性</h1><h2 id="1css3常用长度单位及颜色表示"><a class="markdownIt-Anchor" href="#1css3常用长度单位及颜色表示"></a> 1.CSS3常用长度单位及颜色表示</h2><ul><li>绝对长度：是固定不变的长度，多用于可以固定大小或位置的情况<ul><li>cm - 厘米</li><li>mm - 毫米</li><li>in - 英寸(inch)</li><li><strong>px - 像素(pixel)</strong> <mark>[常用]</mark></li><li>pt - 点(point)</li><li>pc - 派卡(pica)</li><li>换算关系：1in = 2.54cm = 25.4 mm = 72pt = 6pc<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="勤奋的夕阳一刀.CSS里面的长度单位px/pt/em/in/pc/mm/cm解释\[EB/OL].(2015-10-07)\[2025-05-08]. https://www.cnblogs.com/913815ccmm/p/4858638.html.">[3]</span></a></sup></li></ul></li><li>相对长度：是相对于另一个长度属性的长度，多用于响应式布局<ul><li>em - 相对于元素的字体大小</li><li>ex - 相对于当前字体的高度</li><li>ch - 相对于&quot;0&quot;的宽度</li><li>rem - 相对于根元素的字体大小</li><li>vw - 相对于视口(浏览器窗口)宽度的1%</li><li>vh - 相对于视口(浏览器窗口)高度的1%</li><li>vmin - 相对于视口(浏览器窗口)宽度的1%</li><li>vmax - 相对于视口(浏览器窗口)宽度的1%</li><li><strong>% - 相对于父元素的尺寸</strong> <mark>[常用]</mark></li></ul></li><li>颜色值<ul><li><strong>颜色名称</strong>：直接写明元素的颜色单词<ul><li>例：<code>p &#123;background-color: lightblue;&#125;</code></li></ul></li><li><strong>十六进制值表示</strong>：由<code>#</code>符号开头，后面跟随六个十六进制数字，分别表示红、绿、蓝三种颜色的值。<ul><li>例：<code>p &#123;color: #0077FF;&#125;</code></li></ul></li><li><strong>RGB 值</strong>：使用<code>rgb()</code>函数来定义颜色，参数为红、绿、蓝三种颜色的值，范围从 0 到 255。<ul><li>例： <code>p &#123;color: rgb(255, 99, 71);&#125;</code></li></ul></li></ul></li></ul><blockquote><p>在不同的分辨率下，像素点的大小是不同的。所以同一个网页，以px作长度单位时，在不同的分辨率下显示的大小是不同的。在低分辨率下，像素点较大，细节不够清晰，显示的页面也大，但模糊不清。<br />实际上,无论是相对还是绝对单位,最终都转化为px。所以一般来说，在网页制作时，基本单位都选择px而不是pt，因为pt也是通过浏览器的DPI转换成px显示（比如FireFox的DPI是96，则有9pt = 12px）。不仅pt，cm/in/mm等都是转换成px的。所以无论用绝对还是相对，在不同分辨率下都是会变的。不要认为把长度设置为3cm，它就会在不同的分辨率下保持3cm不变。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="勤奋的夕阳一刀.CSS里面的长度单位px/pt/em/in/pc/mm/cm解释\[EB/OL].(2015-10-07)\[2025-05-08]. https://www.cnblogs.com/913815ccmm/p/4858638.html.">[3]</span></a></sup></p></blockquote><h2 id="2文本属性"><a class="markdownIt-Anchor" href="#2文本属性"></a> 2.文本属性</h2><h3 id="1-字体样式"><a class="markdownIt-Anchor" href="#1-字体样式"></a> ① 字体样式</h3><ul><li>字体样式<ul><li>格式：font-family: “”;</li><li>示例：<code>p &#123;font-family: &quot;宋体&quot;&#125;</code>、<code>span &#123;font-family: &quot;Times New Roman&quot;&#125;</code></li><li>备注：&quot;Times New Roman&quot;多用于数字的字体</li></ul></li><li>字号(字体大小)样式<ul><li>格式：font-size: 值 | 关键字;</li><li>示例：<code>p &#123;font-size: 20px;&#125;</code></li><li>备注：<ul><li>值可以取以px、em、pt等为单位的数值，也可以取基于父元素或默认值的百分比。</li><li>关键字包括xx-smal、x-small、small、large、x-large、xx-large，以及根据父元素字体大小变化的smaller和larger。</li></ul></li></ul></li><li>字体粗细样式：<ul><li>格式：font-weight: <strong>normal(正常)</strong> | bold(加粗) | lighter(减细) | number(100-900之间的九个数值);</li><li>示例：<code>p &#123;font-weight: blod;&#125;</code></li><li>备注：Win环境下，文本默认字体为&quot;微软雅黑&quot;，仅支持400与700两种字粗，设置为其他值时会用这两种效果替换，可能看不出变换。</li></ul></li><li>字体风格样式：<ul><li>格式：font-style: <strong>normal(正常)</strong> | italic(斜体) | oblique(倾斜)</li><li>示例：<code>span &#123;font-style: italic;&#125;</code></li><li>备注：oblique适用于没有斜体样式的字体，将其强制倾斜。</li></ul></li></ul><h3 id="2文本格式"><a class="markdownIt-Anchor" href="#2文本格式"></a> ②文本格式</h3><table><thead><tr><th>项目</th><th>格式</th><th>备注</th></tr></thead><tbody><tr><td><strong>缩进</strong></td><td>text-indent: <strong>0</strong> | 缩进长度;</td><td>长度可以是pm、em、pt、%</td></tr><tr><td><strong>水平对齐</strong></td><td>text-align: <strong>left</strong> | right | center | justify(两端对齐);</td><td></td></tr><tr><td><strong>修饰</strong></td><td>text-decoration: <strong>none</strong> | underline | overline | line-through(删除线);</td><td></td></tr><tr><td><strong>省略</strong></td><td>text-overflow: <strong>clip(不省略)</strong> | ellipsis(省略)</td><td>隐藏文本宽度过大溢出的部分，用…标记</td></tr><tr><td><strong>字符间距</strong></td><td>word-spacing: <strong>normal(无间距)</strong> | 间距值;</td><td>字母之间的间距，默认为0</td></tr><tr><td><strong>单词间距</strong></td><td>letter-spacing: <strong>normal(正常间距)</strong> | 间距值;</td><td>单词之间的间距</td></tr><tr><td><strong>行高</strong></td><td>line-height: <strong>normal(正常行高)</strong> | number(当前字体高度的倍数) | 高度值;</td><td></td></tr><tr><td><strong>自动换行</strong></td><td>word-break: <strong>normal(浏览器规则)</strong> | break-all(可截断单词) | keep-all(只在空格处换行);</td><td></td></tr><tr><td><strong>空白符处理</strong></td><td>white-space: <strong>normal(忽略空白)</strong> | nowrap | pre | pre-line | pre-wrap;</td><td>较为复杂，用时再查询规则，此处忽略。</td></tr><tr><td><strong>溢出内容处理</strong></td><td>overflow: <strong>visible(溢出在边框外)</strong> | hidden | scroll(始终提供滚动条) | auto(有溢出时提供滚动条);</td><td></td></tr></tbody></table><h2 id="3图像属性"><a class="markdownIt-Anchor" href="#3图像属性"></a> 3.图像属性</h2><table><thead><tr><th style="text-align:center">项目</th><th>格式</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>宽度</strong></td><td>width: 宽度值;</td><td></td></tr><tr><td style="text-align:center"><strong>高度</strong></td><td>height: 高度值;</td><td></td></tr><tr><td style="text-align:center"><strong>边框宽度</strong></td><td>border-width: 宽度值*4;</td><td></td></tr><tr><td style="text-align:center"><strong>边框风格</strong></td><td>border-style: 样式*4;</td><td>样式 = solid(单实线) | dotted(点线) | dashed(虚线) | <br>          double(双线) | groove(槽线) | ridge(谷线)</td></tr><tr><td style="text-align:center"><strong>边框颜色</strong></td><td>border-color: 颜色值*4;</td><td>颜色值的表示见本篇笔记的 <strong>三、1</strong> 部分</td></tr><tr><td style="text-align:center"><strong>不透明度</strong></td><td>opacity: 0~1;</td><td>数值越高越不透明</td></tr><tr><td style="text-align:center"><strong>圆角</strong></td><td>border-radius: 值*4;</td><td>在中间添加-top-right-等可单独设置每个角的圆弧大小</td></tr><tr><td style="text-align:center"><strong>阴影</strong></td><td>box-shadow: 水平位置 垂直位置 模糊距离 阴影尺寸 outset | inset;</td><td>可直接使用阴影效果生成工具<a href="https://neumorphism.io/#e0e0e0">Neumorphism.io</a>、<a href="https://box-shadow.dev/">Box Shadows</a>等直接生成需要的CSS阴影样式</td></tr></tbody></table><ul><li>备注：<ul><li>属性值列表中标注了<code>*4</code>的，表示可以设置1-4个值，分别控制：<strong>上-右-下-左 | 上-左右-下 | 上下-左右 | 上-右-下-左</strong>。同时，可以在属性项中加上<code>-方向-</code>指定设置其中某个方向上的样式。<ul><li>例：<code>img &#123;border-top-width: 2px;&#125;</code>，方向可选：left | right | top | bottom</li></ul></li><li>使用<code>border属性</code>可以在同一个声明中统一设置边框宽度、风格和颜色。<ul><li>例： <code>img &#123;border: 2px solid black;&#125;</code></li></ul></li></ul></li></ul><h2 id="4网页背景"><a class="markdownIt-Anchor" href="#4网页背景"></a> 4.网页背景</h2><table><thead><tr><th style="text-align:center">项目</th><th>格式</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>背景颜色</strong></td><td>background-color: transparent | 颜色值;</td><td></td></tr><tr><td style="text-align:center"><strong>背景图像</strong></td><td>background-image: <strong>none</strong> | <code>url(图片路径)</code>;</td><td>如<code>body &#123;background-image: url(bg.png);&#125;</code></td></tr><tr><td style="text-align:center"><strong>显示方式</strong></td><td>background-repeat: <strong>repeat</strong> | repeat-x | <br>repeat-y | no-repeat | round | space;</td><td>repeat表现为重复，round表现为缩放填充，<br>space表现为按相同间距平铺填充</td></tr><tr><td style="text-align:center"><strong>起始位置</strong></td><td>background-position: 关键字 | 偏移量;</td><td><code>水平 垂直</code>格式，关键字如<code>left top</code>，偏移量如<code>0% 0%</code>或<code>0pos 0pos</code>(单位为px或em)，缺省其中一个时，缺省项为center或50%<br></td></tr><tr><td style="text-align:center"><strong>固定方式</strong></td><td>background-attachment: <strong>scroll(相对元素固定)</strong> | fixed(相对浏览器窗口固定) | lcoal(相对元素内容固定);</td><td></td></tr></tbody></table><ul><li>备注：<ul><li>可使用<code>background属性</code>在同一声明中设置多个属性值, 其中必须包含颜色或图像，其他可选<ul><li>如：<code>body &#123;background: url(bg.png) repeat scroll;&#125;</code></li></ul></li></ul></li></ul><h2 id="5列表属性"><a class="markdownIt-Anchor" href="#5列表属性"></a> 5.列表属性</h2><table><thead><tr><th style="text-align:center">项目</th><th>格式</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center">项目符号</td><td>list-type: 关键字;</td><td>关键字包括：<strong>disc(●)</strong> | circle(○) | none | square(■) | decimal(1) | lower-alpha(a) | upper-alpha(A) | lower-roman(i) | upper-roman(Ⅰ) | cjk-ideographic(一)</td></tr><tr><td style="text-align:center">项目符号位置</td><td>list-style-position: <strong>outside</strong> | inside;</td><td>outside表示符号位于文本左侧，且在文本以外；inside表示符号位于文本以内，文本根据符号位置对齐</td></tr><tr><td style="text-align:center">符号自定义图片</td><td>list-style-image: <strong>none</strong> | <code>url(图片路径)</code>;</td><td></td></tr></tbody></table><ul><li>备注：<ul><li>常用于取消列表的默认样式。</li><li>使用<code>list-style属性</code>在同一声明中设置多个属性值。</li></ul></li></ul><h2 id="6超链接属性"><a class="markdownIt-Anchor" href="#6超链接属性"></a> 6.超链接属性</h2><ul><li>一般通过设置<strong>载体</strong>的样式来设置超链接的样式，载体可以是图片、文本等，相关样式已在前文给出。</li><li>修改超链接访问前后的样式，使用<strong>动态伪类选择器</strong>实现。</li></ul><h2 id="7表格属性"><a class="markdownIt-Anchor" href="#7表格属性"></a> 7.表格属性</h2><table><thead><tr><th style="text-align:center">项目</th><th>格式</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center">标题位置</td><td>caption-side: <strong>top</strong> | bottom;</td><td></td></tr><tr><td style="text-align:center">边框合并</td><td>border-callapse: <strong>saparate(分开)</strong> | collapse(合并);</td><td></td></tr><tr><td style="text-align:center">边框间距</td><td>boder-spacing: 间距值;</td><td>写一个值控制所有方向，两个值分别控制水平和竖直方向；间距不可取负值</td></tr><tr><td style="text-align:center">显示空单元格</td><td>empty-cells: <strong>show</strong> | hide;</td><td>选择hide时，不绘制空单元格的边框</td></tr><tr><td style="text-align:center">渲染方法</td><td>table-layout: <strong>auto</strong> | fixed;</td><td>默认情况下，列宽由单元格内容决定；设为fixed时，列宽由表格宽度和列宽度确定</td></tr></tbody></table><h2 id="8表单属性"><a class="markdownIt-Anchor" href="#8表单属性"></a> 8.表单属性</h2><ul><li>对文本、图片、选项符号的样式调整已在前文给出</li></ul><blockquote><p>“设置表单控件<strong>获得焦点时</strong>的样式需要使用<code>:focus</code>选择器。设置<strong>单选钮和复选框</strong>的样式时，可以先将它们隐藏，再通过设置其提示信息的样式来实现单选钮与复选框的功能。此时就需要使用伪类选择器<code>:checked</code>匹配选中的单选钮或复选框，接着搭配使用其他选择器匹配选中的单选钮或复选框的提示信息，然后设置相应提示信息的样式，就可以通过提示信息的样式变化提醒用户选择了哪个选项，从而在隐藏单选钮或复选框的同时 不影响使用它们的功能。” ——《Web前端技术》P137</p></blockquote><hr /><h1 id="四-css3布局"><a class="markdownIt-Anchor" href="#四-css3布局"></a> 四、CSS3布局</h1><h2 id="1盒子模型"><a class="markdownIt-Anchor" href="#1盒子模型"></a> 1.盒子模型</h2><ul><li>HTML中大部分的元素(<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code>、<code>&lt;div&gt;</code>等)都可以认为是一个盒子。</li><li>盒子由内容与边框组成；内容与边框之间的距离为内边距，边框与其他盒子的边框之间的距离为外边距。</li></ul><h3 id="1-基本结构"><a class="markdownIt-Anchor" href="#1-基本结构"></a> ① 基本结构</h3><p><img src="20250509170929341.png" alt="" /></p><div ></div><h3 id="2-盒子模型的属性"><a class="markdownIt-Anchor" href="#2-盒子模型的属性"></a> ② 盒子模型的属性</h3><ul><li>盒子的内容<ul><li>使用属性<code>width</code>、<code>height</code>设置内容的宽度和高度。</li><li>通过<code>box-sizing</code>: <strong>content-box(作用于内容区域)</strong> | border-box(作用于边框及内部区域);来设置<code>width</code>与<code>height</code>属性的作用范围。</li></ul></li><li>盒子的边框：<ul><li>使用属性设置盒子模型的边框。具有子属性<code>border-width</code>、<code>border-style</code>、<code>border-radius</code>和<code>border-color</code>分别用于设置边框的宽度、样式、圆角和颜色等样式。</li></ul></li><li>盒子的内边距：<ul><li>格式：<code>padding: 边距值*4 | auto</code>;，默认值为0，选择auto时，浏览器自动计算内边距。</li><li>内边距可以用于撑大盒子的范围，盒子的宽高会跟随内边距变化。盒子的背景也会延伸到内边距范围(上图浅绿色部分)，而不仅仅是局限于内容的范围(上图浅蓝色部分)。</li></ul></li><li>盒子的外边距：<ul><li>格式：<code>margin: 边距值*4 | auto</code>;，默认值为0，选择auto时，浏览器自动计算外边距。</li></ul></li></ul><h3 id="3-不同类型的盒子模型"><a class="markdownIt-Anchor" href="#3-不同类型的盒子模型"></a> ③ 不同类型的盒子模型</h3><ul><li>块级元素(<code>&lt;h1&gt;~&lt;h6&gt;</code>、<code>&lt;p&gt;</code>、<strong><code>&lt;div&gt;</code></strong>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>、<code>&lt;dd&gt;</code>、<code>&lt;dt&gt;</code>、<code>&lt;dl&gt;</code>等)<ul><li>在页面中独占一行，宽度和高度默认填满父元素，通过<code>width</code>和<code>height</code>属性设置宽度和高度。</li><li><strong>即使设置了宽度，仍然会独占一行。</strong> 可以用<code>padding</code>和<code>margin</code>设置内外边距。</li></ul></li><li>行内元素(<code>&lt;a&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;del&gt;</code>、<code>&lt;s&gt;</code>、<code>&lt;ins&gt;</code>、<code>&lt;u&gt;</code>、<strong><code>&lt;span&gt;</code></strong>、<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;br/&gt;</code>等)<ul><li>在页面中按从左到右、从上到下的顺序布局，不会独占一行。宽度和高度取决于内容的大小，<strong>无法</strong> 通过<code>width</code>和<code>height</code>设置盒子的宽高。</li><li><strong>对行内元素应用上、下方向上的外边距不会显示效果。</strong>(行内元素无法拉高父元素的高度)</li></ul></li><li>行内块元素(显示在同一行的块级元素)<ul><li>可以为其设置宽高、边距、边框等属性。</li><li>使用<code>display元素</code>设置元素的类型：display: <strong>none</strong> | block(块级元素，自带换行符) | inline(行内元素) | inline-block(行内块元素)</li></ul></li></ul><h2 id="2元素的排版定位-布局"><a class="markdownIt-Anchor" href="#2元素的排版定位-布局"></a> 2.元素的排版(定位、布局)</h2><h3 id="1-标准流排版"><a class="markdownIt-Anchor" href="#1-标准流排版"></a> ① 标准流排版</h3><ul><li>不使用任何与排版或定位相关的CSS规则时，各个元素<strong>默认的排版方式</strong>，盒子排成序列，同级盒子在父级盒子中按照行内或者块级元素的规则进行排列。</li><li>这样的页面类似于河流的干流与支流，故称之为&quot;<strong>标准流</strong>&quot;或&quot;<strong>文档流</strong>&quot;。<br /><img src="20250510134621322.png" alt="" /></li></ul><h3 id="2-浮动排版常用于图文混排"><a class="markdownIt-Anchor" href="#2-浮动排版常用于图文混排"></a> ② 浮动排版(常用于图文混排)</h3><ul><li>在浮动排版中，块级元素的宽度由父级盒子的(其他)内容与内边距决定，而不再独占一行或占满父元素宽度。</li><li>任何显示在浮动元素下方的元素都会在网页中向上移动，如果上移的元素中包含文本，文本会环绕在浮动元素的周围，多用于图文混排效果。</li></ul><table><thead><tr><th style="text-align:center">项目</th><th>格式</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center">浮动设置</td><td>float: <strong>none</strong> | left | right;</td><td>left表示元素向左移动，right表示元素向右移动(见下表)，此属性在图片元素中设置</td></tr><tr><td style="text-align:center">浮动清除</td><td>cear: <strong>none</strong> | left | right | both;</td><td>防止元素不必要的上移导致排版混乱(如下图所示)，此属性在文本元素中设置</td></tr></tbody></table><ul><li><p>浮动效果图示：<br /><img src="20250510154838571.png" alt="" /></p></li><li><p>浮动方向说明：</p></li></ul><table><thead><tr><th style="text-align:center">方向</th><th>图示</th></tr></thead><tbody><tr><td style="text-align:center">未设置图片浮动</td><td><img src="20250510142921379.png" alt="" /></td></tr><tr><td style="text-align:center">设置图片向左浮动<br>(float: left;)</td><td><img src="20250510142946510.png" alt="" /></td></tr><tr><td style="text-align:center">设置图片向右浮动<br>(float: right;)</td><td><img src="20250510143144774.png" alt="" /></td></tr></tbody></table><h3 id="高度塌陷问题及解决方法"><a class="markdownIt-Anchor" href="#高度塌陷问题及解决方法"></a> ☆ “高度塌陷”问题及解决方法</h3><ul><li>元素设置为浮动后，父元素高度不能再根据子元素自适应拓展，即出现“高度塌陷”的问题。如下图所示：<br /><img src="20250510155836547.png" alt="" /></li><li>为了解决这样的问题，可以给图片元素添加一个<strong>设置了浮动清除的非浮动兄弟元素</strong>(如<code>&lt;div style=&quot; clear: both; height: 0px;&quot;&gt;&lt;/div&gt;</code>)。<br /><img src="20250510160430183.png" alt="" /></li><li>此时，父元素识别并根据兄弟元素进行高度拓展，解决了高度塌陷的问题。</li></ul><h3 id="3-定位排版对网页元素进行精确定位"><a class="markdownIt-Anchor" href="#3-定位排版对网页元素进行精确定位"></a> ③ 定位排版(对网页元素进行精确定位)</h3><ul><li>定位方式：position: <strong>static</strong> | relative | absolute | fixed;</li></ul><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">名称</th><th>描述</th><th>图示 (在各模式下，对box2应用右下方向各50px的偏移)</th></tr></thead><tbody><tr><td style="text-align:center">static</td><td style="text-align:center">静态定位</td><td>默认定位模式，元素按照标准流显示</td><td><img src="20250510171731756.png" alt="" /></td></tr><tr><td style="text-align:center">relative</td><td style="text-align:center">相对定位</td><td>元素以<strong>自身在标准流布局中的位置</strong>为基准进行定位，原有的位置会留空</td><td><img src="20250510171716066.png" alt="" /></td></tr><tr><td style="text-align:center">absolute</td><td style="text-align:center">绝对定位</td><td>元素以<strong>上一个已定位元素</strong>为基准进行定位，原有的位置不再保留，与基准元素堆叠在一起</td><td><img src="20250510171841117.png" alt="" /></td></tr><tr><td style="text-align:center">fixed</td><td style="text-align:center">固定定位</td><td>元素以<strong>浏览器窗口</strong>为基准进行定位，原有的位置不再保留，也不会随页面滚动(常用于侧边广告、&quot;回到顶部&quot;按钮等元素的固定)</td><td><img src="20250510173028487.png" alt="" /></td></tr></tbody></table><ul><li>偏移量: 根据上述基准确定元素的准确位置(定位方式为<code>static</code>时，偏移量的设置无效)</li></ul><table><thead><tr><th style="text-align:center">项目</th><th>格式</th></tr></thead><tbody><tr><td style="text-align:center">左侧偏移量</td><td>left: 偏移值;</td></tr><tr><td style="text-align:center">右侧偏移量</td><td>right: 偏移值;</td></tr><tr><td style="text-align:center">顶部偏移量</td><td>top: 偏移值;</td></tr><tr><td style="text-align:center">底部偏移量</td><td>bottom: 偏移值;</td></tr></tbody></table><ul><li>堆叠顺序：默认情况下，标准流中后出现的元素在上层。可以通过<code>z-index</code>属性调整堆叠关系。<ul><li>属性值可以是正数、<strong>0</strong> 和负数。一般取<code>99</code>和<code>-99</code>来实现元素的置顶与置底效果。</li><li>父元素的<code>z-index</code>无法与子元素进行比较；想让父元素显示在子元素上方，可以将子元素的<code>z-index</code>设为负值。</li></ul></li></ul><h2 id="3flex布局sup-idfnref4-classfootnote-refa-hreffn4-relfootnotespan-classhint-top-hint-rounded-aria-label阮一峰flex-布局教程语法篇ebol2015-07-102025-05-10-httpswwwruanyifengcomblog201507flex-grammarhtml4spanasup"><a class="markdownIt-Anchor" href="#3flex布局sup-idfnref4-classfootnote-refa-hreffn4-relfootnotespan-classhint-top-hint-rounded-aria-label阮一峰flex-布局教程语法篇ebol2015-07-102025-05-10-httpswwwruanyifengcomblog201507flex-grammarhtml4spanasup"></a> 3.Flex布局<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="阮一峰.Flex 布局教程：语法篇\[EB/OL].(2015-07-10)\[2025-05-10]. https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">[4]</span></a></sup></h2><h3 id="1-flex概述"><a class="markdownIt-Anchor" href="#1-flex概述"></a> ① Flex概述</h3><blockquote><p>布局的传统解决方案，基于<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box_model">盒状模型</a>，依赖 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display"><code>display</code></a> 属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"><code>position</code></a>属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float"><code>float</code></a>属性实现，不便于实现一些较为复杂(如垂直居中)的布局。<br />2009年，<strong>W3C</strong>提出了一种新的方案 —— <strong>Flex(Flexible Box, 弹性盒布局)</strong>，可以简便、完整、响应式地为盒状模型提供灵活的布局，目前已经得到了所有浏览器的支持。</p></blockquote><h3 id="2-基本概念"><a class="markdownIt-Anchor" href="#2-基本概念"></a> ② 基本概念</h3><ul><li>采用Flex布局的元素称为<strong>Flex容器(Flex container)</strong>，简称 <strong>“容器”</strong>。容器的所有子元素成为其成员，称为<strong>Flex项目(Flex item)</strong>,简称 <strong>“项目”</strong>。</li><li>容器默认存在两根轴：水平的<strong>主轴(main axis)</strong> 和 <strong>垂直的交叉轴(cross axis)</strong>。<ul><li>主轴的开始位置(与边框的交叉点)叫做 <strong><code>main start</code></strong> ，结束位置叫做 <strong><code>main end</code></strong>。</li><li>交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</li></ul></li><li>项目默认沿主轴排列：<ul><li><code>main size</code>：单个项目占据的主轴空间</li><li><code>cross size</code>：单个项目占据的交叉轴空间</li></ul></li><li>Flex容器的各个概念如下图<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="阮一峰.Flex 布局教程：语法篇\[EB/OL].(2015-07-10)\[2025-05-10]. https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">[4]</span></a></sup>所示：<br /><img src="20250511010807469.png" alt="" /></li></ul><h3 id="3-容器属性设置在容器上在线演示工具"><a class="markdownIt-Anchor" href="#3-容器属性设置在容器上在线演示工具"></a> ③ 容器属性(设置在容器上,<a href="http://jack.jackafan.top/zsd/css/flex/">在线演示工具</a>)</h3><h4 id="display-flex-指定容器为flex布局"><a class="markdownIt-Anchor" href="#display-flex-指定容器为flex布局"></a> display: flex; 指定容器为Flex布局</h4><ul><li>使用 <code>display: inline-flex;</code> 的声明，可以将任何一个<strong>行内元素</strong>指定为Flex布局。</li><li>在<strong>WebKit内核的浏览器</strong>(如Safari、iOS版本的Chrome和Edge)上使用Flex布局，应该使用 <code>display: -webkit-flex;</code> 这样的声明。</li><li>设为Flex布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</li></ul><h4 id="flex-direction属性主轴方向项目布局方向"><a class="markdownIt-Anchor" href="#flex-direction属性主轴方向项目布局方向"></a> flex-direction属性：主轴方向(项目布局方向)</h4><table><thead><tr><th>取值</th><th>row</th><th>row-reverse</th><th>column</th><th>column-reverse</th></tr></thead><tbody><tr><td>描述</td><td>从左往右，默认</td><td>从右往左</td><td>从上到下</td><td>从下到上</td></tr><tr><td>图示</td><td><img src="20250511150748743.png" alt="" /></td><td><img src="20250511150834951.png" alt="" /></td><td><img src="20250511150850869.png" alt="" /></td><td><img src="20250511151756443.png" alt="" /></td></tr></tbody></table><h4 id="flex-wrap属性-内容换行"><a class="markdownIt-Anchor" href="#flex-wrap属性-内容换行"></a> flex-wrap属性: 内容换行</h4><table><thead><tr><th>取值</th><th>nowrap</th><th>wrap</th><th>warp-reverse</th></tr></thead><tbody><tr><td>描述</td><td>不换行(宽度不足时挤压内容的宽度)，默认</td><td>向下换行(新的一行在下方)</td><td>向上换行(新的一行在上方)</td></tr><tr><td>图示</td><td><img src="20250511152039858.png" alt="" /></td><td><img src="20250511152051854.png" alt="" /></td><td><img src="20250511152110422.png" alt="" /></td></tr></tbody></table><h4 id="justify-content属性-主轴对齐"><a class="markdownIt-Anchor" href="#justify-content属性-主轴对齐"></a> justify-content属性: 主轴对齐</h4><table><thead><tr><th>取值</th><th>flex-start</th><th>flex-end</th><th>center</th><th>space-between</th><th>space-evenly</th><th>space-around</th></tr></thead><tbody><tr><td>描述</td><td>对齐主轴起点，默认</td><td>对齐主轴终点</td><td>居中对齐</td><td>分散对齐，两边紧贴</td><td>分散对齐，间距相同</td><td>分散对齐，两端间距减半</td></tr><tr><td>图示</td><td><img src="20250511152945287.png" alt="" /></td><td><img src="20250511153011486.png" alt="" /></td><td><img src="20250511153046737.png" alt="" /></td><td><img src="20250511153113530.png" alt="" /></td><td><img src="20250511153133123.png" alt="" /></td><td><img src="20250511153148211.png" alt="" /></td></tr></tbody></table><h4 id="align-items属性-单行交叉轴对齐"><a class="markdownIt-Anchor" href="#align-items属性-单行交叉轴对齐"></a> align-items属性: 单行交叉轴对齐</h4><table><thead><tr><th>取值</th><th>flex-start</th><th>flex-end</th><th>center</th><th>baseline</th><th>stretch</th></tr></thead><tbody><tr><td>描述</td><td>对齐交叉轴起点</td><td>对齐交叉轴终点</td><td>居于交叉轴为中心分布</td><td>对齐首行文字</td><td>若内容未设高度或设为auto，<br>占满父容器高度，默认</td></tr><tr><td>图示</td><td><img src="20250511153903434.png" alt="" /></td><td><img src="20250511153941526.png" alt="" /></td><td><img src="20250511154446756.png" alt="" /></td><td><img src="20250511154036067.png" alt="" /></td><td><img src="20250511154057001.png" alt="" /></td></tr></tbody></table><h4 id="align-content属性-多行交叉轴对齐"><a class="markdownIt-Anchor" href="#align-content属性-多行交叉轴对齐"></a> align-content属性: 多行交叉轴对齐</h4><table><thead><tr><th>取值</th><th>stretch</th><th>flex-start</th><th>flex-end</th><th>center</th><th>space-between</th><th>space-evenly</th><th>space-around</th></tr></thead><tbody><tr><td>描述</td><td>默认布局</td><td>对齐顶部</td><td>对齐底部</td><td>居中对齐</td><td>分散对齐，两边紧贴</td><td>分散对齐，间距相同</td><td>分散对齐，两端间距减半</td></tr><tr><td>图示</td><td><img src="20250511154703419.png" alt="" /></td><td><img src="20250511154723483.png" alt="" /></td><td><img src="20250511154745362.png" alt="" /></td><td><img src="20250511154801722.png" alt="" /></td><td><img src="20250511154818665.png" alt="" /></td><td><img src="20250511154844911.png" alt="" /></td><td><img src="20250511154903196.png" alt="" /></td></tr></tbody></table><h4 id="在f12开发人员工具中快捷调整flex布局的容器属性"><a class="markdownIt-Anchor" href="#在f12开发人员工具中快捷调整flex布局的容器属性"></a> ☆ 在F12开发人员工具中快捷调整Flex布局的容器属性：</h4><p>对于上述的属性，在Chrome中F12打开开发人员工具后，在“样式”部分指定某个容器为Flex布局时，会自动出现调整各项参数的窗口，调整后将新的样式复制到源码中即可(&quot;开发人员工具&quot;只可临时修改，无法修改源代码内容)。<br /><img src="20250511020013795.png" alt="" /></p><h3 id="4-项目属性设置在项目上"><a class="markdownIt-Anchor" href="#4-项目属性设置在项目上"></a> ④ 项目属性(设置在项目上)</h3><h4 id="order属性定义项目的排列顺序"><a class="markdownIt-Anchor" href="#order属性定义项目的排列顺序"></a> order属性：定义项目的排列顺序</h4><ul><li>可以为负整数值、0和正整数值，默认为0。</li><li>使用方法类似于<code>z-index</code>属性，可以分别用-99,99来让某个元素置为最后一个和第一个。</li></ul><h4 id="flex-basis属性定义了在分配多余空间之前项目占据的主轴空间"><a class="markdownIt-Anchor" href="#flex-basis属性定义了在分配多余空间之前项目占据的主轴空间"></a> flex-basis属性：定义了在分配多余空间之前，项目占据的主轴空间</h4><ul><li>默认值为<code>auto</code>，即项目的本来大小。浏览器根据此属性计算主轴是否有多余空间。</li><li>也可以设置为固定的数值，使项目占用固定的空间。</li></ul><h4 id="flex-grow属性定义项目的空间占用比例"><a class="markdownIt-Anchor" href="#flex-grow属性定义项目的空间占用比例"></a> flex-grow属性：定义项目的空间占用比例</h4><ul><li>默认为0，不放大(不等分剩余空间)<ul><li>若所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间</li><li>若某项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</li><li><img src="20250511155930309.png" alt="" /></li></ul></li></ul><h4 id="fiex-shrink属性定义项目的缩小比例"><a class="markdownIt-Anchor" href="#fiex-shrink属性定义项目的缩小比例"></a> fiex-shrink属性：定义项目的缩小比例</h4><ul><li>默认缩小比例为1，若空间不足，项目会缩小宽度或高度。设为负值无效。<ul><li>若所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。</li><li>若某项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</li><li><img src="20250511160146988.png" alt="" /></li></ul></li></ul><h4 id="flex属性同时定义项目占用空间及缩放比例"><a class="markdownIt-Anchor" href="#flex属性同时定义项目占用空间及缩放比例"></a> flex属性：同时定义项目占用空间及缩放比例</h4><ul><li>格式：<code>flex: flex-grow属性值 flex-shrink属性值 flex-basis属性值;</code></li><li>两个快捷值：<ul><li><code>auto</code>：1 1 auto（项目大小为内容原本大小，等分剩余空间，允许缩小）。</li><li><code>none</code>：0 0 auto（项目大小为内容原本大小，不等分空间，不允许缩小）。</li></ul></li></ul><h4 id="align-self属性允许单个项目有与其他项目不一样的对齐方式"><a class="markdownIt-Anchor" href="#align-self属性允许单个项目有与其他项目不一样的对齐方式"></a> align-self属性：允许单个项目有与其他项目不一样的对齐方式</h4><ul><li>设置此属性后，会覆盖掉容器设定的<code>align-items</code>属性。</li><li>默认值为<code>auto</code>，继承容器定义的<code>align-items</code>属性(若无父元素则自动设为<code>stretch</code>).</li></ul><h2 id="4grid布局sup-idfnref5-classfootnote-refa-hreffn5-relfootnotespan-classhint-top-hint-rounded-aria-label阮一峰css-grid-网格布局教程ebol2019-03-252025-05-10-httpsruanyifengcomblog201903grid-layout-tutorialhtml5spanasup"><a class="markdownIt-Anchor" href="#4grid布局sup-idfnref5-classfootnote-refa-hreffn5-relfootnotespan-classhint-top-hint-rounded-aria-label阮一峰css-grid-网格布局教程ebol2019-03-252025-05-10-httpsruanyifengcomblog201903grid-layout-tutorialhtml5spanasup"></a> 4.Grid布局<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="阮一峰.CSS Grid 网格布局教程\[EB/OL].(2019-03-25)\[2025-05-10]. https://ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">[5]</span></a></sup></h2><h3 id="1-grid概述"><a class="markdownIt-Anchor" href="#1-grid概述"></a> ① Grid概述</h3><blockquote><p><strong>网格布局(Grid)</strong> 是很强大的CSS布局方案,通过将网页划分并组合不同的网格，实现各种各样的布局。<br />Flex 布局是<strong>轴线布局</strong>，只能指定&quot;项目&quot;针对轴线的位置，可以看作是一维布局。<br />Grid 布局则是将容器划分成&quot;行&quot;和&quot;列&quot;，产生<strong>单元格</strong>，然后指定&quot;项目所在&quot;的单元格，可以看作是二维布局。</p></blockquote><h3 id="2-基本概念-2"><a class="markdownIt-Anchor" href="#2-基本概念-2"></a> ② 基本概念</h3><h4 id="容器与项目"><a class="markdownIt-Anchor" href="#容器与项目"></a> 容器与项目</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>容器(container)</strong>：指采用网格布局的区域。</li><li><strong>项目(item)</strong>：容器内部采用网格定位的<strong>顶层</strong>子元素。</li><li>在上面的示例中，父元素<code>&lt;div&gt;</code>是容器，子元素<code>&lt;div&gt;</code>是项目；但是<code>&lt;p&gt;</code>不属于Grid容器的项目(不是父元素的顶层子元素)。</li><li>Grid布局只对容器内的项目生效。</li></ul><h4 id="行与列"><a class="markdownIt-Anchor" href="#行与列"></a> 行与列</h4><ul><li>容器里面的水平区域称为<strong>行(row)</strong>，垂直区域称为<strong>列(column)</strong>。各行与各列的重叠部分组成一些<strong>单元格(cell)</strong>。</li><li>划分网格的线，称为<strong>网格线(grid line)</strong>。水平网格线划分出行，垂直网格线划分出列。</li></ul><h3 id="3-容器属性设置在容器上在线演示工具-2"><a class="markdownIt-Anchor" href="#3-容器属性设置在容器上在线演示工具-2"></a> ③ 容器属性(设置在容器上,<a href="https://jsbin.com/mezufab/edit?html,css,output">在线演示工具</a>)</h3><h4 id="display-grid-指定容器为grid网络布局"><a class="markdownIt-Anchor" href="#display-grid-指定容器为grid网络布局"></a> display: grid; 指定容器为Grid网络布局</h4><ul><li>设为网格布局以后，容器项目的<code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>vertical-align</code>和<code>column-*</code>等设置都将失效。</li><li>指定为Grid布局后，默认设定为块级元素；可以通过<code>display: inline-grid;</code>的声明设定为行内元素，如图所示：<br /><img src="20250511211409402.png" alt="" /></li></ul><h4 id="grid-template-columns和grid-template-rows属性"><a class="markdownIt-Anchor" href="#grid-template-columns和grid-template-rows属性"></a> grid-template-columns和grid-template-rows属性</h4><ul><li>分别用于指定网络布局每一列的宽度和每一行的高度()，定义了几个值就有几行/几列。如图所示：<br /><img src="20250511212138947.png" alt="" /></li><li>宽度/高度可以是固定的<code>px</code>值，可以是相对的<code>%</code>值，也可以是相对的<code>fr</code>值，表示均分容器宽高的权重(总宽高为容器的宽高，各自的宽高比例为<code>fr</code>的值；类似于WPF中的<code>&lt;RowDefinition Height=&quot;2*&quot;&gt;</code>，<a href="https://jsbin.com/gugunosofa/edit?html,css,output">点击查看示例</a>)</li><li>网格很多时，重复写多个值很不方便，可以使用<code>repeat(重复次数， 宽度/高度值)</code>方法批量定义多个行和列：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container1</span> &#123;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">grid-template-rows</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">100px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>repeat()</code>的参数说明：<ul><li>第二个参数也可以是多个值，表示重复的模式，如<code>grid-template-rows: repeat(2, 20px 40px 60px);</code>，此时列宽为<code>20 40 60 20 40 60</code></li><li>第一个参数可以是关键字<code>auto-fill</code>，此时容器会根据容器宽度决定列数，实现<strong>响应式布局</strong>的效果，<a href="https://jsbin.com/zuvinerezo/edit?html,css,output">点击查看示例</a><br /><img src="20250511214655531.png" alt="" /></li></ul></li><li><code>minmax(最小值，最大值)</code>方法可用于设定行(列)的最小(大)的宽度和高度, 如<code>grid-template-rows: 1fr 1fr minmax(100px, 1fr);</code></li><li><code>auto关键字</code>表示自动设定宽高，在没有设定取值范围时取最大的宽度或高度。</li><li>可以使用<strong>方括号</strong>指定各行各列的名称，方便后续引用(可以定义多个名称)，如<code>grid-template-rows: [first-row r1] 100px [r2] 100px [r3] auto [r4];</code></li></ul><h4 id="grid-gap属性设置行之间-列之间的间隔行间距与列间距"><a class="markdownIt-Anchor" href="#grid-gap属性设置行之间-列之间的间隔行间距与列间距"></a> grid-gap属性：设置行之间、列之间的间隔(行间距与列间距)</h4><ul><li>使用<code>grid-column-gap</code>与<code>grid-row-gap</code>分别设置列间距与行间距。</li><li>两个属性可以合写成<code>grid-gap: 行间距 列间距;</code>的形式。</li></ul><h4 id="grid-template-areas属性设置网格中的区域"><a class="markdownIt-Anchor" href="#grid-template-areas属性设置网格中的区域"></a> grid-template-areas属性：设置网格中的区域</h4><ul><li>一个 <strong>区域(area)</strong> 可以包括多个单元格，每个区域对应单独的一个板块。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">grid-template-rows</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">grid-template-areas</span>: <span class="hljs-string">&#x27;a b c&#x27;</span><br>                       <span class="hljs-string">&#x27;d e f&#x27;</span><br>                       <span class="hljs-string">&#x27;g h i&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在上面的示例中，定义了3*3的网络布局，将九个单元格分配给了九个区域。</li><li>若写成<code>grid-template-areas: 'a a a' 'b b b' 'c c c';</code>，会将Grid布局划分成三个区域，每个区域占据同一行的三个单元格。</li><li>若存在不需要使用的单元格，在<code>grid-templlate-areas</code>属性中使用<code>.</code>号进行置空，如<code>grid-template-areas: 'a . a' 'b . b' 'c . c';</code>,这样中间的一列就不会被分配给任何一个区域。</li><li>区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为<strong>区域名-start</strong>，终止网格线自动命名为<strong>区域名-end</strong>。</li></ul><h4 id="grid-auto-flow属性指定先行后列还是先列后行"><a class="markdownIt-Anchor" href="#grid-auto-flow属性指定先行后列还是先列后行"></a> grid-auto-flow属性：指定先行后列还是先列后行</h4><ul><li>格式：<code>grid-auto-flow: row(先行后列，默认) | column(先列后行);</code></li><li>此属性还可以设置成<code>row dense</code>和<code>column dense</code>，用于指定项目的放置方式：</li></ul><table><thead><tr><th style="text-align:center">grid-auto-flow属性值</th><th>row</th><th>row dense</th><th>column dense</th></tr></thead><tbody><tr><td style="text-align:center">描述</td><td>默认的先行后列布局</td><td>后面较小的网格项会自动“回填”前面的空白，优先填充前面的行。</td><td>如果某列有空白，后面较小的网格项会自动“回填”前面的空白，优先填充前面的列。</td></tr><tr><td style="text-align:center">布局效果</td><td><img src="20250512074248914.png" alt="" /></td><td><img src="20250512074342139.png" alt="" /></td><td><img src="20250512074413862.png" alt="" /></td></tr></tbody></table><h4 id="justify-items属性-align-items属性-place-items属性设置单元格内容的水平位置与垂直位置"><a class="markdownIt-Anchor" href="#justify-items属性-align-items属性-place-items属性设置单元格内容的水平位置与垂直位置"></a> justify-items属性、align-items属性、place-items属性：设置单元格内容的水平位置与垂直位置</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br><span class="hljs-comment">/*起点对齐 | 终点对齐 | 居中对齐 | 两端对齐*/</span><br><span class="hljs-attribute">justify-items</span>: start | end | center | stretch;<br><span class="hljs-attribute">align-items</span>: start | end | center | stretch;<br><span class="hljs-comment">/*合并简写形式*/</span><br><span class="hljs-attribute">place-items</span>: &lt;align-items&gt; &lt;justify-items&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="justify-content属性-align-content属性-place-content属性整个内容区域在容器中的水平位置与垂直位置"><a class="markdownIt-Anchor" href="#justify-content属性-align-content属性-place-content属性整个内容区域在容器中的水平位置与垂直位置"></a> justify-content属性、align-content属性、place-content属性：整个内容区域在容器中的水平位置与垂直位置</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br><span class="hljs-attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;<br><span class="hljs-attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;<br>  <span class="hljs-comment">/*合并简写形式*/</span><br>  <span class="hljs-attribute">place-content</span>: &lt;align-content&gt; &lt;justify-content&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><p>属性取值(以justify-content为例)的说明：</p><table><thead><tr><th>属性值</th><th>start</th><th>end</th><th>center</th><th>stretch</th><th>space-around</th><th>space-between</th><th>space-evenly</th></tr></thead><tbody><tr><td>描述</td><td>对齐起点，默认</td><td>对齐终点</td><td>居中对齐</td><td>拉伸并占满宽度</td><td>分散对齐，两端间距减半</td><td>分散对齐，两边紧贴</td><td>分散对齐，间距相同</td></tr><tr><td>图示效果</td><td><img src="20250512082542274.png" alt="" /></td><td><img src="20250512082547395.png" alt="" /></td><td><img src="20250512082553724.png" alt="" /></td><td><img src="20250512082600882.png" alt="" /></td><td><img src="20250512082904959.png" alt="" /></td><td><img src="20250512082844649.png" alt="" /></td><td><img src="20250512082854955.png" alt="" /></td></tr></tbody></table><h4 id="grid-auto-columns属性-grid-auto-rows属性指定浏览器自动创建多余的单元格来容纳在现有网格外部的项目"><a class="markdownIt-Anchor" href="#grid-auto-columns属性-grid-auto-rows属性指定浏览器自动创建多余的单元格来容纳在现有网格外部的项目"></a> grid-auto-columns属性、grid-auto-rows属性：指定浏览器自动创建多余的单元格，来容纳在现有网格外部的项目</h4><p><img src="20250512083905557.png" alt="" /></p><h4 id="grid-template属性-grid-属性是一些grid属性的简写会降低可读性不推荐使用"><a class="markdownIt-Anchor" href="#grid-template属性-grid-属性是一些grid属性的简写会降低可读性不推荐使用"></a> grid-template属性、grid-属性：是一些grid属性的简写，会降低可读性，不推荐使用。</h4><h3 id="4-项目属性设置在项目上-2"><a class="markdownIt-Anchor" href="#4-项目属性设置在项目上-2"></a> ④ 项目属性(设置在项目上)</h3><h4 id="grid-column-start属性-grid-column-end属性-grid-row-start属性-grid-row-end属性设置-项目的单元格范围"><a class="markdownIt-Anchor" href="#grid-column-start属性-grid-column-end属性-grid-row-start属性-grid-row-end属性设置-项目的单元格范围"></a> grid-column-start属性、grid-column-end属性、grid-row-start属性、grid-row-end属性：设置 项目的单元格范围</h4><ul><li>这些属性可以用于控制单元格的起始行列与结束行列，实现项目跨越单元格(占据多个单元格)的布局。</li><li>设置为数值时，表示网格线的编号(从1开始)，即若行设置为4-6，列设置为2-5，面积为(6-4)*(5-4) = 2*3 = 6</li><li>如上图中的<code>item8</code>与<code>item9</code>，位置在九个单元格以外就是通过这些属性控制的：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item-8</span> &#123;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#d0e4a9</span>;<br><span class="hljs-attribute">grid-row-start</span>: <span class="hljs-number">4</span>;                <span class="hljs-comment">/* 第八个项目从第四行，第二列开始 */</span><br><span class="hljs-attribute">grid-column-start</span>: <span class="hljs-number">2</span>;             <span class="hljs-comment">/* 无end属性,默认只占一格单元格,面积为1 */</span><br><span class="hljs-comment">/* grid-row-end: 6; 若设置此属性，会纵跨两个单元格，占据第四行到第五行的区域，面积变为1*2 = 2 */</span><br><span class="hljs-comment">/* grid-column-end: 5; 若设置此属性，会横跨两个三元格，占据第二列到第四列的区域，面积变为3*2 = 6 */</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>若项目出现重叠，可以通过<code>z-index</code>属性调整层级关系。</li><li>属性值可以是数值，也可以是网格线的名称，如<code>grid-column-start: header-start;</code></li><li>可以使用<code>span</code>关键字，设置项目的跨越单元格，如<code> grid-column-start: span 2;</code>，表示项目横跨两列。</li></ul><h4 id="grid-column属性-grid-row属性上面四个属性的简写形式"><a class="markdownIt-Anchor" href="#grid-column属性-grid-row属性上面四个属性的简写形式"></a> grid-column属性、grid-row属性：上面四个属性的简写形式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">grid-column</span>: &lt;start-line&gt; / &lt;end-line&gt;;<br>  <span class="hljs-attribute">grid-row</span>: &lt;start-line&gt; / &lt;end-line&gt;;<br>&#125;<br><br><span class="hljs-comment">/* 示例：一个2*2的项目 */</span><br><span class="hljs-selector-class">.item-1</span> &#123;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">1</span> / <span class="hljs-number">3</span>;  <span class="hljs-comment">/* 也可以写成 grid-column: 1 / span 2; */</span><br>  <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">1</span> / <span class="hljs-number">3</span>;     <span class="hljs-comment">/* 也可以写成 grid-row: 1 / span 2; */</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="grid-area属性指定项目放在哪一个区域"><a class="markdownIt-Anchor" href="#grid-area属性指定项目放在哪一个区域"></a> grid-area属性：指定项目放在哪一个区域</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item-1</span> &#123;<br><span class="hljs-comment">/*容器设置了grid-template-areas: &#x27;a b c&#x27; &#x27;d e f&#x27; &#x27;g h i&#x27;的属性; */</span><br><span class="hljs-attribute">grid-area</span>: e;    <span class="hljs-comment">/* 对应上面编号为e的区域，分布在第二行第二列的单元格 */</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>此属性也可作为<code>grid-row-start</code>等四个属性的简写，格式为<code>grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</code><ul><li>例：<code>grid-area: 1 / 1 / 3 / 3;</code></li></ul></li></ul><h4 id="justify-self属性-align-self属性-place-self属性"><a class="markdownIt-Anchor" href="#justify-self属性-align-self属性-place-self属性"></a> justify-self属性、align-self属性、place-self属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br><span class="hljs-comment">/*起点对齐 | 终点对齐 | 居中对齐 | 两端对齐*/</span><br><span class="hljs-attribute">justify-self</span>: start | end | center | stretch;<br><span class="hljs-attribute">align-self</span>: start | end | center | stretch;<br><span class="hljs-comment">/* 简写成place-self属性 */</span><br><span class="hljs-attribute">place-self</span>: &lt;align-self&gt; &lt;justify-self&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5常见网页版式"><a class="markdownIt-Anchor" href="#5常见网页版式"></a> 5.常见网页版式</h2><table><thead><tr><th>版式</th><th>单栏版式</th><th>双栏版式</th><th>三栏版式</th><th>综合版式(1+2+1)</th><th>综合版式(1+3+1)</th></tr></thead><tbody><tr><td>图示</td><td><img src="20250512094504626.png" alt="" /></td><td><img src="20250512094521485.png" alt="" /></td><td><img src="20250512094606474.png" alt="" /></td><td><img src="20250512094849246.png" alt="" /></td><td><img src="20250512095017107.png" alt="" /></td></tr></tbody></table><h2 id="6响应式布局"><a class="markdownIt-Anchor" href="#6响应式布局"></a> 6.响应式布局</h2><h3 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> ① 概述</h3><blockquote><p><strong>响应式设计(Responsive Web Design, RWD)</strong> 是一种网页开发方法，使网站能够<strong>自动适应不同屏幕尺寸的设备（PC、平板、手机等）</strong>，提供最佳浏览体验。<br />响应式设计 = <strong>弹性布局 + 媒体查询 + 移动优先 + 灵活媒体</strong>，确保网站在任何设备上都能完美展现，能实现<strong>一套代码适配所有设备</strong>，降低维护成本；同时<strong>提升用户体验</strong>，避免手机端缩放、滚动问题；并且<strong>SEO友好</strong>，便于搜索引擎快速检索网页信息。</p></blockquote><h3 id="2-弹性布局"><a class="markdownIt-Anchor" href="#2-弹性布局"></a> ② 弹性布局</h3><ul><li>使用 <strong>弹性网格(Flex布局/Grid布局)</strong> 和 <strong>百分比宽度</strong> 替代固定像素布局，多使用相对单位进行布局。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>; <span class="hljs-comment">/* 宽度自适应 */</span><br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1200px</span>; <span class="hljs-comment">/* 最大宽度限制 */</span><br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto; <span class="hljs-comment">/* 居中 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3视口"><a class="markdownIt-Anchor" href="#3视口"></a> ③视口</h3><ul><li>视口即<strong>浏览器显示页面内容的屏幕区域</strong>,一般认为是浏览器的窗口大小。</li><li>通过设置视口大小，无论网页原始的分辨率如何，都能将其缩小显示在移动端的浏览器上，避免出现很长的滚动条。</li><li>在移动端浏览器中，存在三种视口：<strong>布局视口(layout viewport)、视觉视口(visual viewport)与理想视口(ideal viewport)</strong>。</li></ul><h4 id="布局视口网页文件实际的尺寸"><a class="markdownIt-Anchor" href="#布局视口网页文件实际的尺寸"></a> 布局视口(网页文件实际的尺寸)</h4><p><img src="20250512102506430.png" alt="" /></p><ul><li>布局视口指整个文件的内容，与文档的宽度相关。</li><li>在移动设备上，为了避免桌面网页在小屏幕上显示过小，通常会默认设置一个宽布局视口（768px、980px、1024px等）。</li><li>通过<code>&lt;meta name=&quot;viewport&quot;&gt;</code>标签设置布局视口的宽度，例如width=device-width将其设置为设备屏幕的宽度。</li><li>布局视口决定了CSS像素的渲染范围，影响元的排列和缩放。</li></ul><h4 id="视觉视口设备屏幕的尺寸"><a class="markdownIt-Anchor" href="#视觉视口设备屏幕的尺寸"></a> 视觉视口(设备屏幕的尺寸)</h4><p><img src="20250512102521290.png" alt="" /></p><ul><li>视觉视口是用户在屏幕上实际看到的区域，也就是浏览器窗口中显示的内容范围。</li><li>大小通常与设备屏幕的像素尺寸相关，且会随着用户的缩放而改变。</li><li>例如，放大页面时，视觉视口变小，显示的布局视口内容减少；缩小页面时，视觉视口变大，显示更多内容。</li><li>反映用户当前的可见区域，与缩放操作直接相关。</li></ul><h4 id="理想视口"><a class="markdownIt-Anchor" href="#理想视口"></a> 理想视口</h4><ul><li>理想视口是设备的最佳视口尺寸，通常等于设备的屏幕宽度（以设备独立像素为单位）。</li><li>用于让网页在移动设备上以最自然、最舒适的方式显示。</li><li>通过设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code>，可以让布局视口匹配理想视口，避免页面缩放或水平滚动。</li><li>可以为移动端优化页面，提供最佳用户体验。</li></ul><h4 id="视口的设置"><a class="markdownIt-Anchor" href="#视口的设置"></a> 视口的设置</h4><ul><li>通用格式：<code>&lt;meta name=&quot;viewport&quot; content=&quot;属性1 = 值1, 属性2 = 值2, …&quot;&gt;</code><ul><li><code>name</code>属性值为<code>viewport</code>，表明此标签用于设置视口</li><li><code>content</code>属性用于设定布局视口的相关属性：<ul><li><code>width</code>: 用于设定布局视口的宽度，属性值为正整数(px)或<code>device-width</code>;设置为后者时，布局视口的宽度等于屏幕宽度(即理想视口)。</li><li><code>height</code>: 用户设定布局视口的高度，属性值为正整数(px)或<code>device-height</code>;设置为后者时，布局视口的高度等于屏幕高度(即理想视口)。</li><li><code>user-scalable</code>: 是否允许手动缩放，默认为<code>yes</code>，可设置为<code>no</code>。</li><li><code>initial-scale</code>: 网页初始缩放值，取值范围0.0 ~ 10.0，一般取1.0，表示网页的原大小。</li><li><code>maximum-scale</code>: 设置缩放的最大比例，取值范围0.0 ~ 10.0</li><li><code>minimum-scale</code>: 设置缩放的最小比例，取值范围0.0 ~ 10.0</li></ul></li></ul></li></ul><h3 id="4-媒体查询"><a class="markdownIt-Anchor" href="#4-媒体查询"></a> ④ 媒体查询</h3><ul><li>用于根据设备的特性（如屏幕宽度、分辨率、方向等）应用不同的样式，以实现响应式设计。</li><li>通过@media规则，检测设备的特定条件（如min-width、max-width、屏幕方向等），然后应用对应的CSS样式，常用于适配不同屏幕尺寸的设备。</li><li>语法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> 媒体类型 <span class="hljs-keyword">and</span> | <span class="hljs-keyword">not</span> | <span class="hljs-keyword">only</span> (条件) &#123; <span class="hljs-comment">/* CSS样式 */</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>参数说明：<ul><li>媒体类型：取值有<code>all</code>(所有设备)、<code>screen</code>(电脑屏幕)、<code>print</code>(打印机)、<code>speech</code>(屏幕阅读器)</li><li>条件常用取值：<code>max-width、min-width</code>、<code>max-device-width</code>、<code>min-device-width</code>等</li></ul></li></ul><p>例：当输出设备中的页面最大可见区域宽度为900px时，body元素背景颜色切换为蓝色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">900px</span>) &#123;<br><span class="hljs-selector-tag">body</span>&#123;<br><span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在实际网页制作中，通常根据不同的屏幕宽度创建不同的样式表文件，然后在网页头部标签中添加<code>&lt;link&gt;</code>标签，使网页根据屏幕宽度响应式加载不同的样式文件, 语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;媒体类型 and | not | only (条件)&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;CSS文件路径&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>备注：使用<code>&lt;meta&gt;</code>标签的<code>media</code>属性让网页加载新的样式表文件时，可能需要对某些元素重复设置样式，应该尽量使用优先级较高的选择器，减少通配符或者大范围选择器的使用。</p><h3 id="5-其他技巧"><a class="markdownIt-Anchor" href="#5-其他技巧"></a> ⑤ 其他技巧</h3><h4 id="为元素设置最大尺寸防止溢出"><a class="markdownIt-Anchor" href="#为元素设置最大尺寸防止溢出"></a> 为元素设置最大尺寸，防止溢出</h4><ul><li>为图片设置<code>max-width: 100%; height: auto;</code>的属性，防止大小超过容器或父元素的区域</li><li>为移动端横屏与竖屏应用不同的样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 手机端或竖屏的样式 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">767px</span>) &#123;<br>  <span class="hljs-selector-class">.menu</span> &#123; <span class="hljs-attribute">display</span>: none; &#125; <span class="hljs-comment">/* 小屏幕隐藏菜单 */</span><br>&#125;<br><br><span class="hljs-comment">/* 平板端或横屏的样式 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">1023px</span>) &#123;<br>  <span class="hljs-selector-class">.sidebar</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">30%</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h1 id="五-css3变形"><a class="markdownIt-Anchor" href="#五-css3变形"></a> 五、CSS3变形</h1><blockquote><p>早期的CSS无法实现变形效果，只能通过JavaScript实现。CSS3中新增了<code>transform</code>属性用于设置元素的2D和3D变形效果。</p></blockquote><ul><li>具体格式：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: none | transform-functions<br></code></pre></td></tr></table></figure><ul><li>默认值为<code>none</code>(无变形效果)，<code>transform-functions</code>表示变形方法，用于设置元素的2D或3D变形效果</li><li>变形方法可以有多个，用空格隔开。</li></ul><h2 id="12d变形"><a class="markdownIt-Anchor" href="#12d变形"></a> 1.2D变形</h2><h4 id="1-概述-2"><a class="markdownIt-Anchor" href="#1-概述-2"></a> ① 概述</h4><ul><li>以元素中心为原点创建一个平面直角坐标系，取右下方为正方向，2D变形主要有四种方法：<strong>平移、缩放、旋转和倾斜</strong>。<br /><img src="20250512193100490.png" alt="" /></li></ul><h4 id="2-平移translate方法"><a class="markdownIt-Anchor" href="#2-平移translate方法"></a> ② 平移：translate()方法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(x轴偏移量, y轴偏移量);<br></code></pre></td></tr></table></figure><ul><li>参数可以为正值与负值，单位可以取<code>px</code>等绝对单位，也可以是<code>%</code>等相对单位。</li><li>若只设置一个参数，y轴偏移量默认为0。</li></ul><h4 id="3-缩放scale方法"><a class="markdownIt-Anchor" href="#3-缩放scale方法"></a> ③ 缩放：scale()方法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(宽度缩放倍数, 高度缩放倍数);<br></code></pre></td></tr></table></figure><ul><li>参数值大于1表示放大，小于1表示缩小。</li><li>若只设置一个参数，表示宽高以相同倍数缩放。</li><li>参数为负时，元素会有翻转效果。</li></ul><h4 id="4-旋转rotate方法"><a class="markdownIt-Anchor" href="#4-旋转rotate方法"></a> ④ 旋转：rotate()方法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(旋转角度);<br></code></pre></td></tr></table></figure><ul><li>旋转角度以<code>°</code>为单位，正值表示顺时针旋转，负值表示逆时针旋转。</li></ul><h4 id="5-倾斜skew方法"><a class="markdownIt-Anchor" href="#5-倾斜skew方法"></a> ⑤ 倾斜：skew()方法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(y轴倾斜角度, x轴倾斜角度);<br></code></pre></td></tr></table></figure><ul><li>与旋转方法的参数规则相同，以<code>°</code>为单位，正顺负逆。</li><li>若只设置一个值，元素绕y轴倾斜，第二个值默认为0。<br /><img src="20250512194434661.png" alt="" /></li></ul><h3 id="6-2d变形效果图示"><a class="markdownIt-Anchor" href="#6-2d变形效果图示"></a> ⑥ 2D变形效果图示</h3><p><img src="20250512194917256.png" alt="" /></p><h2 id="23d变形"><a class="markdownIt-Anchor" href="#23d变形"></a> 2.3D变形</h2><h3 id="1-概述-3"><a class="markdownIt-Anchor" href="#1-概述-3"></a> ① 概述</h3><ul><li>以元素中心为原点，创建三维直角坐标系</li><li>3D变形主要沿元素的<code>x,y,z</code>三轴进行变化</li><li>3D变形主要有三种，分别为<strong>平移、缩放与旋转</strong>。<br /><img src="20250512200903849.png" alt="" /></li></ul><h3 id="2-平移translate3d方法"><a class="markdownIt-Anchor" href="#2-平移translate3d方法"></a> ② 平移：translate3d()方法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(x轴偏移量, y轴偏移量, z轴偏移量);<br></code></pre></td></tr></table></figure><ul><li>x、y轴上的偏移量可以为百分比，但是z轴不允许设置百分比单位。三个值均可取负。</li><li>z轴偏移量越大，元素看起来越靠近浏览者，反之则相反。</li></ul><h3 id="3-缩放scale3d方法"><a class="markdownIt-Anchor" href="#3-缩放scale3d方法"></a> ③ 缩放：scale3d()方法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">Scale3d</span>(x方向缩放比例, y方向缩放比例, z方向缩放比例);<br></code></pre></td></tr></table></figure><ul><li>参数值大于1表示放大，小于1表示缩小。</li><li>若只设置一个参数，表示宽高以相同倍数缩放。</li><li>参数为负时，元素会有翻转效果。</li></ul><h3 id="4-旋转rotatex方法-rotatey方法-rotatez方法"><a class="markdownIt-Anchor" href="#4-旋转rotatex方法-rotatey方法-rotatez方法"></a> ④ 旋转：rotateX()方法、rotateY()方法、rotateZ()方法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 分别绕x、y、z三轴旋转10度 */</span><br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">10deg</span>) | <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">10deg</span>) | <span class="hljs-built_in">rotateZ</span>(<span class="hljs-number">10deg</span>);<br></code></pre></td></tr></table></figure><ul><li>旋转角度以<code>°</code>为单位，正值表示顺时针旋转，负值表示逆时针旋转。</li></ul><h3 id="5-3d变形效果图示"><a class="markdownIt-Anchor" href="#5-3d变形效果图示"></a> ⑤ 3D变形效果图示</h3><p><img src="20250512201644433.png" alt="" /></p><blockquote><p>“设置3D变形时，—般需要为设置变形的元素的父元素设置透视属性(perspective)。透视是绘画理论术语，是在平面上根据一定原理用线条来显示物体的空间位置、轮廓和 投影的科学，根据透视关系能够绘制出带有空间结构的透视图，生活中常说的‘近大远 小’就是其中的一个简单的原理。CSS3中的透视属性可以理解为设置‘近大远小’的程度，属性值越小靠近人眼的一侧就显示得越大，一般设置为300px。该属性的默认属性值为0，即不显示透视，此时3D变形效果类似于2D变形效果。” ——《Web前端技术》P184</p></blockquote><hr /><h1 id="六-css3过渡"><a class="markdownIt-Anchor" href="#六-css3过渡"></a> 六、CSS3过渡</h1><h2 id="1过渡的相关属性"><a class="markdownIt-Anchor" href="#1过渡的相关属性"></a> 1.过渡的相关属性</h2><h3 id="1-transition-property属性过渡属性"><a class="markdownIt-Anchor" href="#1-transition-property属性过渡属性"></a> ① transition-property属性：过渡属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition-property</span>: none | all | property;<br></code></pre></td></tr></table></figure><ul><li><code>none</code>:默认值，不使用过渡效果。</li><li><code>all</code>:为所有属性设置过渡效果。</li><li><code>property</code>:应用过渡效果的具体属性名称，多个值之间用空格隔开。</li></ul><h3 id="2-transition-duration属性过渡时间"><a class="markdownIt-Anchor" href="#2-transition-duration属性过渡时间"></a> ② transition-duration属性：过渡时间</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition-duration</span>: 过渡时间;<br></code></pre></td></tr></table></figure><ul><li>取值一般为过渡的时间，以秒(s)或毫秒(ms)为单位，默认值为0。</li><li>若不设置过渡的时间，会直接显示变形的最终效果，变形的过程几乎看不到。</li></ul><h3 id="3-transition-timing-function属性过渡速度曲线"><a class="markdownIt-Anchor" href="#3-transition-timing-function属性过渡速度曲线"></a> ③ transition-timing-function属性：过渡速度曲线</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition-timing-function</span>: liner | ease | ease-in | ease-out | ease-in-out | <span class="hljs-built_in">cubic-bezier</span>(n, n, n, n);<br></code></pre></td></tr></table></figure><ul><li><code>liner</code>：线性过渡，即<strong>匀速</strong>进行过渡。</li><li><code>ease</code>：平滑过渡，<strong>慢-快-慢</strong>的过渡效果，类似汽车<strong>快速启动-逐渐减速</strong>过程，适合<strong>快速响应</strong>(如按钮悬停)的过渡场景。</li><li><code>ease-in</code>：<strong>慢-快</strong>的过渡效果。</li><li><code>ease-out</code>：<strong>快-慢</strong>的过渡效果。</li><li><code>ease-in-out</code>：<strong>慢-快-慢</strong>的过渡效果，类似于垂直电梯的<strong>缓慢启动-匀速上升-缓慢减速</strong>过程，适合<strong>平滑连贯</strong>(如页面切换)的过渡场景。</li><li><code>cubic-bezier(n, n, n, n)</code>：贝赛尔曲线,用于精确控制过渡效果的曲线，<code>n</code>取值范围为0 ~ 1。</li></ul><h4 id="在chrome的f12开发人员工具中调整贝赛尔曲线"><a class="markdownIt-Anchor" href="#在chrome的f12开发人员工具中调整贝赛尔曲线"></a> 在Chrome的F12开发人员工具中调整贝赛尔曲线：</h4><ol><li>打开开发人员工具中的贝赛尔曲线编辑器：<br /><img src="20250512214550419.png" alt="" /></li><li>在编辑器中调整速度曲线或者使用下方的一些预设进一步微调<br /><img src="20250512214717163.png" alt="" /></li><li>调节完成后，关闭编辑器窗口并将新的<code>cubic-bezier</code>属性值粘贴到源文件，完成速度曲线的修改。</li></ol><h3 id="4-transition-delay属性延迟时间"><a class="markdownIt-Anchor" href="#4-transition-delay属性延迟时间"></a> ④ transition-delay属性：延迟时间</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition-delay</span>: 延迟时间;<br></code></pre></td></tr></table></figure><ul><li>取值一般为延迟的时间值，以秒(s)或毫秒(ms)为单位，默认值为0。</li><li>设定为负值时，会截断过渡时间开头的一部分。如<code>duration</code>设置为<code>5s</code>，<code>delay</code>设置为<code>-2s</code>时，过渡效果会在触发后延迟2s，并从动画的第二秒开始过渡。</li></ul><h3 id="5-transition属性综合声明上述各个属性"><a class="markdownIt-Anchor" href="#5-transition属性综合声明上述各个属性"></a> ⑤ transition属性：综合声明上述各个属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition</span>: property值 duration值 timing-function值 delay值;<br></code></pre></td></tr></table></figure><ul><li>属性值的顺序不可颠倒，每组属性值用逗号隔开。</li></ul><h2 id="2过渡的触发方式"><a class="markdownIt-Anchor" href="#2过渡的触发方式"></a> 2.过渡的触发方式</h2><blockquote><p>在CSS中，常通过鼠标事件触发过渡效果，如单机按钮、指针悬浮、指针经过等，用于提高网页的美观程度与可交互性。</p></blockquote><ul><li>结合<strong>伪类选择器</strong> <code>:hover</code>(悬停/经过)、<code>:active</code>(点击并按住)、<code>:focus</code>(获得焦点)、<code>:checked</code>(表单控件选中) 设定元素在特定情况下的过渡效果</li><li>使用<strong>媒体查询</strong>触发过渡效果，如下所示：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"> <span class="hljs-comment">/* 屏幕最大宽度为420px时触发动画 */</span><br><span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">420px</span>;) &#123;  <br><span class="hljs-selector-tag">div</span> &#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">transition</span>: width is;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h1 id="七-css3动画"><a class="markdownIt-Anchor" href="#七-css3动画"></a> 七、CSS3动画</h1><blockquote><p>使用<code>transition</code>属性只能通过设置开始与结束的过渡效果，无法精准控制过渡中途的效果。<br />通过CSS3动画的<strong>关键帧</strong>可以制作变化多样的动画效果。</p></blockquote><h2 id="1关键帧"><a class="markdownIt-Anchor" href="#1关键帧"></a> 1.关键帧</h2><ul><li>使用<code>@keyframes</code>规则定义关键帧，格式如下：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> 动画名称 &#123; 时间位置&#123; CSS样式 &#125; &#125;<br></code></pre></td></tr></table></figure><ul><li>时间位置即动画时长的百分比，取值为1% ~ 100%，也可以使用<code>from</code>关键字(表示0%)、<code>to</code>关键字(表示100%)表示。</li></ul><h2 id="2动画的相关属性"><a class="markdownIt-Anchor" href="#2动画的相关属性"></a> 2.动画的相关属性</h2><h3 id="1-animation-name属性设置动画的名称"><a class="markdownIt-Anchor" href="#1-animation-name属性设置动画的名称"></a> ① animation-name属性：设置动画的名称</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-name</span>: 名称 | none;<br></code></pre></td></tr></table></figure><ul><li>参数为动画的名称，对应想要应用的<code>@keyframes</code>动画名称。</li><li>参数为<code>none</code>时，表示不应用或取消此动画。</li></ul><h3 id="2-animation-duration属性设置动画的时间"><a class="markdownIt-Anchor" href="#2-animation-duration属性设置动画的时间"></a> ② animation-duration属性：设置动画的时间</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">aimation-duration: 时间值;<br></code></pre></td></tr></table></figure><ul><li>取值以秒(s)或毫秒(ms)为单位，默认值为0。</li></ul><h3 id="3-animation-timing-function属性设置动画的速度曲线"><a class="markdownIt-Anchor" href="#3-animation-timing-function属性设置动画的速度曲线"></a> ③ animation-timing-function属性：设置动画的速度曲线</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-timing-function</span>: liner | ease | ease-in | ease-out | ease-in-out | <span class="hljs-built_in">cubic-bezier</span>(n, n, n, n);<br></code></pre></td></tr></table></figure><ul><li><code>liner</code>：线性过渡，即<strong>匀速</strong>进行过渡。</li><li><code>ease</code>：平滑过渡，<strong>慢-快-慢</strong>的过渡效果，类似汽车<strong>快速启动-逐渐减速</strong>过程，适合<strong>快速响应</strong>(如按钮悬停)的过渡场景。</li><li><code>ease-in</code>：<strong>慢-快</strong>的过渡效果。</li><li><code>ease-out</code>：<strong>快-慢</strong>的过渡效果。</li><li><code>ease-in-out</code>：<strong>慢-快-慢</strong>的过渡效果，类似于垂直电梯的<strong>缓慢启动-匀速上升-缓慢减速</strong>过程，适合<strong>平滑连贯</strong>(如页面切换)的过渡场景。</li><li><code>cubic-bezier(n, n, n, n)</code>：贝赛尔曲线,用于精确控制过渡效果的曲线，<code>n</code>取值范围为0 ~ 1。</li></ul><h4 id="此属性还可以设置为steps帧数-start-end方法用于设置两个关键帧之间插入多少帧补间动画"><a class="markdownIt-Anchor" href="#此属性还可以设置为steps帧数-start-end方法用于设置两个关键帧之间插入多少帧补间动画"></a> 此属性还可以设置为<code>steps(帧数, start | end)</code>方法，用于设置两个关键帧之间插入多少帧<strong>补间动画</strong></h4><ul><li><code>satrt</code>表示最后一帧是补间动画的开始，<code>end</code>表示第一帧是补间动画的开始。</li><li>不使用<code>steps</code>方法时，浏览器自动设置补间动画。</li></ul><h3 id="4-animation-delay属性设置动画的延迟时间"><a class="markdownIt-Anchor" href="#4-animation-delay属性设置动画的延迟时间"></a> ④ animation-delay属性：设置动画的延迟时间</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-delay</span>: 时间值;<br></code></pre></td></tr></table></figure><ul><li>取值一般为延迟的时间值，以秒(s)或毫秒(ms)为单位，默认值为0。</li><li>设定为负值时，会截断过渡时间开头的一部分。如<code>duration</code>设置为<code>5s</code>，<code>delay</code>设置为<code>-2s</code>时，过渡效果会在触发后延迟2s，并从动画的第二秒开始过渡。</li></ul><h3 id="5-animation-iteration-count属性设置动画的播放次数"><a class="markdownIt-Anchor" href="#5-animation-iteration-count属性设置动画的播放次数"></a> ⑤ animation-iteration-count属性：设置动画的播放次数</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-iteration-count</span>: 播放次数 | infinite;<br></code></pre></td></tr></table></figure><ul><li>播放次数默认为1。</li><li>设置为<code>infinite</code>关键字实现循环播放。</li></ul><h3 id="6-animation-direction属性设置动画的播放方向"><a class="markdownIt-Anchor" href="#6-animation-direction属性设置动画的播放方向"></a> ⑥ animation-direction属性：设置动画的播放方向</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-direction</span>: normal | alternate;<br></code></pre></td></tr></table></figure><ul><li><code>noraml</code>:默认值，表示正常播放。</li><li><code>alternate</code>:动画先正常播放，然后倒放一遍，并按此规律循环播放(&quot;折返跑&quot;效果)。</li></ul><h3 id="7-animation-play-state属性设置动画的播放状态"><a class="markdownIt-Anchor" href="#7-animation-play-state属性设置动画的播放状态"></a> ⑦ animation-play-state属性：设置动画的播放状态</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-play-state</span>: paused | running;<br></code></pre></td></tr></table></figure><h3 id="8-animation-fill-mode属性设置动画不播放时的状态"><a class="markdownIt-Anchor" href="#8-animation-fill-mode属性设置动画不播放时的状态"></a> ⑧ animation-fill-mode属性：设置动画不播放时的状态</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-fill-mode</span>: none | <span class="hljs-built_in">forwards</span>(保持结束状态) | <span class="hljs-built_in">backwards</span>(保持初始状态) | <span class="hljs-built_in">both</span>(播放前保持初始，播放后保持结束);<br></code></pre></td></tr></table></figure><h2 id="3基于图片的动画效果"><a class="markdownIt-Anchor" href="#3基于图片的动画效果"></a> 3.基于图片的动画效果</h2><h3 id="1-原理"><a class="markdownIt-Anchor" href="#1-原理"></a> ① 原理</h3><ul><li>类似于<strong>胶片电影</strong>的原理，将动画逐帧切割后的图片排成一行，组成一个很宽的图片列；</li><li>通过控制图片的位置，使其在容器中每过一小段时间显示下一帧的内容；</li><li>最后应用循环效果，实现动画的逐帧播放。</li></ul><h3 id="2-示例"><a class="markdownIt-Anchor" href="#2-示例"></a> ② 示例</h3><ul><li>动画素材：<br /><img src="20250512223737976.png" alt="" /></li><li>网页源码：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>动画示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* 定义 diV 容器的样式 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">125px</span>;           <span class="hljs-comment">/* 容器宽度 */</span></span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">125px</span>;          <span class="hljs-comment">/* 容器高度 */</span></span><br><span class="language-css"><span class="hljs-attribute">margin-left</span>: <span class="hljs-number">50px</span>;      <span class="hljs-comment">/* 左外边距（水平定位） */</span></span><br><span class="language-css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;       <span class="hljs-comment">/* 上外边距（垂直定位） */</span></span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img/bgp.jpg</span>) no-repeat <span class="hljs-number">0</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">/* 背景图片（不重复，初始位置 0 0） */</span></span><br><span class="language-css"><span class="hljs-attribute">animation</span>: move <span class="hljs-number">1s</span> <span class="hljs-built_in">steps</span>(<span class="hljs-number">8</span>, end) infinite;   <span class="hljs-comment">/* 应用动画：名称、时长、补间动画、循环播放 */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 定义关键帧动画 &quot;move&quot; */</span></span><br><span class="language-css"><span class="hljs-keyword">@keyframes</span> move &#123;</span><br><span class="language-css"><span class="hljs-number">0%</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;      <span class="hljs-comment">/* 动画起始状态：背景图位置为左上角 */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-number">100%</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">background-position</span>: -<span class="hljs-number">1000px</span> <span class="hljs-number">0</span>; <span class="hljs-comment">/* 动画结束状态：背景图向左移动 1000px（实现帧动画效果） */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 动画容器：通过背景图位移实现逐帧动画 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>实现效果：<br /><img src="sample.gif" alt="" /></li></ul><hr /><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>百度百科.CSS3[EB/OL].(2024-06-17)[2025-05-07]. <a href="https://baike.baidu.com/item/CSS3/4059544#reference-3">https://baike.baidu.com/item/CSS3/4059544#reference-3</a>.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>牧之 |.a与a:link、a:visited、a:hover、a:active[EB/OL].(2013-07-30)[2025-05-07]. <a href="https://www.cnblogs.com/exmyth/p/3226654.html">https://www.cnblogs.com/exmyth/p/3226654.html</a>.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>勤奋的夕阳一刀.CSS里面的长度单位px/pt/em/in/pc/mm/cm解释[EB/OL].(2015-10-07)[2025-05-08]. <a href="https://www.cnblogs.com/913815ccmm/p/4858638.html">https://www.cnblogs.com/913815ccmm/p/4858638.html</a>.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>阮一峰.Flex 布局教程：语法篇[EB/OL].(2015-07-10)[2025-05-10]. <a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>阮一峰.CSS Grid 网格布局教程[EB/OL].(2019-03-25)[2025-05-10]. <a href="https://ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">https://ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Web</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法与数据结构学习路线</title>
    <link href="/2025/05/07/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <url>/2025/05/07/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>声明：本篇笔记由Grok大模型生成</p></blockquote><hr /><h1 id="算法与数据结构学习路线"><a class="markdownIt-Anchor" href="#算法与数据结构学习路线"></a> 算法与数据结构学习路线</h1><h2 id="一-acm-icpc竞赛常见考点"><a class="markdownIt-Anchor" href="#一-acm-icpc竞赛常见考点"></a> 一、ACM-ICPC竞赛常见考点</h2><p>ACM-ICPC（国际大学生程序设计竞赛）等算法竞赛主要考察选手在有限时间内设计和实现高效算法的能力。以下是常见考点，涵盖数据结构、算法和相关技巧：</p><h3 id="1-基础数据结构"><a class="markdownIt-Anchor" href="#1-基础数据结构"></a> 1. 基础数据结构</h3><ul><li><strong>数组与字符串</strong>：数组操作、字符串匹配（KMP、Rabin-Karp）、正则表达式思想。</li><li><strong>栈与队列</strong>：单调栈、单调队列、表达式求值、括号匹配。</li><li><strong>链表</strong>：单/双向链表、链表反转、快慢指针。</li><li><strong>哈希表</strong>：哈希映射、冲突处理、字符串哈希。</li><li><strong>集合与映射</strong>：并查集（Union-Find）、平衡树（Treap、Splay）、红黑树基础。</li></ul><h3 id="2-高级数据结构"><a class="markdownIt-Anchor" href="#2-高级数据结构"></a> 2. 高级数据结构</h3><ul><li><strong>树</strong>：二叉树遍历、BST（二叉搜索树）、AVL树、线段树、树状数组（Fenwick Tree）。</li><li><strong>堆</strong>：优先队列、最小/最大堆、堆排序。</li><li><strong>图</strong>：邻接表/矩阵表示、并查集、Trie树（字典树）。</li><li><strong>高级结构</strong>：主席树（持久化线段树）、块状数组、树链剖分。</li></ul><h3 id="3-基础算法"><a class="markdownIt-Anchor" href="#3-基础算法"></a> 3. 基础算法</h3><ul><li><strong>排序与搜索</strong>：快速排序、归并排序、二分查找、双指针。</li><li><strong>贪心算法</strong>：区间调度、Huffman编码、最小生成树（Prim、Kruskal）。</li><li><strong>分治法</strong>：归并排序、快速幂、CDQ分治。</li><li><strong>动态规划（DP）</strong>：<ul><li>基础DP：背包问题（01背包、完全背包）、LCS（最长公共子序列）、LIS（最长递增子序列）。</li><li>进阶DP：状态压缩DP、树形DP、概率DP、区间DP。</li></ul></li><li><strong>枚举与模拟</strong>：全排列、DFS模拟、Flood Fill。</li></ul><h3 id="4-图论"><a class="markdownIt-Anchor" href="#4-图论"></a> 4. 图论</h3><ul><li><strong>基础图算法</strong>：<ul><li>DFS/BFS：连通性、拓扑排序、Flood Fill。</li><li>最短路径：Dijkstra、Bellman-Ford、Floyd-Warshall、SPFA。</li><li>最小生成树：Prim、Kruskal。</li></ul></li><li><strong>进阶图论</strong>：<ul><li>网络流：最大流（Dinic、EK）、最小割、费用流。</li><li>二分图：匈牙利算法、KM算法。</li><li>强连通分量：Tarjan、Kosaraju。</li><li>树上问题：LCA（最近公共祖先）、树链剖分、树DP。</li></ul></li></ul><h3 id="5-数学"><a class="markdownIt-Anchor" href="#5-数学"></a> 5. 数学</h3><ul><li><strong>数论</strong>：<ul><li>质数判定、欧几里得算法、扩展欧几里得。</li><li>模运算：快速幂、模逆元、CRT（中国剩余定理）。</li><li>组合数学：排列组合、Lucas定理、Catalan数。</li></ul></li><li><strong>线性代数</strong>：矩阵运算、高斯消元、矩阵快速幂。</li><li><strong>概率与期望</strong>：期望DP、概率计算。</li><li><strong>博弈论</strong>：SG函数、NIM游戏。</li></ul><h3 id="6-计算几何"><a class="markdownIt-Anchor" href="#6-计算几何"></a> 6. 计算几何</h3><ul><li><strong>基础几何</strong>：点、线、面、向量运算，叉积、点积。</li><li><strong>算法</strong>：<ul><li>凸包（Graham扫描、Andrew算法）。</li><li>线段相交、点到直线距离、多边形面积。</li><li>最近点对、旋转卡壳。</li></ul></li></ul><h3 id="7-其他技巧"><a class="markdownIt-Anchor" href="#7-其他技巧"></a> 7. 其他技巧</h3><ul><li><strong>位运算</strong>：异或、位掩码、状态压缩。</li><li><strong>离散化</strong>：坐标压缩、值域离散化。</li><li><strong>分块思想</strong>：数组分块、莫队算法。</li><li><strong>随机化算法</strong>：随机化贪心、模拟退火。</li><li><strong>交互题</strong>：与判题器交互、构造性问题。</li></ul><h2 id="二-学习路线"><a class="markdownIt-Anchor" href="#二-学习路线"></a> 二、学习路线</h2><p>以下是一条从零基础到ACM-ICPC竞赛水平的学习路线，分为四个阶段，建议根据个人进度调整时间（总计6-12个月）。</p><h3 id="阶段1编程基础与简单算法1-2个月"><a class="markdownIt-Anchor" href="#阶段1编程基础与简单算法1-2个月"></a> 阶段1：编程基础与简单算法（1-2个月）</h3><p>目标：掌握编程语言，熟悉基本算法和数据结构。</p><ul><li><strong>学习内容</strong>：<ul><li>选择一门语言（推荐C<ins>或Python，C</ins>因性能优势更适合竞赛）。</li><li>学习基本语法：变量、循环、条件语句、函数、指针（C++）。</li><li>掌握STL（C++）或内置库（Python）：vector、queue、stack、map、set、sort等。</li><li>学习基础算法：排序（快速排序、归并排序）、二分查找、简单模拟。</li><li>学习基础数据结构：数组、链表、栈、队列。</li></ul></li><li><strong>练习平台</strong>：<ul><li>LeetCode（简单题）、Codeforces（Div2 A题）、AtCoder（Beginner Contest A-B题）。</li><li>国内：洛谷（入门题）、牛客（基础题）。</li></ul></li><li><strong>推荐资源</strong>：<ul><li>《C++ Primer》（C++基础）。</li><li>LeetCode题目分类练习。</li><li>刷题目标：50-100道简单题，熟练使用STL。</li></ul></li></ul><h3 id="阶段2中级算法与数据结构2-3个月"><a class="markdownIt-Anchor" href="#阶段2中级算法与数据结构2-3个月"></a> 阶段2：中级算法与数据结构（2-3个月）</h3><p>目标：深入理解常见算法，掌握中级数据结构。</p><ul><li><strong>学习内容</strong>：<ul><li>算法：贪心、动态规划（01背包、LCS、LIS）、DFS/BFS、分治法。</li><li>数据结构：堆、并查集、线段树、树状数组、哈希表。</li><li>图论基础：DFS/BFS、最短路径（Dijkstra、Floyd）、最小生成树。</li><li>数学基础：GCD、快速幂、模运算、简单组合数学。</li></ul></li><li><strong>练习平台</strong>：<ul><li>Codeforces（Div2 B-C题）、AtCoder（Beginner Contest C-D题）。</li><li>洛谷（普及+/提高题）、牛客（中级题）。</li></ul></li><li><strong>推荐资源</strong>：<ul><li>《算法竞赛入门经典》（刘汝佳）。</li><li>《挑战程序设计竞赛》（日本，偏重算法实现）。</li><li>刷题目标：100-150道中级题，熟练实现DP和图算法。</li></ul></li></ul><h3 id="阶段3高级算法与专题训练3-4个月"><a class="markdownIt-Anchor" href="#阶段3高级算法与专题训练3-4个月"></a> 阶段3：高级算法与专题训练（3-4个月）</h3><p>目标：掌握竞赛核心算法，熟悉复杂数据结构，提升解题速度。</p><ul><li><strong>学习内容</strong>：<ul><li>高级算法：网络流、二分图匹配、强连通分量、莫队算法。</li><li>高级数据结构：主席树、树链剖分、Splay树。</li><li>计算几何：凸包、线段相交、旋转卡壳。</li><li>数学进阶：矩阵快速幂、CRT、博弈论、概率DP。</li><li>技巧：位运算、离散化、随机化算法、交互题。</li></ul></li><li><strong>练习平台</strong>：<ul><li>Codeforces（Div2 D-E题，Div1 A-B题）、AtCoder（Regular Contest）。</li><li>国内：洛谷（提高+/省选题）、牛客（高级题）。</li><li>参加在线比赛：Codeforces Round、AtCoder Contest，提升临场能力。</li></ul></li><li><strong>推荐资源</strong>：<ul><li>《算法竞赛进阶指南》（李煜东）。</li><li>Codeforces博客与题解。</li><li>刷题目标：150-200道中高级题，熟悉专题算法。</li></ul></li></ul><h3 id="阶段4竞赛模拟与综合提升2-3个月"><a class="markdownIt-Anchor" href="#阶段4竞赛模拟与综合提升2-3个月"></a> 阶段4：竞赛模拟与综合提升（2-3个月）</h3><p>目标：模拟真实竞赛环境，提升综合能力，准备ACM-ICPC。</p><ul><li><strong>学习内容</strong>：<ul><li>复习薄弱专题，查漏补缺。</li><li>学习比赛策略：时间分配、题目选择、调试技巧。</li><li>团队协作（ACM-ICPC为团队赛）：分工、代码审查、沟通。</li><li>掌握复杂题目：多算法组合、构造题、优化技巧。</li></ul></li><li><strong>练习平台</strong>：<ul><li>Codeforces（Div1 C-D题）、AtCoder（Grand Contest）。</li><li>洛谷（NOI/IOI题）、牛客（ACM模式比赛）。</li><li>参加区域赛模拟题、历年ACM-ICPC真题。</li></ul></li><li><strong>推荐资源</strong>：<ul><li>《ACM-ICPC国际大学生程序设计竞赛题解》（多卷）。</li><li>区域赛题库（如HDU、POJ）。</li><li>刷题目标：100-150道竞赛级别题目，参加10-15场模拟赛。</li></ul></li></ul><h2 id="三-学习建议"><a class="markdownIt-Anchor" href="#三-学习建议"></a> 三、学习建议</h2><ol><li><strong>循序渐进</strong>：从简单题入手，逐步挑战难题，避免一开始啃硬骨头。</li><li><strong>多写代码</strong>：算法竞赛重在实现，理论学习后要多敲代码。</li><li><strong>复盘总结</strong>：每道题写完看题解，总结思路和优化方法。</li><li><strong>模拟比赛</strong>：每周参加1-2场在线比赛，培养时间管理和抗压能力。</li><li><strong>团队练习</strong>：ACM-ICPC是团队赛，尽早组队，练习分工与配合。</li><li><strong>工具使用</strong>：熟悉调试工具、模板代码，提高编码效率。</li></ol><h2 id="四-推荐书籍与资源"><a class="markdownIt-Anchor" href="#四-推荐书籍与资源"></a> 四、推荐书籍与资源</h2><ul><li><strong>书籍</strong>：<ul><li>《算法竞赛入门经典》（刘汝佳）：适合初学者，覆盖基础算法。</li><li>《挑战程序设计竞赛》（日本）：算法实现详尽，适合中级。</li><li>《算法竞赛进阶指南》（李煜东）：高级算法和竞赛技巧。</li><li>《算法导论》（CLRS）：理论深入，适合补充背景知识。</li></ul></li><li><strong>在线资源</strong>：<ul><li>刷题平台：Codeforces、AtCoder、LeetCode、洛谷、牛客。</li><li>学习网站：OI Wiki（中文，竞赛知识全面）、CP Algorithms（英文，算法详解）。</li><li>视频教程：B站算法教学视频、Coursera算法课程。</li></ul></li><li><strong>社区</strong>：<ul><li>Codeforces论坛：题目讨论、比赛公告。</li><li>知乎/B站：国内算法竞赛经验分享。</li></ul></li></ul><h2 id="五-时间规划示例"><a class="markdownIt-Anchor" href="#五-时间规划示例"></a> 五、时间规划示例</h2><ul><li><strong>每周安排</strong>：<ul><li>学习新知识：6-8小时（看书、视频、博客）。</li><li>刷题：10-12小时（5-10道题，包含复盘）。</li><li>模拟比赛：3-5小时（1-2场比赛）。</li></ul></li><li><strong>每日建议</strong>：<ul><li>1-2小时学习理论。</li><li>2-3小时刷题（1-3道题，难易搭配）。</li><li>周末参加比赛或专题训练。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从CSDN提取文章为PDF</title>
    <link href="/2025/04/30/%E4%BB%8ECSDN%E6%8F%90%E5%8F%96%E6%96%87%E7%AB%A0%E4%B8%BAPDF/"/>
    <url>/2025/04/30/%E4%BB%8ECSDN%E6%8F%90%E5%8F%96%E6%96%87%E7%AB%A0%E4%B8%BAPDF/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文摘自CSDN文章“# 【新】CSDN文章一键打印、输出PDF（自动阅读全文、全清爽模式）”，原文作者JavonPeng，原文链接[<a href="https://blog.csdn.net/p1279030826/article/details/106602341">https://blog.csdn.net/p1279030826/article/details/106602341</a>]</p></blockquote><h1 id="f12打开开发人员工具在控制台输入以下内容"><a class="markdownIt-Anchor" href="#f12打开开发人员工具在控制台输入以下内容"></a> F12打开开发人员工具，在控制台输入以下内容：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-string">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> articleBox = $(<span class="hljs-string">&quot;div.article_content&quot;</span>);<br>articleBox.<span class="hljs-title function_">removeAttr</span>(<span class="hljs-string">&quot;style&quot;</span>);<br>$(<span class="hljs-string">&quot;.hide-preCode-bt&quot;</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&quot;.author-pjw&quot;</span>).<span class="hljs-title function_">show</span>();<br>$(<span class="hljs-string">&quot;.hide-preCode-bt&quot;</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&quot;pre&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;set-code-hide&quot;</span>);<br>$(<span class="hljs-string">&quot;.hide-preCode-bt&quot;</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&quot;.hide-preCode-box&quot;</span>).<span class="hljs-title function_">hide</span>().<span class="hljs-title function_">remove</span>();<br>$(<span class="hljs-string">&quot;#btn-readmore&quot;</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">remove</span>();<br>$(<span class="hljs-string">&quot;#side&quot;</span>).<span class="hljs-title function_">remove</span>();<br>$(<span class="hljs-string">&quot;.csdn-side-toolbar, .template-box, .blog-footer-bottom, .left-toolbox, .toolbar-inside&quot;</span>).<span class="hljs-title function_">remove</span>();<br>$(<span class="hljs-string">&quot;.comment-box, .recommend-box, .more-toolbox, .article-info-box, .column-group-item&quot;</span>).<span class="hljs-title function_">remove</span>();<br>$(<span class="hljs-string">&quot;aside, .tool-box, .recommend-nps-box, .skill-tree-box&quot;</span>).<span class="hljs-title function_">remove</span>();<br>$(<span class="hljs-string">&quot;main&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;display&#x27;</span>,<span class="hljs-string">&#x27;content&#x27;</span>); <br>$(<span class="hljs-string">&quot;main&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;float&#x27;</span>,<span class="hljs-string">&#x27;left&#x27;</span>); <br>$(<span class="hljs-string">&quot;#mainBox&quot;</span>).<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;100%&quot;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;body&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">style</span>.<span class="hljs-property">zoom</span>=<span class="hljs-number">0.8</span>;<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">print</span>();<br>&#125;)();<br></code></pre></td></tr></table></figure><p>会自动启动PDF打印机，设置相关参数然后保存即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI大模型API调用的相关概念</title>
    <link href="/2025/04/26/AI%E5%A4%A7%E6%A8%A1%E5%9E%8BAPI%E8%B0%83%E7%94%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
    <url>/2025/04/26/AI%E5%A4%A7%E6%A8%A1%E5%9E%8BAPI%E8%B0%83%E7%94%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>声明：本篇笔记由<strong>Grok3大模型</strong>生成。</p></blockquote><p>AI大模型的API调用是指通过应用程序编程接口（API）与大型人工智能模型（如语言模型、图像生成模型等）进行交互，以获取模型的推理结果或执行特定任务。以下是对相关概念的简洁介绍：</p><h3 id="1-什么是api调用"><a class="markdownIt-Anchor" href="#1-什么是api调用"></a> 1. <strong>什么是API调用？</strong></h3><p>API（Application Programming Interface）是一个中介接口，允许不同的软件系统相互通信。AI大模型的API调用是通过发送请求（通常是HTTP请求）到模型的服务器，传递输入数据（如文本、图像等），然后接收模型的输出（如生成文本、分类结果等）。</p><p><strong>流程示例</strong>：</p><ul><li>开发者发送一个包含输入文本的API请求（如“翻译这句话：Hello, world!”）。</li><li>模型服务器处理请求，调用AI模型进行推理。</li><li>服务器返回结果（如“¡Hola, mundo!”）。</li></ul><h3 id="2-ai大模型"><a class="markdownIt-Anchor" href="#2-ai大模型"></a> 2. <strong>AI大模型</strong></h3><p>AI大模型通常指参数量巨大（十亿到万亿级）的深度学习模型，如：</p><ul><li><strong>语言模型</strong>：如Grok、GPT、LLaMA，用于文本生成、翻译、问答等。</li><li><strong>多模态模型</strong>：如DALL·E、Stable Diffusion，支持文本到图像生成或图像处理。<br />这些模型通常部署在云端，因计算资源需求高，开发者通过API访问而非本地运行。</li></ul><h3 id="3-api调用相关概念"><a class="markdownIt-Anchor" href="#3-api调用相关概念"></a> 3. <strong>API调用相关概念</strong></h3><ul><li><strong>端点（Endpoint）</strong>：API的访问地址，通常是URL（如<code>https://api.x.ai/v1/model</code>）。</li><li><strong>请求（Request）</strong>：<ul><li><strong>方法</strong>：通常是POST或GET，POST用于发送复杂数据。</li><li><strong>参数</strong>：包括输入数据（如文本、提示词）、模型配置（如温度、最大输出长度）。</li><li><strong>认证</strong>：通过API密钥或令牌确保调用权限。</li></ul></li><li><strong>响应（Response）</strong>：<ul><li>通常以JSON格式返回，包含模型输出、状态码、错误信息等。</li><li>示例：<code>&#123;&quot;text&quot;: &quot;生成的回答&quot;, &quot;status&quot;: &quot;success&quot;&#125;</code>。</li></ul></li><li><strong>配额与计费</strong>：<ul><li>API调用通常有限额（如每月免费调用次数）。</li><li>按调用次数、输入/输出token数或计算资源计费。</li></ul></li><li><strong>延迟（Latency）</strong>：从发送请求到接收响应的时间，受模型大小和服务器负载影响。</li><li><strong>Token</strong>：<ul><li>许多语言模型按token（词或字符片段）计算输入和输出量。</li><li>例如，英文单词通常是1个token，中文字符可能是1-2个token。</li></ul></li></ul><h3 id="4-典型应用场景"><a class="markdownIt-Anchor" href="#4-典型应用场景"></a> 4. <strong>典型应用场景</strong></h3><ul><li><strong>文本生成</strong>：如自动撰写文章、生成代码。</li><li><strong>对话系统</strong>：构建聊天机器人。</li><li><strong>数据分析</strong>：处理文本分类、情感分析。</li><li><strong>多模态任务</strong>：生成图像、语音转文字等。</li></ul><h3 id="5-如何使用api调用"><a class="markdownIt-Anchor" href="#5-如何使用api调用"></a> 5. <strong>如何使用API调用</strong></h3><ol><li><strong>注册与获取API密钥</strong>：从服务提供商（如xAI、OpenAI）获取访问权限。</li><li><strong>阅读文档</strong>：了解API的端点、参数和限制。</li><li><strong>编写代码</strong>：使用编程语言（如Python）通过库（如<code>requests</code>）发送请求。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;https://api.example.com/v1/model&quot;</span><br>headers = &#123;<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer YOUR_API_KEY&quot;</span>&#125;<br>data = &#123;<span class="hljs-string">&quot;prompt&quot;</span>: <span class="hljs-string">&quot;Hello, world!&quot;</span>, <span class="hljs-string">&quot;max_tokens&quot;</span>: <span class="hljs-number">50</span>&#125;<br>response = requests.post(url, json=data, headers=headers)<br><span class="hljs-built_in">print</span>(response.json())<br></code></pre></td></tr></table></figure></li><li><strong>处理响应</strong>：解析返回的JSON数据，提取所需结果。</li></ol><h3 id="6-注意事项"><a class="markdownIt-Anchor" href="#6-注意事项"></a> 6. <strong>注意事项</strong></h3><ul><li><strong>成本管理</strong>：监控调用量，避免超预算。</li><li><strong>数据隐私</strong>：确保输入数据符合隐私政策，敏感数据需加密。</li><li><strong>错误处理</strong>：处理超时、配额超限等异常情况。</li><li><strong>模型选择</strong>：根据任务选择合适的模型（如小型模型速度快，大型模型效果好）。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web学习笔记(一)：HTML篇</title>
    <link href="/2025/04/17/Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AHTML%E7%AF%87/"/>
    <url>/2025/04/17/Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AHTML%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>声明：本篇笔记摘自<a href="https://www.wenjingketang.com/bookinfo?book_id=9310">《Web前端技术 - 航空工业出版社》</a>，遵循<a href="https://creativecommons.org/licenses/by/4.0/legalcode.zh-hans">CC BY 4.0协议</a>。<br />存在由AI生成的小部分内容，仅供参考，请仔细甄别可能存在的错误。<br />由于技术的迭代，部分标签已被新版本的HTML弃用，本篇笔记对其中一些标注了(已废弃)字样，但可能存在误标、漏标等情况，请以最新标准为准。</p></blockquote><hr /><h1 id="一-html概述"><a class="markdownIt-Anchor" href="#一-html概述"></a> 一、HTML概述</h1><p><strong>HTML (HyperText Markup Language，超文本标记语言)</strong> 是用于创建和设计网页的标准标记语言。它通过一系列 <strong>标签(Tags)</strong> 定义网页的结构和内容，浏览器会解析这些标签并渲染成用户看到的页面。</p><h1 id="二-常用html标签"><a class="markdownIt-Anchor" href="#二-常用html标签"></a> 二、常用HTML标签</h1><h2 id="1基本结构"><a class="markdownIt-Anchor" href="#1基本结构"></a> 1.基本结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 文档类型声明 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>     <span class="hljs-comment">&lt;!-- HTML部分 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 网页头部 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 元数据，声明字符集 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 网页标题 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;img/favicon.png&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 链接网页图标 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>     <span class="hljs-comment">&lt;!-- 网页主体部分 --&gt;</span><br><span class="hljs-comment">&lt;!-- 网页可见部分 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用规范专用、结构清晰的标签，可以方便搜索引擎整理网页内容，有利于信息检索。</p><h2 id="2常用标签"><a class="markdownIt-Anchor" href="#2常用标签"></a> 2.常用标签</h2><h3 id="1-文档标签"><a class="markdownIt-Anchor" href="#1-文档标签"></a> ① 文档标签</h3><ul><li><code>&lt;!DOCTYPE&gt;</code>：文档声明，<code>&lt;!DOCTYPE html&gt;</code>表明此文档使用H5标准。</li><li><code>&lt;html&gt;</code>：又称根标签，表明这是一个H5文档。</li><li><code>&lt;head&gt;</code>：标记文档头部，存储网页基本信息。<ul><li><code>&lt;meta&gt;</code>：元信息标签，用于设置描述和关键词，以便搜索引擎检索。<ul><li>字符集：<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code> 定义网页使用utf-8字符集。</li><li>网页视口：<code>&lt;meta name=&quot;viewport&quot;&gt;</code> 设置视口高度、缩放比等，常用于在响应式设计中使网页适配移动端。</li></ul></li><li><code>&lt;title&gt;</code>：标记网页标题，显示在浏览器标签上。</li><li><code>&lt;link&gt;</code>：链接外部资源，规定了当前文档与某个外部资源的关系。<ul><li>链接图标：<code>&lt;link rel=&quot;shortcut icon&quot; href=&quot;img/favicon.png&quot;&gt;</code></li><li>链接CSS样式：<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;index.css&quot;&gt;</code></li></ul></li></ul></li><li><code>&lt;body&gt;</code>：标记文档主体，用于设置展示给用户的内容。</li></ul><h3 id="2-结构标签"><a class="markdownIt-Anchor" href="#2-结构标签"></a> ② 结构标签</h3><ul><li><code>&lt;header&gt;</code>：页眉标签，通常包含网站Logo、网页主导航和搜索框等。</li><li><code>&lt;nav&gt;</code>：导航标签，标记页面导航的链接组，如主菜单、侧边栏导航或者页内导航等。</li><li><code>&lt;article&gt;</code>：文章块标签，用于标记一块完整独立的内容，如文章、博客条目，用户评论。</li><li><code>&lt;section&gt;</code>：区块标签，用于标记文档中的节，从而对内容进行分区，如章节、页眉页脚。</li><li><code>&lt;aside&gt;</code>：附栏标签，用于标记引用内容、广告等与内容无关的部分。</li><li><code>&lt;footer&gt;</code>：页脚标签，用于标记文档或节的页脚，如友链、版权等信息。</li><li><code>&lt;div&gt;</code>：块级无语义容器，用于模块化布局。</li><li><code>&lt;span&gt;</code>：行内无语义标签，常用标记于文章标题下的作者、时间、地点等附属信息。</li></ul><p>★ 使用示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>简单网页示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 页眉部分 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的网站<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>关于我们<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>联系我们<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 主体内容 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 文章部分 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>欢迎来到我的博客<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>第一章：HTML 简介<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>HTML 是用于构建网页的标准标记语言。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>第二章：CSS 简介<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CSS 用于控制网页的样式和布局。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>发布时间：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2023年10月10日<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> | 作者：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 附栏部分 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>相关链接<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>HTML 教程<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>CSS 教程<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 页脚部分 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;copy;</span> 2023 我的网站. 版权所有.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>隐私政策<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>使用条款<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-文本标签"><a class="markdownIt-Anchor" href="#3-文本标签"></a> ③ 文本标签</h3><ul><li><code>&lt;h1&gt; ~ &lt;h6&gt;</code>：1级标题 ~ 6级标题，默认使文字加粗，字号依次减小。</li><li><code>&lt;p&gt;</code> (paragraph)：段落标签，用于标记段落文本，默认使用系统的字体字号。</li><li><code>&lt;strong&gt;</code>：强调标签，呈现<strong>粗体</strong>效果，语气较重。<ul><li><code>&lt;b&gt;</code>：只有加粗效果，无强调作用。</li></ul></li><li><code>&lt;em&gt;</code> (emphasis)：强调标签，呈现<em>斜体</em>效果，语气较轻。<ul><li><code>&lt;i&gt;</code>：只有斜体效果，无强调作用。</li></ul></li><li><code>&lt;sup&gt;</code>：标记上标，如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>、注册商标<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msup></mrow><annotation encoding="application/x-tex">^{TM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span></span></span></span></span></span></span></span>。</li><li><code>&lt;sub&gt;</code>：标记下标，如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>a</mi><mi>C</mi><msub><mi>O</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">CaCO_{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li><li><code>&lt;ins&gt;</code> (insert)：表示插入的文本，默认添加下划线样式。</li><li><code>&lt;del&gt;</code> (delete)：表示删除的文本，默认添加删除线样式。</li><li><code>&lt;abbr&gt;</code> (abbreviation)：标记简称或缩写词，鼠标悬停时使用气泡显示全称。<ul><li>如：<abbr text="Hypertext markup language">HTML</abbr>。</li></ul></li><li><code>&lt;br /&gt;</code>：实现文本换行，不建议大量使用。</li><li><code>&lt;hr /&gt;</code>：标记水平线。<ul><li>align属性：设置对齐方式，<strong>center 居中</strong> | left 左对齐 | right 右对齐</li><li>size属性：设置粗细，以像素(px)为单位，<strong>默认2px</strong>。</li><li>width属性：设置宽度，单位为px或%，<strong>默认100%</strong>。</li><li>color属性：设置颜色，可用颜色名、#RGB十六进制、(r, g, b)设置。</li></ul></li><li><code>&lt;dfn&gt;</code>：用于标记专用术语，默认添加斜体效果。</li><li><code>&lt;pre&gt;</code>：表示预定义格式文本，即保利原有的空格和换行。</li><li><code>&lt;code&gt;</code>：用于标记代码或文件名，一般包裹在<code>&lt;pre&gt;</code>标签中以保留原有的格式。</li></ul><h3 id="4-特殊字符转义"><a class="markdownIt-Anchor" href="#4-特殊字符转义"></a> ④ 特殊字符转义</h3><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">含义</th><th style="text-align:center">代码</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">空格</td><td style="text-align:center"><code>&amp;nbsp;</code></td><td style="text-align:center">Non-Breaking Space</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于号</td><td style="text-align:center"><code>&amp;lt;</code></td><td style="text-align:center">less than</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于号</td><td style="text-align:center"><code>&amp;gt;</code></td><td style="text-align:center">great than</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">逻辑与符号</td><td style="text-align:center"><code>&amp;amp;</code></td><td style="text-align:center">ampersand</td></tr><tr><td style="text-align:center">￥</td><td style="text-align:center">人民币符号</td><td style="text-align:center"><code>&amp;yen;</code></td><td style="text-align:center">类似拼音</td></tr><tr><td style="text-align:center">©</td><td style="text-align:center">版权符号</td><td style="text-align:center"><code>&amp;copy;</code></td><td style="text-align:center">copyright</td></tr><tr><td style="text-align:center">®</td><td style="text-align:center">注册商标符号</td><td style="text-align:center"><code>&amp;reg;</code></td><td style="text-align:center">register</td></tr><tr><td style="text-align:center">°</td><td style="text-align:center">度符号</td><td style="text-align:center"><code>&amp;deg;</code></td><td style="text-align:center">degree</td></tr><tr><td style="text-align:center">±</td><td style="text-align:center">正负号</td><td style="text-align:center"><code>&amp;plusmn;</code></td><td style="text-align:center">plus-minus</td></tr><tr><td style="text-align:center">×</td><td style="text-align:center">乘号</td><td style="text-align:center"><code>&amp;times;</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">÷</td><td style="text-align:center">除号</td><td style="text-align:center"><code>&amp;divide;</code></td><td style="text-align:center"></td></tr></tbody></table><h3 id="5-多媒体"><a class="markdownIt-Anchor" href="#5-多媒体"></a> ⑤ 多媒体</h3><ul><li><p>★ 路径表示法</p><ul><li>图片在同级目录下：<code>example.png</code></li><li>图片在下级目录下：<code>dic/example.png</code></li><li>图片在上级目录下：<code>../dic/example.png</code></li></ul></li><li><p>图片标签：<code>&lt;img src=&quot;路径&quot; alt=&quot;提示文本&quot; /&gt;</code></p><ul><li>src支持链接 JPEG 、 GIF 和 <code>PNG</code> 三种格式的图片</li></ul></li><li><p>音频标签：<code>&lt;audio src=&quot;路径&quot; controls=&quot;controls&quot;&gt;提示文本&lt;/audio&gt;</code></p><ul><li>controls属性：显示音频控件</li></ul></li><li><p>视频标签：<code>&lt;video src=&quot;路径&quot; controls=&quot;controls&quot;&gt;提示文本&lt;/video&gt;</code></p><ul><li>controls属性：显示视频控件</li></ul></li><li><p>流标签：<code>&lt;figure&gt;&lt;/figure&gt;</code></p><ul><li>表示页面中的一块独立的内容，表现为具有左右缩进的内容快。</li><li><code>&lt;figcaption&gt;</code>：嵌套在&lt;figure中标记流的标题，可以省略。</li></ul></li></ul><p>★ 使用示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span>&gt;</span>流标题<span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/p1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;示例图片&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>流内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-列表"><a class="markdownIt-Anchor" href="#6-列表"></a> ⑥ 列表</h3><ul><li>无序列表：<ul></ul><ul><li>各级列表项前，默认分别显示实心圆、空心圆、实心方块图标。</li><li>也可通过<code>type= &quot;disc&quot; &quot;circle&quot; &quot;square&quot;</code> 强制指定序号样式。</li></ul></li><li>有序列表：<code>&lt;ol&gt;&lt;/ol&gt;</code>，具有以下属性：<ul><li><code>reversed=&quot;reversed&quot;</code>：降序排列(仅颠倒编号，各列表项内容不颠倒)。</li><li><code>start=&quot;1&quot;</code>：指定序号的起始值。</li><li><code>type=&quot;1&quot; &quot;A&quot; &quot;a&quot; &quot;I&quot; &quot;i&quot;</code>：指定序号的样式。</li></ul></li><li>自定义列表： <code>&lt;dl&gt;&lt;/dl&gt;</code><ul><li>使用 <code>&lt;dt&gt;&lt;/dt&gt;</code> 标记列表标题</li><li>使用 <code>&lt;dd&gt;&lt;/dd&gt;</code> 标记列表内容</li></ul></li><li>列表项：<code>&lt;li&gt;&lt;/li&gt;</code>，与<code>&lt;ol&gt;</code>相似，具有以下属性：<ul><li><code>value=&quot;1&quot;</code>：指定当前项的序号，并使之后的列表项重新编号。</li><li><code>type=&quot;1&quot; &quot;A&quot; &quot;a&quot; &quot;I&quot; &quot;i&quot;</code>：指定序号的样式。</li></ul></li></ul><p>★ 使用示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;disc&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表第一项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表第二项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">reversed</span>=<span class="hljs-string">&quot;reversed&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span>有序列表第一项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表第二项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 自定义列表中可以有多个标题，列表项没有项目符号，也不强调次序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span> 自定义列表标题<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>自定义列表第一项<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>自定义列表第二项<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>自定义列表标题<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>自定义列表项目<span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-超链接"><a class="markdownIt-Anchor" href="#7-超链接"></a> ⑦ 超链接</h3><ul><li><code>&lt;a href=&quot;目标地址&quot;&gt; 载体 &lt;/a&gt;</code><ul><li>href属性：必须设置，若暂时未确定地址，用href=&quot;#&quot;将链接置空。</li><li>target属性：<strong>self 当前窗口打开</strong> | blank 新窗口打开</li><li>download属性：指定资源的文件名，并且强制浏览器执行下载操作(仅Chrome和FIreFox支持)。</li></ul></li><li>锚点链接：设置某个标签的id属性，将链接的href属性设置为<code>href=&quot;#id名称&quot;</code>，可以创建一个锚点。用户点击链接时会自动跳转到指定id所在的标签处。</li><li>电子邮件链接：<code>href = &quot;mainto:电子邮件地址?subject=邮件主题&quot;</code></li><li>图像热点链接：在一张图片上根据坐标分别设置不同区域的超链接。步骤如下：<ul><li>在图片标签<code>&lt;img /&gt;</code>下添加一个<code>&lt;map&gt;</code>标签，其name属性为图片的id，表示添加图像热点链接的作用区域</li><li>在<code>&lt;map&gt;</code>标签中添加几个<area>标签，使用下列属性设置热点链接：<ul><li>shape：circle 圆形 | rect 矩形 | poly 多边形</li><li>coords：关键点的坐标，参数如下：<ul><li>circle形状：coords = “圆心x, 圆心y，半径”</li><li>rect形状：coords = “左上顶点x, 左上顶点y, 右下顶点x, 右下顶点y”</li><li>poly形状：coords = “顶点1x, 顶点1y, 顶点2x, 顶点2y, …”</li></ul></li></ul></li></ul></li></ul><p>★ 使用示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;img/p1.png&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">pic_dog</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 简单的超链接示例 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/p1.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;小狗&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>点击预览<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#pic_dog&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 锚点示例：点击跳转到小狗图片 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>查看图片<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/main.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;动物大全&quot;</span>  <span class="hljs-attr">usermap</span>=<span class="hljs-string">&quot;#map&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!-- 图像热点链接 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 属性值应与usermap的值相同 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;88, 77, 63&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;img/dogs.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;小狗&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;rect&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;26, 190, 151, 357&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;img/cats.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;小猫&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-表格"><a class="markdownIt-Anchor" href="#8-表格"></a> ⑧ 表格</h3><ul><li>基本结构<ul><li><code>&lt;table&gt;</code>：标记表格。</li><li><code>&lt;caption&gt;</code>：标记表格的标题。</li><li><code>&lt;tr&gt;</code>：标记表格中的一行。</li><li><code>&lt;th&gt;</code>：包含在<code>&lt;tr&gt;</code>中，标记表头内容，默认加粗居中。</li><li><code>&lt;td&gt;</code>：包含在<code>&lt;tr&gt;</code>中，标记普通内容，默认不加粗左对齐。</li></ul></li><li>表格分组<ul><li>按行分组：<ul><li><code>&lt;thead&gt;</code>：标记表头部分(<code>&lt;th&gt;</code>标记的是表头的一格)。</li><li><code>&lt;tbody&gt;</code>：标记表体部分。</li><li><code>&lt;tfoot&gt;</code>：标记表尾部分。</li></ul></li><li>按列分组：<ul><li><code>&lt;col&gt;</code>：包含在<code>&lt;table&gt;</code>中，通过 <code>span属性</code> 设置每组的列数。</li></ul></li></ul></li><li>常用属性<ul><li>整体边框<ul><li>设置<code>&lt;table&gt;</code>的 <code>border属性</code>，单位为px。</li></ul></li><li>单元格的内外边距<ul><li>内边距(内容 - 边框)：设置<code>&lt;table&gt;</code>的 <code>cellpadding属性</code>，单位为px。</li><li>外边距(边框 - 边框)：设置<code>&lt;table&gt;</code>的 <code>cellspacing属性</code>，单位为px。</li><li>图示：<br /><img src="Web%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE%E5%8F%8A%E5%B1%9E%E6%80%A7%E6%A0%B7%E5%BC%8F-20250316074722163.png" alt="" /><ul><li>这两个属性不常在HTML中使用(已过时),而是使用CSS中的<code>border-spacing</code>属性。</li></ul></li></ul></li><li>表格内外边距（外遵框架frame，内守规矩rulles）<ul><li>表格内边框：设置<code>&lt;table&gt;</code>的 <code>rules属性</code>(已废弃) ，取值如下：<ul><li>none：不显示内边框</li><li>all：显示所有边框</li><li>groups：只显示分组的边框</li><li>rows：显示行之间的边框</li><li>cols：显示列之间的边框</li></ul></li><li>表格外边框：设置<code>&lt;table&gt;</code>的 <code>frame属性</code>(已废弃) ，取值如下：<ul><li>void：不显示外边框</li><li>box、boder：显示所有外边框</li><li>above：显示上边框</li><li>below：显示下边框</li><li>lhs：显示左外边框</li><li>rhs：显示有外边框</li><li>hsides：(horizon sides)显示上下边框</li><li>vsides：(vertical sides)显示左右边框</li></ul></li></ul></li><li>单元格跨行、跨列<ul><li>跨行：设置<code>&lt;th&gt;</code>或<code>&lt;td&gt;</code>的rowspan属性，值为跨行数。</li><li>跨列：设置<code>&lt;th&gt;</code>或<code>&lt;td&gt;</code>的colspan属性，值为跨列数。</li></ul></li></ul></li></ul><p>★ 使用示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">rules</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span>      <span class="hljs-comment">&lt;!-- 以1px显示所有外边框 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>表格标题<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span> <span class="hljs-attr">span</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span>     <span class="hljs-comment">&lt;!-- 垂直分组：第一组占一列 --&gt;</span>                <br><span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c2&quot;</span> <span class="hljs-attr">span</span>=<span class="hljs-string">&quot;3&quot;</span> /&gt;</span>     <span class="hljs-comment">&lt;!-- 垂直分组：第二组占三列 --&gt;</span><br><span class="hljs-comment">&lt;!-- 水平分组：表头部分 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头第一格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头第二格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头第三格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头第四格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 水平分组：表体部分 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-comment">&lt;!--跨行内容--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>内容(1,1)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>(占两行)<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(1,2)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(1,3)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(1,4)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(2,2)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(2,3)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(2,4)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>内容(3,1)<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(3,2)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(3,3)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(3,4)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 水平分组：表尾部分 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表尾第一格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-comment">&lt;!--跨列内容--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>表尾第二格(占三列)<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>★ 表格效果：</p><table border="1" rules="all">      <!-- 以1px显示所有外边框 --><caption>表格标题</caption><col class="c1" span="1" />     <!-- 垂直分组：第一组占一列 -->                <col class="c2" span="3" />     <!-- 垂直分组：第二组占三列 --><!-- 水平分组：表头部分 --><thead><tr><th>表头第一格</th><th>表头第二格</th><th>表头第三格</th><th>表头第四格</th></tr></thead><!-- 水平分组：表体部分 --><tbody><tr><!--跨行内容--><th rowspan="2">内容(1,1)<br/>(占两行)</th><td>内容(1,2)</td><td>内容(1,3)</td><td>内容(1,4)</td></tr><tr><td>内容(2,2)</td><td>内容(2,3)</td><td>内容(2,4)</td></tr><tr><th>内容(3,1)</th><td>内容(3,2)</td><td>内容(3,3)</td><td>内容(3,4)</td></tr></tbody><!-- 水平分组：表尾部分 --><tfoot><tr><th>表尾第一格</th><!--跨列内容--><th colspan="3">表尾第二格(占三列)</th></tr></tfoot></table><h3 id="9-表单"><a class="markdownIt-Anchor" href="#9-表单"></a> ⑨ 表单</h3><ul><li>基本组成：表单域、表单控件、提交按钮、提示信息。<br /><img src="Web%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE%E5%8F%8A%E5%B1%9E%E6%80%A7%E6%A0%B7%E5%BC%8F-20250317192024390.png" alt="" /><ul><li>表单域：网页中放置表单控件与提示信息的区域，用于采集用户输入信息并传输到服务器。<ul><li><code>&lt;form action=&quot;提交地址&quot; method=&quot;提交方式&quot;&gt;&lt;/form&gt;</code>（form标签不可互相嵌套。）<ul><li>action属性：表示数据提交的地址，一般是一个URL，开发初期可使用#占位置空。</li><li>method属性：提交表单数据的方式，默认为get，一般使用post。</li><li>name属性：表单的名称。</li><li>autocomplete属性：自动记录并弹出历史记录。取值： <strong>on</strong> | off</li><li>novalidate属性：值为novalidate，若设置则不会对输入的内容进行检查。</li><li>enctype属性：设置数据发送到服务器时的编码类型，取值：<ul><li><strong>application/x-www-form-urlencoded</strong>：表示对所有字符编码再传输，会导致大文件传输效率降低。</li><li>mutipart/formdata：表示传输的数据为二进制类型。</li><li>text/plain：表示传输纯文本，不编码特殊字符，但是空格转换为加号“+”。</li></ul></li><li>target属性：表示表单数据提交地址的打开方式，取值：<strong>self 当前窗口打开</strong> | blank 新窗口打开</li></ul></li></ul></li><li>提交按钮：用于用户确定信息填写完毕后将其传输至服务器。</li><li>提示信息：提示用户输入信息的内容和类型。</li><li>常用表单控件：提供表单功能，如文本框、按钮、单/复选框、搜索框等。<ul><li><code>&lt;input type=&quot;text&quot; /&gt;</code>：单行文本框，用于输入简短的文本，如账号密码。</li><li><code>&lt;input type=&quot;password&quot; /&gt;</code>：密码文本框，会隐藏输入的内容，显示黑色圆点。</li><li><code>&lt;input type=&quot;radio&quot; /&gt;</code>：单选框，用于单项选择，如性别、年级等。</li><li><code>&lt;input type=&quot;checkbox&quot; /&gt;</code>：复选框，用于多项选择(也可以单选)，如兴趣爱好爱好。</li><li><code>&lt;input type=&quot;button&quot; /&gt;</code>：普通按钮，用于标记可单机的按钮，通过value属性可设置按钮内容。<ul><li>作用同<code>&lt;button&gt;</code>标签，后者可嵌入文本、图像等内容，同时拥有更丰富的样式。</li></ul></li><li><code>&lt;input type=&quot;submit&quot; /&gt;</code>：提交按钮，用于提交用户输入的数据，默认内容为“提交”。</li><li><code>&lt;input type=&quot;reset&quot; /&gt;</code>：重置按钮，用于清空表单中的数据，默认内容为“重置”。</li><li><code>&lt;input type=&quot;image&quot; /&gt;</code>：图像形式的提交按钮，使用图像代替普通提交按钮样。</li><li><code>&lt;input type=&quot;file&quot; /&gt;</code>：文件域，包含一个“选择文件”的按钮和表示选中文件的文本，用户单机按钮可选择文件上传。</li><li><code>&lt;input type=&quot;email&quot; /&gt;</code>：邮箱地址文本框，支持验证邮箱格式正确性，并提示错误信息。</li><li><code>&lt;input type=&quot;url&quot; /&gt;</code>：地址文本框，支持验证URL格式正确性，并提示错误信息。</li><li><code>&lt;input type=&quot;tel&quot; /&gt;</code>：电话号码文本框，通过pattern属性设置正则表达式限制输入格式。</li><li><code>&lt;input type=&quot;search&quot; /&gt;</code>：搜索框，能够记录输入的字符，作为网站搜索的关键词。</li><li><code>&lt;input type=&quot;number&quot; /&gt;</code>：数值文本框，只能输入数字，支持设置max,min,step,value属性限制输入内容的边界、间隔和默认值。</li><li><code>&lt;input type=&quot;range&quot; /&gt;</code>：数值范围滑块，将数值文本框显示为滑动条控件。</li><li><code>&lt;input type=&quot;date&quot; /&gt;</code>：日期时间文本框，可通过设置type来控制时间的精度：date(天) | week(周) | month（月） | time(分钟)</li></ul></li><li>其他表单控件：<ul><li><code>&lt;textarea clos=&quot;列数&quot; rows=&quot;行数&quot; palcehoder=“提示信息”&gt;</code>：文本区域(支持输入多行文本，类似于留言板)</li><li><code>&lt;select size=&quot;选项个数&quot; mutiple=&quot;mutiple&quot;&gt;&lt;option&gt;选项一&lt;/option&gt;&lt;option&gt;选项二&lt;/option&gt;&lt;option&gt;选项三&lt;/option&gt;&lt;/select&gt;</code>:选择框(下拉列表)<ul><li>若为select设置mutiple属性，则选项会按多行显示，且支持按Ctrl多选</li><li>若为option设置selected属性，默认选中此选项</li><li>若选项较多，可使用<code>&lt;optgroup label=&quot;组名&quot;&gt;&lt;/optgroup&gt;</code>包含多个<code>&lt;option&gt;</code>标签，进行选项分组</li></ul></li><li>数据列表：支持用户输入关键词匹配选项，同时也支持用户直接选择列表中的选项，格式如下：</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;类型&quot;</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;列表名称&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;列表名称&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;说明内容1&quot;</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span> <span class="hljs-comment">&lt;!-- 说明内容不会被填入输入框 ---&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;说明内容2&quot;</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center"><strong>上述代码效果说明</strong></th><th style="text-align:center"><strong>图示</strong></th></tr></thead><tbody><tr><td style="text-align:center">支持用户选择选项</td><td style="text-align:center"><img src="Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%EF%BC%9AHTML%E7%AF%87-20250417194505881.png" alt="" /></td></tr><tr><td style="text-align:center">支持用户输入匹配</td><td style="text-align:center"><img src="Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%EF%BC%9AHTML%E7%AF%87-20250417194717055.png" alt="" /></td></tr><tr><td style="text-align:center">说明文字不会被填入输入框</td><td style="text-align:center"><img src="Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%EF%BC%9AHTML%E7%AF%87-20250417194750834.png" alt="" /></td></tr></tbody></table><ul><li>常用表单属性</li></ul><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">属性值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">name</td><td style="text-align:center">自定义</td><td style="text-align:center">表单控件的名称</td></tr><tr><td style="text-align:center">value</td><td style="text-align:center">自定义</td><td style="text-align:center">表单控件的默认值</td></tr><tr><td style="text-align:center">readonly</td><td style="text-align:center">readonly</td><td style="text-align:center">表单控件不可编辑修改</td></tr><tr><td style="text-align:center">disabled</td><td style="text-align:center">disabled</td><td style="text-align:center">禁用该表单控件（显示为灰色）</td></tr><tr><td style="text-align:center">checked</td><td style="text-align:center">checked</td><td style="text-align:center">该项默认选中（单选钮或复选框）</td></tr><tr><td style="text-align:center">autocomplete</td><td style="text-align:center">on/off</td><td style="text-align:center">自动完成功能</td></tr><tr><td style="text-align:center">autofocus</td><td style="text-align:center">autofocus</td><td style="text-align:center">自动获取焦点</td></tr><tr><td style="text-align:center">form</td><td style="text-align:center"><code>&lt;form&gt;</code>的id属性值</td><td style="text-align:center">指定控件所属表单</td></tr><tr><td style="text-align:center">placeholder</td><td style="text-align:center">字符串</td><td style="text-align:center">显示在输入型文本框中的输入提示</td></tr><tr><td style="text-align:center">required</td><td style="text-align:center">required</td><td style="text-align:center">该表单控件不可为空</td></tr><tr><td style="text-align:center">pattern</td><td style="text-align:center">字符串(正则表达式)</td><td style="text-align:center">验证输入内容的模式</td></tr></tbody></table><ul><li>提示信息：<code>&lt;label for=&quot;目标控件id&quot;&gt;提示信息&lt;/label&gt;</code><ul><li>用于单选/复选框选择钮后的文字说明，或按钮中的文字(如：○ <strong>18岁以下</strong>)</li><li>点击提示信息也能够激活对应的控件，有利于优化用户体验</li></ul></li><li>表单对象分组：<code>&lt;fieldset&gt;</code><ul><li>格式：</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>账号：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%EF%BC%9AHTML%E7%AF%87-20250417200335718.png" alt="" /></p><hr /><p>★ 常用表单标签使用示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>会员信息表<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>基本信息<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>昵称：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;idc&quot;</span>&gt;</span>头像：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;idc&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>其他信息<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>性别：<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;nan&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nan&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rad&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;nv&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nv&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rad&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>兴趣：<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;chang&quot;</span>&gt;</span>唱歌<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;chang&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;chb&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;tiao&quot;</span>&gt;</span>跳舞<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tiao&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;chb&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;dong&quot;</span>&gt;</span>运动<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dong&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;chb&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;gq&quot;</span>&gt;</span>个性签名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gq&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;40&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>★显示效果<br /><img src="Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%EF%BC%9AHTML%E7%AF%87-20250417200631467.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Web</category>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十九岁的栈帧：回溯那些改变我人生的函数调用</title>
    <link href="/2025/04/15/%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/"/>
    <url>/2025/04/15/%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="birthday.jpg" alt="" /><br />从2022年写出第一个程序到现在，也有三四个年头了。今天是我的十九岁生日，也正好借此机会，回顾一下我走上编程这条路的过程和经历。</p><hr /><p>第一次见到代码，好像还是在我初中那会儿，有次在跟QQ上的网友玩一个投骰子的游戏，群里有个大佬说他会拿Python写一个骰子，然后给出了类似于下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ramdom<br>a = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p>现在看来这个程序很简单，只是单纯地输出一个1-6之间的随机整数，但当时给了我不小的震撼：“三行字(当时甚至不知道这个叫代码)就可以让电脑给我一个随机的数字！”</p><p>震撼之余跟大佬聊了很久，也从此对<code>Python</code>这么个编程语言有了初识。</p><hr /><p>转眼之间到了高中，高一开学的时候发了本《信息技术》教材，长这个样子：<br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414093627575.png" alt="" /></p><p>当我看到这一页时，发现了一个熟悉的身影 – Python（命运的齿轮开始悄然转动…）</p><p><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414094019127.png" alt="" /></p><p>理所当然地，我开始对Python产生了较为浓厚的兴趣，并且开始尝试学习和编写程序。<br />但是那个时候，还处于一个门都没摸到的境界，学什么，怎么学都是问题。<br />好在互联网和网络上的各路大佬给了我指导。通过搜索，得到了一些学习渠道：</p><ul><li><a href="https://www.w3school.com.cn/python/index.asp">W3school - Python教程</a></li><li><a href="https://www.bilibili.com/video/BV1qW4y1a7fU/?vd_source=a1d64ca1ba2129f594954cdd4e9c4db4">黑马程序员 - # 8天python从入门到精通</a></li><li><a href="https://zhuanlan.zhihu.com/p/665135869">《Python编程：从入门到实践》</a></li></ul><p>最初我在W3school上，认识了Python中的变量与字符串、列表这些概念，进而开始读《Python编程：从入门到实践》这本书，一直学到了字典；这时我发现靠自学有些吃力，于是开始借助一些视频课程进行深入理解，如上面的黑马以及《Python编程：从入门到实践》的配套视频。</p><p>然而，还有一个问题困扰着我：没有手机电脑的情况下，如何进行编程实践？<br />那时候家里只有一台智慧屛设备(如下图所示)，其中有一个网页浏览器可以打开一些小型的网站。<br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414095403963.png" alt="" /></p><p>于是我开始寻找一些在线的编程环境，最终选择了这一款：</p><p><a href="www.onlinegdb.com">OnlineGDB</a><br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414101915980.png" alt="" /></p><p>这个平台支持代码云保存、一键分享等功能，也是我亲测好用且推荐使用的一款在线IDE。通过这个平台，我对Python进行了一定的实践练习，也为我理解编程打下了较为坚实的基础。</p><p>这是几个当年写的小程序，已经上传到我的<a href="https://github.com/Morely152/CULP">GitHub仓库</a>：</p><ul><li>2022年8月：鸡兔同笼问题<br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414110705783.png" alt="" /></li><li>2022年11月：BMI计算器<br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414110916845.png" alt="" /></li><li>2023年1月：当时看<a href="https://www.bilibili.com/video/BV1z7411e7qB/?spm_id_from=333.337.search-card.all.click&amp;vd_source=a1d64ca1ba2129f594954cdd4e9c4db4">B站UP主&quot;毕导THU&quot;的视频</a>，模拟了视频中提到的红包金额分配算法<br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414111010544.png" alt="" /></li></ul><hr /><p>到这里，已经基本学习了Python的列表、字典、函数等简单语法，我开始尝试使用这些语法编写更长更复杂的程序，并将相关文章发布到了<a href="https://blog.csdn.net/mo_li_2892197119?spm=1000.2115.3001.5343">CSDN</a>:</p><ul><li>2023.06.06：<a href="https://blog.csdn.net/mo_li_2892197119/article/details/131060909?spm=1001.2014.3001.5501">&quot;老李算法&quot;随机抽号程序</a></li><li>2023.06.16：<a href="https://blog.csdn.net/mo_li_2892197119/article/details/131248621?spm=1001.2014.3001.5501">&quot;顺手牵羊&quot;Python小游戏</a></li><li>2023.12.31：<a href="https://blog.csdn.net/mo_li_2892197119/article/details/135318063?spm=1001.2014.3001.5501">“卖榴莲”问题的过程模拟</a></li><li>2024.02.13：<a href="https://blog.csdn.net/mo_li_2892197119/article/details/135318063?spm=1001.2014.3001.5501">Python决策小游戏</a></li></ul><p>家里一众长辈都觉得我适合从事医生、会计、公务员等职业，对我选择计算机专业一致表示担忧和否定(出于某些原因，我没有告诉他们我已经进行了初步的入门学习)；即使如此，我还是坚持选择了这个专业和这门行业。我开始探索计算机专业需要具备的知识和授课的内容，在2023年的暑假开始了计算机科学知识的学习：</p><ul><li><a href="https://www.bilibili.com/video/av21376839/?vd_source=a1d64ca1ba2129f594954cdd4e9c4db4">计算机科学速成课 - 哔哩哔哩</a></li><li><a href="https://www.ituring.com.cn/book/1139">《计算机是怎样跑起来的》- 图灵社区</a></li><li><a href="https://www.ituring.com.cn/book/details/1136">《程序是怎样跑起来的》- 图灵社区</a></li></ul><p>通过学习较为底层的知识，我理解了内存是如何存储数据的，CPU是怎样执行命令和处理数据的等一系列问题，不仅让我有了更专业正确的编程思维，也让我在进入大学之后学习《计算机导论》这门课程更更加轻松。</p><hr /><p>高考结束后，我在填报志愿时选择了计算机科学与技术这一专业进行学习，并且很幸运地被分数线较高的一所大学录取，开启了专业学习程序设计的生涯。</p><p>高考结束的暑假，在我哥的指导和AI的帮助下，开发了一款Windows系统进程守护工具(<a href="https://github.com/Morely152/Windows_progress_guard">点击访问GitHub仓库</a>)<br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414114727509.png" alt="“进程守护工具”界面效果" /></p><hr /><p>感谢那个一往无前的自己，刚进入大学时，由于大部分初级知识(C语言、计导等)都提前学习过，我没有在学业上感到很大的压力，顺利结束了大一上学期的学习。</p><p>在大一上学期的期末，我开始了第二个软件(<a href="https://docs.qq.com/aio/DTXhHcmF4cFdiaWVs?p=5PkhMQNLMYURZMuKOtTPNI">《番茄魔方》时间管理工具</a>)的设计，并且在寒假期间完成了测试版的制作和发布，软件更新持续至今，项目代码已经突破5k行。<br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414114516350.png" alt="《番茄魔方》界面效果" /></p><hr /><p>回望过去，我与编程的相遇源于Python，也正是写下的第一行<code>print(&quot;hello world&quot;)</code>，将我带入了一个兼具创意与严谨的崭新世界。<strong>如果将人生看作最终指向<code>return 0</code>的程序，我的人生就已经写下了长长短短的19行。从最初的<code>Hello world</code>到现在的<code>Hello coder</code>，在一条初心不换的道路上，做不负星光的赶路人;矢志前行，终见曙光。</strong></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JSON保存设置项异常复原问题</title>
    <link href="/2025/02/10/JSON%E4%BF%9D%E5%AD%98%E8%AE%BE%E7%BD%AE%E9%A1%B9%E5%BC%82%E5%B8%B8%E5%A4%8D%E5%8E%9F%E9%97%AE%E9%A2%98/"/>
    <url>/2025/02/10/JSON%E4%BF%9D%E5%AD%98%E8%AE%BE%E7%BD%AE%E9%A1%B9%E5%BC%82%E5%B8%B8%E5%A4%8D%E5%8E%9F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="一-问题概述"><a class="markdownIt-Anchor" href="#一-问题概述"></a> 一、问题概述：</h1><p>在WPF项目中新建了文件Settings.json，用于保存开机自启动的设置记录，并将其属性设置为“内容–始终复制”以将JSON文件添加到项目文件夹中。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;AutoStartEnabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>定义了下面的方法来载入设置的内容：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadSettings</span>()</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (File.Exists(SettingsFilePath))<br>    &#123;<br>        <span class="hljs-built_in">string</span> json = File.ReadAllText(SettingsFilePath);<br>        <span class="hljs-built_in">dynamic</span> settings = JsonConvert.DeserializeObject(json);<br>        AutoStartEnabled = settings.AutoStartEnabled;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">// 如果文件不存在，初始化默认设置</span><br>        AutoStartEnabled = <span class="hljs-literal">false</span>;<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>运行程序，发现每次启动时，通过UI反馈的记录均为False，即使手动修改为True也会在运行的一瞬间变成False。</li></ul><hr /><h1 id="二-寻找原因"><a class="markdownIt-Anchor" href="#二-寻找原因"></a> 二、寻找原因：</h1><ul><li>手动修改为True扔不起效，可排除保存记录异常的情况。</li><li>怀疑是UI控件初始属性为False导致，查找之后未发现异常。</li><li>通过断点追踪，发现在程序读取JSON文件内容之前就已经变成了false。</li><li>又怀疑是程序在初始化时触发了按钮的取消选中事件，但未触发断点，可以排除。</li><li>这时突然想起“内容–始终复制”的属性，问题原因终于找到了。</li></ul><hr /><h1 id="三-问题复现"><a class="markdownIt-Anchor" href="#三-问题复现"></a> 三、问题复现</h1><ul><li>选中按钮后，修改JSON中&quot;AutoStartEnabled&quot;的值为True。</li><li>再次启动程序时，“始终复制”的属性使得开发环境中的Settings.json复制到编译后的程序所在的文件夹，将修改了的Json文件覆盖，造成属性异常变成False的假象。</li></ul><hr /><h1 id="四-解决问题"><a class="markdownIt-Anchor" href="#四-解决问题"></a> 四、解决问题</h1><ul><li>直接从源头解决问题，将开发环境中的json文件删除，杜绝文件被覆盖的可能性。</li><li>经过测试，现有方法支持在未找到json文件时创建文件，因此不需添加新建Json文件的程序。</li></ul><hr /><h1 id="五-回顾反思"><a class="markdownIt-Anchor" href="#五-回顾反思"></a> 五、回顾反思</h1><ul><li>通过测试发现，直接从文件夹启动编译后的程序不会出现覆盖的问题，证实了前面的分析。</li><li>能被这种小问题困扰如此之久，反映出自己对开发工具的不熟悉和思维深度的不足，也提示自己要通过积极寻找问题来积累自己的经验。</li></ul>]]></content>
    
    
    <categories>
      
      <category>踩坑记录</category>
      
      <category>WPF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Visual Studio</tag>
      
      <tag>WPF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OBS Studio录屏声音异常发闷问题</title>
    <link href="/2025/02/05/OBS%20Studio%E5%BD%95%E5%B1%8F%E5%A3%B0%E9%9F%B3%E5%BC%82%E5%B8%B8%E5%8F%91%E9%97%B7%E9%97%AE%E9%A2%98/"/>
    <url>/2025/02/05/OBS%20Studio%E5%BD%95%E5%B1%8F%E5%A3%B0%E9%9F%B3%E5%BC%82%E5%B8%B8%E5%8F%91%E9%97%B7%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<hr /><p>在使用OBS进行录屏时，发现声音失真发闷现象很严重。<br />上网查询，得到以下原因及解决方案，建议逐个排查：</p><h2 id="1输入设备选择了蓝牙耳机耳机使用麦克风录音导致音质变差"><a class="markdownIt-Anchor" href="#1输入设备选择了蓝牙耳机耳机使用麦克风录音导致音质变差"></a> 1.输入设备选择了蓝牙耳机，耳机使用麦克风录音导致音质变差</h2><p>原贴链接：<a href="https://www.zhihu.com/question/340185115">打开 OBS Studio 后播放音乐音质差如何解决？-知乎</a><br />解决方案：将输入设备全部禁用，或者留一个电脑自带的麦克风阵列</p><p><img src="OBS-Studio%E5%BD%95%E5%B1%8F%E5%A3%B0%E9%9F%B3%E5%8F%91%E9%97%B7%E9%97%AE%E9%A2%98-20250205223911572.png" alt="" /></p><hr /><h2 id="2-系统扬声器开启了音频增益"><a class="markdownIt-Anchor" href="#2-系统扬声器开启了音频增益"></a> 2. 系统扬声器开启了音频增益</h2><p>原贴链接：<a href="https://www.bilibili.com/opus/827471891323158578">[首发] OBS音频很闷得慌的解决办法 -哔哩哔哩</a><br />解决方案：关闭音频增益</p><p><img src="OBS-Studio%E5%BD%95%E5%B1%8F%E5%A3%B0%E9%9F%B3%E5%8F%91%E9%97%B7%E9%97%AE%E9%A2%98-20250205224201021.png" alt="" /></p><hr /><h2 id="3开启了杜比音效"><a class="markdownIt-Anchor" href="#3开启了杜比音效"></a> 3.开启了杜比音效</h2><p>原帖链接:<a href="https://blog.lifewith.fun/zh-cn/">为什么OBS录制视频的声音发闷 -MystCastle的博客</a><br />解决方案：关闭杜比音效<br /><img src="OBS-Studio%E5%BD%95%E5%B1%8F%E5%A3%B0%E9%9F%B3%E5%8F%91%E9%97%B7%E9%97%AE%E9%A2%98-20250205224514227.png" alt="" /></p><hr /><h2 id="4默认输入设备和通信设备不正确"><a class="markdownIt-Anchor" href="#4默认输入设备和通信设备不正确"></a> 4.默认输入设备和通信设备不正确</h2><p>看评论区有人说要把默认的输入设备和通信设备都换成麦克风阵列，不能用蓝牙耳机<br />解决方案：<br /><img src="OBS-Studio%E5%BD%95%E5%B1%8F%E5%A3%B0%E9%9F%B3%E5%8F%91%E9%97%B7%E9%97%AE%E9%A2%98-20250205224858254.png" alt="" /><br /><img src="OBS-Studio%E5%BD%95%E5%B1%8F%E5%A3%B0%E9%9F%B3%E5%8F%91%E9%97%B7%E9%97%AE%E9%A2%98-20250205225019769.png" alt="" /><br />在我的电脑上，进行到这一步时，声音基本与关闭OBS时一致，失真发闷问题得到解决。</p>]]></content>
    
    
    <categories>
      
      <category>踩坑记录</category>
      
      <category>OBS Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OBS Studio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>音频无法播放：局部变量与类字段的混淆和滥用问题</title>
    <link href="/2025/02/05/%E9%9F%B3%E9%A2%91%E6%97%A0%E6%B3%95%E6%92%AD%E6%94%BE%EF%BC%9A%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E7%B1%BB%E5%AD%97%E6%AE%B5%E7%9A%84%E6%B7%B7%E6%B7%86%E5%92%8C%E6%BB%A5%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <url>/2025/02/05/%E9%9F%B3%E9%A2%91%E6%97%A0%E6%B3%95%E6%92%AD%E6%94%BE%EF%BC%9A%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E7%B1%BB%E5%AD%97%E6%AE%B5%E7%9A%84%E6%B7%B7%E6%B7%86%E5%92%8C%E6%BB%A5%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="一-问题概述"><a class="markdownIt-Anchor" href="#一-问题概述"></a> 一、问题概述</h1><p>在 <code>WPF</code> 中，试图通过 <code> NAudio</code> 库实现多音轨音频播放时，程序运行之后不能听到声音。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> NAudio.Wave;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><br><span class="hljs-keyword">namespace</span> *** <span class="hljs-comment">// 省略</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MainWindow</span> : <span class="hljs-title">Window</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> AudioManager audioManager = <span class="hljs-keyword">new</span> AudioManager();<br>        <span class="hljs-comment">// 其他部分省略</span><br><br>       <span class="hljs-comment">// 软件启动时，主页窗口初始化</span><br>       <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WindowLoaded</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, RoutedEventArgs e</span>)</span><br>       &#123;<br>           <span class="hljs-comment">// 加载白噪音资源</span><br>           <span class="hljs-keyword">var</span> audioManager = <span class="hljs-keyword">new</span> AudioManager();<br>           audioManager.AddPlayer(<span class="hljs-string">&quot;***&quot;</span>);<br>           audioManager.AddPlayer(<span class="hljs-string">&quot;***&quot;</span>);<br>       &#125;<br><br><span class="hljs-comment">// 音频资源管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AudioManager</span><br>&#123;<br><span class="hljs-keyword">private</span> List&lt;AudioPlayer&gt; _players = <span class="hljs-keyword">new</span> List&lt;AudioPlayer&gt;();<br><span class="hljs-comment">// 添加音源</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddPlayer</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> filePath</span>)</span><br>&#123;<br><span class="hljs-keyword">try</span><br>&#123;<br><span class="hljs-keyword">var</span> player = <span class="hljs-keyword">new</span> AudioPlayer(filePath);<br>_players.Add(player);<br>Debug.WriteLine(<span class="hljs-string">$&quot;已添加播放器，当前总数：<span class="hljs-subst">&#123;_players.Count&#125;</span>&quot;</span>);<br>Debug.WriteLine(<span class="hljs-string">$&quot;索引：<span class="hljs-subst">&#123;_players.IndexOf(player)&#125;</span>&quot;</span>);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex)<br>&#123;<br>Debug.WriteLine(<span class="hljs-string">$&quot;添加播放器失败: <span class="hljs-subst">&#123;ex.Message&#125;</span>&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 整体播放</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PlayAll</span>()</span><br>&#123;<br>Debug.WriteLine(<span class="hljs-string">$&quot;PlayAll 调用时列表长度: <span class="hljs-subst">&#123;_players.Count&#125;</span>&quot;</span>); <span class="hljs-comment">// 新增日志</span><br><span class="hljs-built_in">int</span> Cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> player <span class="hljs-keyword">in</span> _players)<br>&#123;<br>player.Play();<br>Cnt++;<br>&#125;<br>Debug.WriteLine(<span class="hljs-string">$&quot;已播放所有音源，总数：<span class="hljs-subst">&#123;Cnt&#125;</span>&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AudioPlayer</span><br>&#123;<br><span class="hljs-keyword">private</span> WaveOutEvent _waveOut;<br><span class="hljs-keyword">private</span> AudioFileReader _audioFile;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AudioPlayer</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> filePath</span>)</span><br>&#123;<br>_audioFile = <span class="hljs-keyword">new</span> AudioFileReader(filePath);<br>_waveOut = <span class="hljs-keyword">new</span> WaveOutEvent();<br>_waveOut.Init(_audioFile);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Play</span>()</span> =&gt; _waveOut.Play();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Pause</span>()</span> =&gt; _waveOut.Pause();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Stop</span>()</span> =&gt; _waveOut.Stop();<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Volume<br>&#123;<br><span class="hljs-keyword">get</span> =&gt; _audioFile.Volume;<br><span class="hljs-keyword">set</span> =&gt; _audioFile.Volume = <span class="hljs-keyword">value</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 <code>Debug.WriteLine</code> 方法输出的调试信息：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">已添加播放器，当前总数：1</span><br><span class="hljs-attribute">索引：0</span><br><span class="hljs-attribute">已添加播放器，当前总数：2</span><br><span class="hljs-attribute">索引：1</span><br><span class="hljs-attribute">PlayAll 调用时列表长度</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br>已播放所有音源，总数：0<br></code></pre></td></tr></table></figure><p>发现在添加了两个文件的情况下，调用<code>PlayAll</code>时列表长度却是<code>0</code>而不是预期的<code>2</code>。此前，在使用如下方法播放单个音频时：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AudioManager</span><br>&#123;<br><span class="hljs-comment">//其他方法同上</span><br><span class="hljs-comment">// 独立播放</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Play</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index</span>)</span><br>&#123;<br>_players[index].Play();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后通过<code>audioManager.Play(0)</code>播放列表的第一个音频文件时，编译器报错：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">System.ArgumentOutOfRangeException:“<span class="hljs-built_in">Index</span> was <span class="hljs-keyword">out</span> of <span class="hljs-built_in">range</span>. Must be non-negative and less than the <span class="hljs-built_in">size</span> of the collection. ”<br></code></pre></td></tr></table></figure><p>即索引超出列表范围，一度让我百思不得其解……</p><hr /><h1 id="二-寻找原因"><a class="markdownIt-Anchor" href="#二-寻找原因"></a> 二、寻找原因</h1><p>询问AI后，提示我问题很可能出在 <strong><code>_players</code> 列表未被正确填充</strong>，导致 <code>PlayAll()</code> 循环时列表为空(这也与我的预期相符)，并给出如下检查思路：</p><ol><li><strong>确认 <code>AddPlayer</code> 方法是否被正确调用</strong></li><li><strong>检查 <code>AudioPlayer</code> 构造函数是否失败</strong></li><li><strong>确认 <code>_players</code> 列表的作用域和生命周期</strong></li><li><mark><strong>检查<code>AudioManager</code>实例是否唯一</strong></mark></li><li><strong>验证文件路径和权限</strong></li></ol><ul><li>最开始我考虑了文件加载失败的情况，但是在尝试了使用绝对路径以及将属性修改为资源或者内容之后，没有报告找不到文件的错误，似乎可以排除这种情况。</li><li>然后我想到是不是有可能多次初始化了<code>_players</code>列表，导致其意外清空？<ul><li>查找代码中出现<code>_players</code>的语句，似乎只有一次初始化，可以排除这种情况。</li><li><img src="%E6%9C%AA%E5%91%BD%E5%90%8D-20250205124929280.png" alt="" /></li></ul></li><li>最后我突然想到，在页面初始化时似乎将<code>AudioManager</code>类实例化了一次，但是在后面的代码中好像也看到了类似的<code>new</code>语句，是不是多次实例化了<code>AudioManager</code>呢？<ul><li>查找代码中的<code>new AudioManager()</code>语句，果然查到了两次：</li><li><img src="%E6%9C%AA%E5%91%BD%E5%90%8D-20250205125110116.png" alt="" /></li></ul></li></ul><blockquote><p>[!INFO] 根据上述分析，问题出现在多次实例化<code>AudioManager</code>类:</p><ol><li>在<code>MainWindow</code>类中，实例化了一次，在这里是一个类字段，属于 <code>MainWindow</code> 类的成员变量，生命周期与 <code>MainWindow</code> 实例相同。</li><li>在<code>WindowLoaded</code>事件中，又实例化了一次。在这里是一个局部变量 <code>audioManager</code>，它的作用域仅限于该方法内部。当方法执行完毕后，局部变量会被销毁。</li></ol></blockquote><blockquote><p>诊断结果：<strong>对 <code>audioManager</code> 的添加和读取操作不是同一个对象</strong>。</p></blockquote><ul><li>具体解释：<ul><li>在 <code>WindowLoaded</code> 方法中调用 <code>AddPlayer</code> 时，操作的是局部变量 <code>audioManager</code>。</li><li>尝试在其他地方（如按钮点击事件）调用 <code>PlayAll</code> 时，操作的是类字段的 <code>audioManager</code>。</li><li>由于局部变量和类字段是两个不同的对象，局部变量中添加的音源不会影响类字段的 <code>audioManager</code>，因此 <code>PlayAll</code> 时列表为空，无法播放。</li></ul></li></ul><hr /><h1 id="三-解决问题"><a class="markdownIt-Anchor" href="#三-解决问题"></a> 三、解决问题</h1><p>删去<code>WindowLoaded</code>中的局部变量，直接使用生命周期更长的类字段，程序运行之后成功输出了音频。</p><hr /><h1 id="四-反思总结"><a class="markdownIt-Anchor" href="#四-反思总结"></a> 四、反思总结</h1><p><strong>关键陷阱：局部变量覆盖类字段</strong></p><blockquote><p>在 C# 中，如果方法内部声明了一个与类字段同名的局部变量，编译器会优先使用局部变量，导致类字段被“隐藏”。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">private</span> AudioManager audioManager = <span class="hljs-keyword">new</span> AudioManager();<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SomeMethod</span>()</span><br>&#123;<br>    <span class="hljs-keyword">var</span> audioManager = <span class="hljs-keyword">new</span> AudioManager(); <span class="hljs-comment">// 这里实际是一个局部变量</span><br>    audioManager.AddPlayer(<span class="hljs-string">&quot;xxx&quot;</span>);         <span class="hljs-comment">// 操作的是局部变量，而非类字段</span><br>&#125;<br></code></pre></td></tr></table></figure><p>直接使用类字段，可以确保所有操作都作用于同一个 <code>AudioManager</code> 实例，从而解决播放失败的问题。</p><blockquote><p>[!NOTE]- 局部变量＆类字段：如何进行取舍？</p><ul><li>![[音频无法播放：局部变量与类字段的混淆和滥用问题-20250205132505196.png|622]]</li><li>使用类字段：<ul><li>数据需要长期存在：变量需要在整个类的生命周期内保持状态，或在多个方法间共享。</li><li>资源需要全局访问：某些对象（如数据库连接、网络客户端）需要被多个方法重复使用。</li><li>需要维护对象状态：对象的状态（如播放进度、配置参数）需要在多次调用中持续更新。</li></ul></li><li>使用局部变量：<ul><li>临时计算或中间结果：变量仅在一次方法调用中临时使用，无需长期保存。</li><li>避免副作用：希望方法的行为纯粹，不依赖或修改类的状态。</li><li>限制作用域以提高安全性：防止变量被意外修改（如敏感数据）。</li></ul></li></ul></blockquote><p>反思：出现这样的问题，主要在于对面向对象编程的认识和经验不足，对面向过程变成有较大的惯性思维，习惯将初始化操作写在页面加载的事件中。</p>]]></content>
    
    
    <categories>
      
      <category>踩坑记录</category>
      
      <category>WPF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>版本控制工具Git</title>
    <link href="/2024/09/02/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7Git/"/>
    <url>/2024/09/02/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7Git/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本篇笔记摘自<a href="https://www.bilibili.com/video/BV1HM411377j/?spm_id_from=333.1387.homepage.video_card.click">【GeekHour】一小时Git教程_哔哩哔哩</a></p></blockquote><hr /><h1 id="一-概述"><a class="markdownIt-Anchor" href="#一-概述"></a> 一、概述</h1><h2 id="1git是一个免费开源的分布式版本控制系统使用仓库一种数据库记录文件变化"><a class="markdownIt-Anchor" href="#1git是一个免费开源的分布式版本控制系统使用仓库一种数据库记录文件变化"></a> 1.Git是一个免费开源的分布式版本控制系统，使用仓库(一种数据库)记录文件变化</h2><p><img src="Pasted-image-20240618140433.png" alt="" /></p><h2 id="2版本控制系统跟踪文件变化分为集中式和分布式两种"><a class="markdownIt-Anchor" href="#2版本控制系统跟踪文件变化分为集中式和分布式两种"></a> 2.版本控制系统：跟踪文件变化，分为集中式和分布式两种</h2><h3 id="1集中式如svn"><a class="markdownIt-Anchor" href="#1集中式如svn"></a> ①集中式(如SVN)</h3><p><img src="Pasted-image-20240618140732.png" alt="" /></p><ul><li>文件保存在中央服务器上，修改时先下载最新版本再上传</li><li>优点：使用简单</li><li>缺点：中央服务器或网络故障时，客户无法工作</li></ul><h3 id="2分布式如git"><a class="markdownIt-Anchor" href="#2分布式如git"></a> ②分布式(如Git)</h3><p><img src="Pasted-image-20240618141111.png" alt="" /></p><ul><li>版本库在每个用户上，进行本地修改，分享式再同步仓库</li><li>优点：免费开源，速度快，功能强大，支持离线工作，分支管理强大</li></ul><hr /><h1 id="二-git的安装与配置"><a class="markdownIt-Anchor" href="#二-git的安装与配置"></a> 二、Git的安装与配置</h1><h2 id="1网址git官网下载地址"><a class="markdownIt-Anchor" href="#1网址git官网下载地址"></a> 1.网址：<a href="https://git-scm.com/downloads">Git官网下载地址</a></h2><h2 id="2安装后检查版本"><a class="markdownIt-Anchor" href="#2安装后检查版本"></a> 2.安装后检查版本</h2><blockquote><p>git -v</p></blockquote><ul><li>回显<code>git version 2.45.2.windows.1</code></li></ul><h2 id="3打开终端"><a class="markdownIt-Anchor" href="#3打开终端"></a> 3.打开终端</h2><p>在任意文件夹中右键鼠标，选择菜单栏中的<code>Open Git Bash Here</code>，即可打开Git的控制台，默认路径为当前文件夹。</p><h2 id="4使用git"><a class="markdownIt-Anchor" href="#4使用git"></a> 4.使用Git</h2><p>常见使用方法：</p><ul><li>命令行：基本常用的方式，在终端中输入命令控制</li><li>图形化界面：即GUI</li><li>IDE插件/拓展：常用<br />常用命令：<br /><img src="Git-Cheet-Sheet-ByGeekHour.png" alt="" /></li></ul><h2 id="5配置git"><a class="markdownIt-Anchor" href="#5配置git"></a> 5.配置Git</h2><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">命令</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">配置用户名</td><td style="text-align:center"><code>git config --global user.name 用户名</code></td><td style="text-align:center">用户名是多个单词时用引号括起来</td></tr><tr><td style="text-align:center">配置邮箱</td><td style="text-align:center"><code>git config --global user.email 邮箱</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">保存配置</td><td style="text-align:center"><code>git config --global credential.helper store</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">查看配置</td><td style="text-align:center"><code>git config --global --list</code></td><td style="text-align:center"></td></tr></tbody></table><ul><li><code>--local</code>：本地配置，只对本地仓库有效</li><li><code>--global</code>：全局配置，对所有仓库有效（常用）</li><li><code>--system</code>：系统配置，对所有用户有效（少用）</li></ul><hr /><h1 id="三-新建版本库仓库"><a class="markdownIt-Anchor" href="#三-新建版本库仓库"></a> 三、新建版本库（仓库）</h1><h2 id="1版本库"><a class="markdownIt-Anchor" href="#1版本库"></a> 1.版本库</h2><ul><li>又叫仓库(Repository,Repo)，相当于一个由Git管理的文件目录，</li><li>Git能跟踪和管理其中每个文件的修改和增删</li></ul><h2 id="2创建仓库"><a class="markdownIt-Anchor" href="#2创建仓库"></a> 2.创建仓库</h2><h3 id="方式一本地创建git-init"><a class="markdownIt-Anchor" href="#方式一本地创建git-init"></a> 方式一：本地创建(Git init)</h3><p><strong>创建</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> 仓库名<br><span class="hljs-built_in">cd</span> 仓库名<br>git init<br></code></pre></td></tr></table></figure><p><strong>检验仓库是否创建</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -a <br></code></pre></td></tr></table></figure><p>回显<code>./  ../  .git/</code>表示仓库已创建</p><h3 id="方式二从远程服务器克隆git-clone"><a class="markdownIt-Anchor" href="#方式二从远程服务器克隆git-clone"></a> 方式二：从远程服务器克隆(Git clone)</h3><ul><li>使用**<code>git clone</code>命令**从github或者gitee上克隆已经存在的仓库<ul><li><code>git clone 仓库地址</code></li></ul></li><li>回显<code>Cloning into 'remote-repo'...</code></li></ul><hr /><h1 id="四-工作区域和文件状态"><a class="markdownIt-Anchor" href="#四-工作区域和文件状态"></a> 四、工作区域和文件状态</h1><h2 id="1工作区域"><a class="markdownIt-Anchor" href="#1工作区域"></a> 1.工作区域</h2><p><img src="Pasted-image-20240630144908.png" alt="" /></p><ul><li>工作区(working directory)、工作目录<ul><li>如文件资源管理器中的文件夹</li></ul></li><li>暂存区(staging area)、索引(index)<ul><li>用于保存即将提交到仓库的修改内容</li></ul></li><li>本地仓库(local repository)<ul><li>用命令创建的仓库</li><li>包含了完整的项目历史和元数据</li></ul></li><li>修改工作区文件–添加文件到暂存区–提交到本地仓库<ul><li>整个过程中可以用git命令来查看、比较或者撤销修改</li><li>类似于工厂生产–货车转运–仓库储存的过程</li></ul></li></ul><h2 id="2文件状态"><a class="markdownIt-Anchor" href="#2文件状态"></a> 2.文件状态</h2><p><img src="Pasted-image-20240630145735.png" alt="" /></p><ul><li>未跟踪(untracked):未被git管理的文件</li><li>未修改(unmodified):已被管理但未变化</li><li>已修改(modified):已经修改但未暂存</li><li>已暂存(staged):已修改且已暂存</li></ul><hr /><h1 id="五-添加和提交文件"><a class="markdownIt-Anchor" href="#五-添加和提交文件"></a> 五、添加和提交文件</h1><h2 id="1添加文件"><a class="markdownIt-Anchor" href="#1添加文件"></a> 1.添加文件</h2><ul><li><p>使用vs code添加：</p><ul><li>在“源代码管理”中打开仓库文件夹</li><li>直接在文件夹里新建文件</li></ul></li><li><p>使用Linux命令：</p><ul><li><img src="Pasted-image-20240630205042.png" alt="" /></li></ul></li><li><p>使用cat 文件名的命令浏览文件：</p><ul><li><img src="Pasted-image-20240630205314.png" alt="" /></li></ul><h2 id="2git-status命令查看仓库状态"><a class="markdownIt-Anchor" href="#2git-status命令查看仓库状态"></a> 2.git status命令：查看仓库状态</h2></li></ul><blockquote><p>git status</p></blockquote><ul><li>回显：<ul><li>（未进行任何操作的空仓库）<br /><img src="Pasted-image-20240630150449.png" alt="" /></li><li>（添加文件后的仓库）<br /><img src="Pasted-image-20240630205501.png" alt="" /><ul><li>出现了未跟踪的文件file1.txt</li></ul></li></ul></li></ul><h2 id="3git-add命令将文件添加到暂存区"><a class="markdownIt-Anchor" href="#3git-add命令将文件添加到暂存区"></a> 3.git add命令：将文件添加到暂存区</h2><p><img src="Pasted-image-20240630205747.png" alt="" /></p><ul><li>目标文件从红色变成绿色，表明文件已处于已暂存状态</li></ul><table><thead><tr><th style="text-align:left">相关命令</th><th style="text-align:left">作用描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>git rm --cached 已暂存文件</code></td><td style="text-align:left">取消暂存指定的文件</td></tr><tr><td style="text-align:left"><code>git add 文件名</code></td><td style="text-align:left">添加指定名称的文件</td></tr><tr><td style="text-align:left"><code>git add *.文件格式</code></td><td style="text-align:left">添加文件夹中特定文件格式的所有文件</td></tr><tr><td style="text-align:left"><code>git add .</code></td><td style="text-align:left">添加文件夹中所有的文件</td></tr></tbody></table><h2 id="4git-commit命令将暂存区的文件提交到仓库"><a class="markdownIt-Anchor" href="#4git-commit命令将暂存区的文件提交到仓库"></a> 4.git commit命令：将暂存区的文件提交到仓库</h2><p><img src="Pasted-image-20240703151346.png" alt="" /></p><ul><li>使用<code>git commit -m &quot;附加信息&quot;</code>的命令来将暂存区的文件提交到仓库</li></ul><h2 id="5git-log命令查看提交记录"><a class="markdownIt-Anchor" href="#5git-log命令查看提交记录"></a> 5.git log命令：查看提交记录</h2><p><img src="Pasted-image-20240703152923.png" alt="" /></p><hr /><h1 id="六-版本回退"><a class="markdownIt-Anchor" href="#六-版本回退"></a> 六、版本回退</h1><h2 id="1git-reset的三种形式"><a class="markdownIt-Anchor" href="#1git-reset的三种形式"></a> 1.git reset的三种形式</h2><table><thead><tr><th style="text-align:center">形式</th><th style="text-align:center">回退版本</th><th style="text-align:center">保留工作区</th><th style="text-align:center">保留暂存区</th><th>场景or区别</th></tr></thead><tbody><tr><td style="text-align:center"><code>git reset --soft</code></td><td style="text-align:center">〇</td><td style="text-align:center">〇</td><td style="text-align:center">〇</td><td>无需添加到暂存区</td></tr><tr><td style="text-align:center"><code>git reset --hard</code></td><td style="text-align:center">〇</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td>放弃修改内容，谨慎使用！</td></tr><tr><td style="text-align:center"><code>git reset --mixed</code></td><td style="text-align:center">〇</td><td style="text-align:center">〇</td><td style="text-align:center">×</td><td>需要git add再提交</td></tr></tbody></table><ul><li><code>上述命令 + 历史版本ID</code>：回退到指定版本</li><li><code>上述命令 + head^</code>：回退到上个版本</li><li>如果不慎误操作，可以使用<code>git reflog</code>查看以往版本的版本号，然后再git reset即可恢复</li></ul><hr /><h1 id="七-查看文件在不同区域-版本之间的差异"><a class="markdownIt-Anchor" href="#七-查看文件在不同区域-版本之间的差异"></a> 七、查看文件在不同区域、版本之间的差异</h1><h2 id="1git-diff命令"><a class="markdownIt-Anchor" href="#1git-diff命令"></a> 1.git diff命令：</h2><ul><li>比较文件在工作区与暂存区之间的差异<br /><img src="Pasted-image-20240703224932.png" alt="" /><br />（输入;q退出vim编辑器）</li><li>输出空行表示无差异</li><li>其他diff命令：(命令后加文件名可指定比较某文件的差异)<ul><li><code>git diff HEAD</code>：比较文件在工作区与版本库之间的差异</li><li><code>git diff --cache</code>：比较文件在暂存区与版本库之间的差异</li><li><code>git diff 版本ID_1 版本ID_2</code>：比较两个指定版本之间的差异</li><li><code>git diff HEAD~n HEAD</code>：比较之前第n个版本与当前版本的差异，n可省略</li><li><code>git diff 分支名_1 分支名_2</code>：比较两个指定分支之间的差异</li></ul></li></ul><hr /><h1 id="八-删除文件"><a class="markdownIt-Anchor" href="#八-删除文件"></a> 八、删除文件</h1><h2 id="1直接将文件移动到回收站然后添加到暂存区并提交"><a class="markdownIt-Anchor" href="#1直接将文件移动到回收站然后添加到暂存区并提交"></a> 1.直接将文件移动到回收站，然后添加到暂存区并提交</h2><p><img src="Pasted-image-20240708231557.png" alt="" /></p><h2 id="2git-rm-命令同时删除工作区和暂存区的文件"><a class="markdownIt-Anchor" href="#2git-rm-命令同时删除工作区和暂存区的文件"></a> 2.git rm 命令：同时删除工作区和暂存区的文件</h2><p><img src="Pasted-image-20240708233026.png" alt="" /></p><ul><li>命令<code>git rm --cached 文件名</code>可以只删除暂存区的文件，保留工作区的文件</li></ul><hr /><h1 id="九-gitignore文件"><a class="markdownIt-Anchor" href="#九-gitignore文件"></a> 九、gitignore文件</h1><h2 id="1需要忽略的文件"><a class="markdownIt-Anchor" href="#1需要忽略的文件"></a> 1.需要忽略的文件</h2><ul><li>系统或软件自动生成的文件</li><li>编译产生的中间文件和结果文件</li><li>运行时生成的日志文件、缓存文件和临时文件</li><li>涉及身份、密码、口令、秘钥等敏感信息文件</li></ul><h2 id="2忽略某个或某类文件"><a class="markdownIt-Anchor" href="#2忽略某个或某类文件"></a> 2.忽略某个或某类文件</h2><ul><li>例：有两个文件log1.log和log2.log，忽略log1.log<ul><li>添加文件.gitignore</li><li>在文件.gitignore中写入“log1.log”</li><li><img src="Pasted-image-20240708234249.png" alt="" /><ul><li>文件log1.log虽然存在于工作区中，但被忽视了，没有添加到暂存区，也就不会被提交到仓库</li></ul></li><li>如果想忽略所有的.log文件，在文件.gitignore中写入*.log即可</li></ul></li><li>注意：如果文件已被添加到版本库，那么忽视无效，需要先删除版本库中的文件</li></ul><h2 id="3忽略文件夹"><a class="markdownIt-Anchor" href="#3忽略文件夹"></a> 3.忽略文件夹</h2><p>在文件.gitignore中写入文件夹名/即可</p><ul><li>例：忽略文件夹temp：<ul><li><img src="Pasted-image-20240709124638.png" alt="" /></li></ul></li><li>忽略后要记得提交</li></ul><h2 id="4匹配规则"><a class="markdownIt-Anchor" href="#4匹配规则"></a> 4.匹配规则</h2><ul><li>对于.gitignore中的规则，从上往下进行忽略</li><li>空行或以#开头的行会被git忽略<ul><li>一般用空行分隔，用#注释</li></ul></li><li>使用标准的Blob模式匹配，例如：<ul><li><ul><li>匹配任意个字符</li></ul></li><li>? 匹配单个字符</li><li>[] 匹配列表中的单个字符<ul><li>\ [abc]表示a或者b或者c</li><li>\ [0-9]表示任意一位数字</li><li>\ [a-z]表示任意一位小写字母</li></ul></li></ul></li><li>** 表示任意匹配的中间目录</li><li>！ 表示取反，例如：<br /><img src="Pasted-image-20240709132037.png" alt="" /></li></ul><h2 id="5直接使用已有的gitignore模版"><a class="markdownIt-Anchor" href="#5直接使用已有的gitignore模版"></a> 5.直接使用已有的.gitignore模版</h2><blockquote><p>[!info] 在github中获取.gitignore模版<br /><a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p></blockquote><hr /><h1 id="十-github上的远程仓库"><a class="markdownIt-Anchor" href="#十-github上的远程仓库"></a> 十、Github上的远程仓库</h1><h2 id="1ssh配置"><a class="markdownIt-Anchor" href="#1ssh配置"></a> 1.SSH配置</h2><ul><li>SSH方式的优缺点：<ul><li>规避在push本地代码时验证用户名和密码(HTTPS方式需要)</li><li>但是需要在github上添加SSH公钥配置</li></ul></li><li>配置SSH公钥<ul><li>执行命令<code>cd ~</code>回到根目录</li><li>执行命令<code>cd .ssh</code>进入.ssh目录<ul><li>若报错，需提前在用户文件夹下创建.ssh文件夹</li></ul></li><li>执行命令<code>ssh-keygen -t rsa -b 4096</code>指定生成密钥的协议和大小</li><li>输入秘钥文件名称，之前未配置过可以直接回车，默认生成id_rsa文件<ul><li>如果已配置，创建新的文件名(如tset)</li></ul></li><li>输入密码</li><li>查看本地目录，生成了test和test.pub两个文件<ul><li>文件test是私钥文件，不能给任何人</li><li>文件test.pub是公钥文件，可以上传到github</li></ul></li><li>复制test.pub的内容</li><li>在github中点击 头像 -&gt; settings -&gt; SSH and GPG keys -&gt; New SSH key -&gt; 输入标题 -&gt;粘贴test.pub的内容 -&gt; Add SSH key,成功在github上添加公钥<ul><li>如果在创建SSH时指定了新的文件名，需要创建一个config文件并将下面五行内容添加到文件中，输入命令<code>tail -5 config</code>，意思是访问github时指定使用SSH下的test密钥<img src="Pasted-image-20240710070230.png" alt="" /></li></ul></li><li>然后使用cd命令回到本地仓库，执行命令<code>git clone SSH地址</code>，输入创建密钥时设置的密码</li><li>创建成功，可以使用<code>cd 远程仓库名称</code>的命令进入远程仓库目录</li></ul></li></ul><h2 id="2git-push与git-pull"><a class="markdownIt-Anchor" href="#2git-push与git-pull"></a> 2.git push与git pull</h2><ul><li><code>git push</code>:将本地仓库的内容推送到远程仓库<ul><li>推送前记得将文件提交到本地仓库</li></ul></li><li><code>git pull</code>:默认拉取远程仓库别名为origin的main分支，把远程仓库的指定分支拉取到本地<ul><li><code>git pull</code>命令会进行合并操作，如果本地仓库的修改和远程仓库中的修改有冲突会导致合并失败</li></ul></li></ul><h2 id="3关联本地仓库与远程仓库"><a class="markdownIt-Anchor" href="#3关联本地仓库与远程仓库"></a> 3.关联本地仓库与远程仓库</h2><ul><li>添加远程仓库<ul><li>复制github空仓库下的该命令并粘贴到git中执行<img src="Pasted-image-20240710235337.png" alt="" /></li><li>其中origin是默认的仓库别名</li><li>若报错<code>error: remote origin already exists</code>，需要执行git remote rm origin删除关联的远程仓库，再进行添加</li></ul></li><li>查看当前仓库对应的远程仓库别名和地址<ul><li>执行命令<code>git remote -v</code><img src="Pasted-image-20240710150636.png" alt="" /></li></ul></li><li>指定分支名称<ul><li><img src="Pasted-image-20240710235712.png" alt="" /></li><li>若当前本地仓库分支是main,可跳过</li></ul></li><li>关联本地仓库与远程仓库的main分支<ul><li><img src="Pasted-image-20240710235904.png" alt="" /></li><li>-u是upstream的缩写，表示关联</li></ul></li></ul><hr /><h1 id="十一-gitee与gitlab"><a class="markdownIt-Anchor" href="#十一-gitee与gitlab"></a> 十一、Gitee与Gitlab</h1><h2 id="1特点"><a class="markdownIt-Anchor" href="#1特点"></a> 1.特点</h2><ul><li>Gitee是国内平台，访问速度较高</li><li>Gitlab支持私有化部署，安全性较高</li></ul><h2 id="2gitee"><a class="markdownIt-Anchor" href="#2gitee"></a> 2.Gitee</h2><ul><li>操作基本与github相同，但是创建仓库时需要先设为私有后再公开</li></ul><h2 id="3gitlab"><a class="markdownIt-Anchor" href="#3gitlab"></a> 3.Gitlab</h2><ul><li>略</li></ul><hr /><h1 id="十二-使用ide拓展"><a class="markdownIt-Anchor" href="#十二-使用ide拓展"></a> 十二、使用IDE拓展</h1><ul><li>在vs code的源代码管理器中，被修改并保存的文件会被记录到“更改”中，提供三个操作按钮和一个状态标识<img src="Pasted-image-20240711095545.png" alt="" /><ul><li>前三个按钮分别表示打开文件、取消修改、添加暂存</li><li>最后的M表示已修改(Modified)</li></ul></li><li>可以更方便地暂存、提交和推送</li></ul><hr /><h1 id="十三-分支branch"><a class="markdownIt-Anchor" href="#十三-分支branch"></a> 十三、分支(Branch)</h1><h2 id="1简介应用场景"><a class="markdownIt-Anchor" href="#1简介应用场景"></a> 1.简介＆应用场景</h2><ul><li>分支相当于代码库中的不同版本<ul><li>各分支独立存在，有自己的提交记录</li></ul></li><li>适合用于团队协作和开发管理，提高效率，规避冲突<ul><li>多个开发人员在各自分支上工作，然后合并到一起</li><li>建立问题修复分支处理bug和缺陷，保证主线稳定可用</li></ul></li></ul><h2 id="2基本操作"><a class="markdownIt-Anchor" href="#2基本操作"></a> 2.基本操作</h2><ul><li><code>git branch</code><ul><li>作用：查看当前仓库的所有分支</li><li><code>git checkout -b 分支名</code>：新建一个分支并自动跳转到该分支</li><li><code>git checkout 分支名</code>：切换到已有的分支</li><li><code>git merge 分支名</code>：将要被合并的分支与当前分支合并(提前切换到主分支，命令中的分支名写要被合并的分支名称)</li><li><code>git log --graph -- oneline --decorate --all</code>:查看的分支图</li></ul></li><li>分支合并后不会自动删除，需要手动通过命令删除分支<ul><li>删除已合并的分支：<code>git branch -d 要删除的分支名</code></li><li>强制删除：<code>git branch -D 要删除的分支名</code></li></ul></li></ul><h2 id="3分支合并冲突"><a class="markdownIt-Anchor" href="#3分支合并冲突"></a> 3.分支合并冲突</h2><ul><li>冲突的产生<ul><li>两个分支的修改内容有重复，git无法确定覆盖哪一个修改<ul><li><img src="Git-20240902135407385.png" alt="" /></li></ul></li></ul></li><li>解决办法<ul><li>使用<code>git diff</code>命令查看发生冲突的文件及内容</li><li>手动修改两个文件</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
