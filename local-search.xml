<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Web学习笔记(二)：CSS篇</title>
    <link href="/2025/05/12/Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9ACSS%E7%AF%87/"/>
    <url>/2025/05/12/Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9ACSS%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>声明：本篇笔记部分摘自<a href="https://www.wenjingketang.com/bookinfo?book_id=9310">《Web前端技术 - 航空工业出版社》</a>，遵循<a href="https://creativecommons.org/licenses/by/4.0/legalcode.zh-hans">CC BY 4.0协议</a>。<br />存在由AI生成的小部分内容，仅供参考，请仔细甄别可能存在的错误。</p></blockquote><hr /><h1 id="一-css3概述"><a class="markdownIt-Anchor" href="#一-css3概述"></a> 一、CSS3概述</h1><blockquote><p><code>CSS（Cascading Style Sheets，层叠样式表）</code>是一种用于描述网页<strong>外观和格式</strong>的样式表语言，具有<strong>控制网页样式</strong>、<strong>实现结构与样式分离</strong>、<strong>提升用户体验</strong>三大功能。<br />CSS3采用模块化设计，W3C将其划分为一系列独立发展的模块。浏览器厂商按CSS节奏快速创新，因此通过采用模块方法，CSS3规范里的元素能以不同速度向前发展，因为不同的浏览器厂商只支持给定特性。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="百度百科.CSS3\[EB/OL].(2024-06-17)\[2025-05-07]. https://baike.baidu.com/item/CSS3/4059544#reference-3.">[1]</span></a></sup></p></blockquote><hr /><h1 id="二-css3基础"><a class="markdownIt-Anchor" href="#二-css3基础"></a> 二、CSS3基础</h1><h2 id="1css3基本语法"><a class="markdownIt-Anchor" href="#1css3基本语法"></a> 1.CSS3基本语法</h2><p>CSS3样式表由一个或多个CSS3样式组成，，每个CSS3样式由选择器和声明组成。<br /><img src="20250506075340513.png" alt="CSS3样式的基本格式" /></p><ul><li>选择器：用于匹配<code>H5</code>中的不同元素，可以是标签名、类名、ID等。</li><li>声明：用于命令浏览器如何渲染指定的对象，由属性和属性值两部分组成。</li><li>属性：用于设置元素样式的项。</li><li>属性值：设置属性效果的参数，可以是带单位的数字或关键字。</li></ul><p>CSS3的注释格式： <code>/* 注释内容 */</code></p><h2 id="2css3的网页引入方式"><a class="markdownIt-Anchor" href="#2css3的网页引入方式"></a> 2.CSS3的网页引入方式</h2><h3 id="1-行内样式"><a class="markdownIt-Anchor" href="#1-行内样式"></a> ① 行内样式</h3><p><code>&lt;标签名 style=&quot;属性1: 属性值1; 属性2: 属性值2; ···&quot;&gt;&lt;/标签名&gt;</code></p><h3 id="2-内嵌样式表"><a class="markdownIt-Anchor" href="#2-内嵌样式表"></a> ② 内嵌样式表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">选择器&#123;</span><br><span class="language-css">属性<span class="hljs-number">1</span>: 属性值<span class="hljs-number">1</span>;</span><br><span class="language-css">属性<span class="hljs-number">2</span>: 属性值<span class="hljs-number">2</span>;</span><br><span class="language-css">···</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为保证浏览器提前识别解析CSS样式，<strong>一般将内嵌样式表写在HTM34L文件的<code>&lt;head&gt;</code>之中，<code>&lt;title&gt;</code>之后</strong>。</p><h3 id="3-链接样式表"><a class="markdownIt-Anchor" href="#3-链接样式表"></a> ③ 链接样式表</h3><p>将样式放在独立的CSS文件中，使用<code>&lt;link&gt;</code>标签进行链接:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;CSS3文件路径&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3css3选择器"><a class="markdownIt-Anchor" href="#3css3选择器"></a> 3.CSS3选择器</h2><h3 id="1-基本选择器"><a class="markdownIt-Anchor" href="#1-基本选择器"></a> ① 基本选择器</h3><table><thead><tr><th style="text-align:center">选择器</th><th style="text-align:center">格式</th><th style="text-align:center">举例</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>标签选择器</strong></td><td style="text-align:center"><code>标签名 &#123;&#125;</code></td><td style="text-align:center"><code>p &#123;font-size: 20px; color: lightBlue;&#125;</code></td><td></td></tr><tr><td style="text-align:center"><strong>类选择器</strong></td><td style="text-align:center"><code>.类名 &#123;&#125;</code></td><td style="text-align:center"><code>.author &#123;font-size: 20px; color: lightBlue;&#125;</code></td><td></td></tr><tr><td style="text-align:center"><strong>ID选择器</strong></td><td style="text-align:center"><code>#ID &#123;&#125;</code></td><td style="text-align:center"><code>#stu1 &#123;font-size: 20px; color: lightBlue;&#125;</code></td><td></td></tr><tr><td style="text-align:center"><strong>通配选择器</strong></td><td style="text-align:center"><code>* &#123;&#125;</code></td><td style="text-align:center"><code>* &#123;margin: 0; padding: 0; border: 2px;&#125;</code></td><td>用于选择所有标签</td></tr></tbody></table><p>注：可以为同一个元素设定多个<code>class类名</code>，通过多个选择器分别控制样式，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item-1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item-2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.item</span> &#123;  <span class="hljs-comment">/* 设置所有项目的共同样式 */</span></span><br><span class="language-css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;</span><br><span class="language-css">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e5e4e9</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.item-1</span> &#123;  <span class="hljs-comment">/* 单独设置item1的样式 */</span></span><br><span class="language-css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ef342a</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-复合选择器"><a class="markdownIt-Anchor" href="#2-复合选择器"></a> ② 复合选择器</h3><table><thead><tr><th style="text-align:center">选择器</th><th style="text-align:left">格式</th><th style="text-align:left">范围图示</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>交集选择器</strong></td><td style="text-align:left"><code>标签名.类名 &#123;&#125;</code><br><code>标签名#ID &#123;&#125;</code></td><td style="text-align:left">同时满足两个选择器的标签<br><img src="20250506112846756.png" alt="" /></td><td style="text-align:left">前者必须为标签选择器；后者为类选择器或ID选择器</td></tr><tr><td style="text-align:center"><strong>并集选择器</strong></td><td style="text-align:left"><code>选择器1，选择器2，选择器3，··· &#123;&#125;</code></td><td style="text-align:left">所有满足选择器的标签<br><img src="20250506113046770.png" alt="" /></td><td style="text-align:left">有利于减少CSS样式的冗余，提高网页加载速度</td></tr><tr><td style="text-align:center"><strong>后代选择器</strong></td><td style="text-align:left"><code>选择器1 选择器2 &#123;&#125;</code></td><td style="text-align:left">选择器1<br>├─ <mark>选择器2</mark><br>├─ 其他元素<br>│├─ <mark>选择器2</mark><br>│└─ 其他元素<br>└─ 其他元素</td><td style="text-align:left">选择<strong>所有后代元素</strong>，包括直接子元素和更深层级的元素</td></tr><tr><td style="text-align:center"><strong>子代选择器</strong></td><td style="text-align:left"><code>选择器1&gt;选择器2 &#123;&#125;</code></td><td style="text-align:left">选择器1<br>├─ <mark>选择器2</mark><br>├─ 其他元素<br>│├─ 选择器2<br>│└─ 其他元素<br>└─ 其他元素</td><td style="text-align:left">只选择<strong>直接子元素</strong>，不会深入到更低层级的后代</td></tr><tr><td style="text-align:center"><strong>相邻选择器</strong></td><td style="text-align:left"><code>选择器1+选择器2 &#123;&#125;</code></td><td style="text-align:left">根元素<br>├─ 选择器1<br>├─ <mark>选择器2</mark><br>├─ 其他元素<br>├─ 选择器2<br>└─ 其他元素</td><td style="text-align:left">选择元素1之后<strong>紧接着的</strong>兄弟元素元素2</td></tr><tr><td style="text-align:center"><strong>兄弟选择器</strong></td><td style="text-align:left"><code>选择器1~选择器2 &#123;&#125;</code></td><td style="text-align:left">根元素<br>├─ 选择器1<br>├─ <mark>选择器2</mark><br>├─ 其他元素<br>├─ <mark>选择器2</mark><br>└─ 其他元素</td><td style="text-align:left">选择元素1之后的<strong>所有</strong>元素2<br>（只要它们是同一父元素的子元素）</td></tr></tbody></table><h3 id="3-伪类选择器"><a class="markdownIt-Anchor" href="#3-伪类选择器"></a> ③ 伪类选择器</h3><ul><li>用于定义元素的特殊状态</li></ul><table>  <thead>    <tr>      <th style="text-align: center;">性质</th>      <th style="text-align: center;">分类</th>      <th style="text-align: center;">选择器</th>      <th>示例</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="5" style="text-align: center; vertical-align: middle;">动态伪类选择器</th>      <td rowspan="2" style="text-align: center; vertical-align: middle;">锚点伪类</td>      <td style="text-align: center;">:link</td>      <td>a:link {clolr: blue;}</td>      <td>只用于设置链接访问前的样式</td>    </tr>    <tr>      <td style="text-align: center;">:visited</td>      <td>a:link {clolr: red;}</td>      <td>只用于设置链接访问后的样式</td>    </tr>    <tr>      <td rowspan="3" style="text-align: center; vertical-align: middle;">行为伪类</td>      <td style="text-align: center;">:hover</td>      <td>a:hover {color: blue;}</td>      <td>设置鼠标悬浮的样式</td>    </tr>    <tr>      <td style="text-align: center;">:active</td>      <td>a:active {color: red;}</td>      <td>设置鼠标按下但未松开时的样式</td>    </tr>    <tr>      <td style="text-align: center;">:focus</td>      <td>a:hover {color: blue;}</td>      <td>设置元素获得焦点时的样式</td>    </tr>    <tr>      <th style="text-align: center; vertical-align: middle;">否定伪类选择器</th>      <td style="text-align: center; vertical-align: middle;">否定</td>      <td style="text-align: center;">:not()</td>      <td>grid:not(p) {color: red;}</td>      <td>匹配非指定元素或选择器的每个元素</td>    </tr>    <tr>      <th rowspan="3" style="text-align: center; vertical-align: middle;">状态伪类选择器</th>      <td style="text-align: center; vertical-align: middle;">启用</td>      <td style="text-align: center;">:enabled</td>      <td>input[type="text"]:enabled {color: blue;}</td>      <td>匹配每个被启用的元素(多用于表单)</td>    </tr>    <tr>      <td style="text-align: center; vertical-align: middle;">禁用</td>      <td style="text-align: center;">:disabled</td>      <td>input[type="text"]:disabled {color: grey;}</td>      <td>匹配每个被禁用的元素(多用于表单)</td>    </tr>    <tr>      <td style="text-align: center; vertical-align: middle;">选中</td>      <td style="text-align: center;">:checked</td>      <td>input[type="button"]:checked {color: blue;}</td>      <td>匹配每个被选中的元素(多用于按钮、复选框)</td>    </tr>  </tbody></table><p>备注：</p><ul><li>同时使用动态伪类选择器时，<code>:hover</code>必须在<code>:link</code>和<code>:visited</code>之后，<code>:active</code>必须在<code>:hover</code>之后；否则对应的样式会无法显示。</li><li>四者的顺序为：<strong>a:link -&gt; a:visited -&gt; a:hover -&gt; a:active</strong>*（简记：LoVe HAte）<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="牧之 |.a与a:link、a:visited、a:hover、a:active\[EB/OL].(2013-07-30)\[2025-05-07]. https://www.cnblogs.com/exmyth/p/3226654.html.">[2]</span></a></sup>。</li><li><code>结构伪类选择器</code>不常用，此处略去。</li><li>常见cursor属性(鼠标指针样式)见下表：<br /><img src="20250509093412491.png" alt="常见鼠标指针及说明" /></li></ul><h3 id="4-伪元素选择器"><a class="markdownIt-Anchor" href="#4-伪元素选择器"></a> ④ 伪元素选择器</h3><ul><li>用于定义元素<strong>指定部分</strong>的样式，使用<strong>双冒号</strong>为前缀。</li><li>基本格式：<code>选择器::伪类名 &#123;属性1：属性值1; 属性2：属性值2; ···&#125;</code></li></ul><table><thead><tr><th>选择器</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>::before</code></td><td>在选定的元素前添加内容</td><td><code>p::before &#123;content: &quot;CSS3&quot;;&#125;</code></td></tr><tr><td><code>::after</code></td><td>在选定的元素后添加内容</td><td><code>p::after &#123;content: &quot;CSS3&quot;;&#125;</code></td></tr></tbody></table><ul><li>备注：使用伪元素选择器添加的内容无法被鼠标框选选中。</li></ul><h3 id="5-属性选择器"><a class="markdownIt-Anchor" href="#5-属性选择器"></a> ⑤ 属性选择器</h3><ul><li>根据标签的属性匹配元素</li></ul><table><thead><tr><th>选择器</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>E[attr]</code></td><td>用于匹配所有拥有attr属性的E元素，无论属性的值是多少</td><td><code>a[id] &#123;color: blue;&#125;</code><br><code>a[id][class] &#123;color: blue;&#125;</code></td></tr><tr><td><code>E[attr=&quot;value&quot;]</code></td><td>用于匹配所有attr属性值为value的E元素</td><td><code>a[id=&quot;first&quot;] &#123;color: red;&#125;</code><br><code>a[id=&quot;first&quot;][class=&quot;nav&quot;] &#123;color: red;&#125;</code></td></tr><tr><td><code>E[attr~=&quot;value&quot;]</code></td><td>用于匹配attr属性列表中包含value的E元素</td><td><code>a[title~=&quot;web&quot;] &#123;color: red;&#125;</code></td></tr><tr><td><code>E[attr^=&quot;value&quot;]</code></td><td>用于匹配attr属性列表以value开头的E元素</td><td><code>a[title^=&quot;web&quot;] &#123;color: red;&#125;</code></td></tr><tr><td><code>E[attr$=&quot;value&quot;]</code></td><td>用于匹配attr属性列表以value结尾的E元素</td><td><code>a[title$=&quot;web&quot;] &#123;color: red;&#125;</code></td></tr><tr><td><code>E[attr*=&quot;value&quot;]</code></td><td>用于匹配attr属性列表中包含&quot;value&quot;字符串的E元素</td><td><code>a[title*=&quot;web&quot;] &#123;color: red;&#125;</code></td></tr><tr><td><code>E[attr|=&quot;value&quot;]</code></td><td>用于匹配attr属性为&quot;value&quot;或以以&quot;value&quot;开头的E元素</td><td><code>a[title|=&quot;web&quot;] &#123;color: red;&#125;</code></td></tr></tbody></table><h2 id="4css3的继承性与层叠性"><a class="markdownIt-Anchor" href="#4css3的继承性与层叠性"></a> 4.CSS3的继承性与层叠性</h2><ul><li>继承性：在HTML5结构中，后代元素会继承祖先元素的CSS3样式(不可继承边框、边界、背景、定位、布局、尺寸等)。</li><li>层叠性：为一个元素设置多个样式时，高优先级的样式会覆盖低优先级的样式。<ul><li>优先级递减排序：行内样式 &gt; ID选择器 &gt; 类、伪类、属性选择器 &gt; 标签选择器 &gt; 通配选择器 &gt; 继承样式</li><li>权重相同时遵循<strong>就近原则</strong></li></ul></li></ul><hr /><h1 id="三-css3常用属性"><a class="markdownIt-Anchor" href="#三-css3常用属性"></a> 三、CSS3常用属性</h1><h2 id="1css3常用长度单位及颜色表示"><a class="markdownIt-Anchor" href="#1css3常用长度单位及颜色表示"></a> 1.CSS3常用长度单位及颜色表示</h2><ul><li>绝对长度：是固定不变的长度，多用于可以固定大小或位置的情况<ul><li>cm - 厘米</li><li>mm - 毫米</li><li>in - 英寸(inch)</li><li><strong>px - 像素(pixel)</strong> <mark>[常用]</mark></li><li>pt - 点(point)</li><li>pc - 派卡(pica)</li><li>换算关系：1in = 2.54cm = 25.4 mm = 72pt = 6pc<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="勤奋的夕阳一刀.CSS里面的长度单位px/pt/em/in/pc/mm/cm解释\[EB/OL].(2015-10-07)\[2025-05-08]. https://www.cnblogs.com/913815ccmm/p/4858638.html.">[3]</span></a></sup></li></ul></li><li>相对长度：是相对于另一个长度属性的长度，多用于响应式布局<ul><li>em - 相对于元素的字体大小</li><li>ex - 相对于当前字体的高度</li><li>ch - 相对于&quot;0&quot;的宽度</li><li>rem - 相对于根元素的字体大小</li><li>vw - 相对于视口(浏览器窗口)宽度的1%</li><li>vh - 相对于视口(浏览器窗口)高度的1%</li><li>vmin - 相对于视口(浏览器窗口)宽度的1%</li><li>vmax - 相对于视口(浏览器窗口)宽度的1%</li><li><strong>% - 相对于父元素的尺寸</strong> <mark>[常用]</mark></li></ul></li><li>颜色值<ul><li><strong>颜色名称</strong>：直接写明元素的颜色单词<ul><li>例：<code>p &#123;background-color: lightblue;&#125;</code></li></ul></li><li><strong>十六进制值表示</strong>：由<code>#</code>符号开头，后面跟随六个十六进制数字，分别表示红、绿、蓝三种颜色的值。<ul><li>例：<code>p &#123;color: #0077FF;&#125;</code></li></ul></li><li><strong>RGB 值</strong>：使用<code>rgb()</code>函数来定义颜色，参数为红、绿、蓝三种颜色的值，范围从 0 到 255。<ul><li>例： <code>p &#123;color: rgb(255, 99, 71);&#125;</code></li></ul></li></ul></li></ul><blockquote><p>在不同的分辨率下，像素点的大小是不同的。所以同一个网页，以px作长度单位时，在不同的分辨率下显示的大小是不同的。在低分辨率下，像素点较大，细节不够清晰，显示的页面也大，但模糊不清。<br />实际上,无论是相对还是绝对单位,最终都转化为px。所以一般来说，在网页制作时，基本单位都选择px而不是pt，因为pt也是通过浏览器的DPI转换成px显示（比如FireFox的DPI是96，则有9pt = 12px）。不仅pt，cm/in/mm等都是转换成px的。所以无论用绝对还是相对，在不同分辨率下都是会变的。不要认为把长度设置为3cm，它就会在不同的分辨率下保持3cm不变。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="勤奋的夕阳一刀.CSS里面的长度单位px/pt/em/in/pc/mm/cm解释\[EB/OL].(2015-10-07)\[2025-05-08]. https://www.cnblogs.com/913815ccmm/p/4858638.html.">[3]</span></a></sup></p></blockquote><h2 id="2文本属性"><a class="markdownIt-Anchor" href="#2文本属性"></a> 2.文本属性</h2><h3 id="1-字体样式"><a class="markdownIt-Anchor" href="#1-字体样式"></a> ① 字体样式</h3><ul><li>字体样式<ul><li>格式：font-family: “”;</li><li>示例：<code>p &#123;font-family: &quot;宋体&quot;&#125;</code>、<code>span &#123;font-family: &quot;Times New Roman&quot;&#125;</code></li><li>备注：&quot;Times New Roman&quot;多用于数字的字体</li></ul></li><li>字号(字体大小)样式<ul><li>格式：font-size: 值 | 关键字;</li><li>示例：<code>p &#123;font-size: 20px;&#125;</code></li><li>备注：<ul><li>值可以取以px、em、pt等为单位的数值，也可以取基于父元素或默认值的百分比。</li><li>关键字包括xx-smal、x-small、small、large、x-large、xx-large，以及根据父元素字体大小变化的smaller和larger。</li></ul></li></ul></li><li>字体粗细样式：<ul><li>格式：font-weight: <strong>normal(正常)</strong> | bold(加粗) | lighter(减细) | number(100-900之间的九个数值);</li><li>示例：<code>p &#123;font-weight: blod;&#125;</code></li><li>备注：Win环境下，文本默认字体为&quot;微软雅黑&quot;，仅支持400与700两种字粗，设置为其他值时会用这两种效果替换，可能看不出变换。</li></ul></li><li>字体风格样式：<ul><li>格式：font-style: <strong>normal(正常)</strong> | italic(斜体) | oblique(倾斜)</li><li>示例：<code>span &#123;font-style: italic;&#125;</code></li><li>备注：oblique适用于没有斜体样式的字体，将其强制倾斜。</li></ul></li></ul><h3 id="2文本格式"><a class="markdownIt-Anchor" href="#2文本格式"></a> ②文本格式</h3><table><thead><tr><th>项目</th><th>格式</th><th>备注</th></tr></thead><tbody><tr><td><strong>缩进</strong></td><td>text-indent: <strong>0</strong> | 缩进长度;</td><td>长度可以是pm、em、pt、%</td></tr><tr><td><strong>水平对齐</strong></td><td>text-align: <strong>left</strong> | right | center | justify(两端对齐);</td><td></td></tr><tr><td><strong>修饰</strong></td><td>text-decoration: <strong>none</strong> | underline | overline | line-through(删除线);</td><td></td></tr><tr><td><strong>省略</strong></td><td>text-overflow: <strong>clip(不省略)</strong> | ellipsis(省略)</td><td>隐藏文本宽度过大溢出的部分，用…标记</td></tr><tr><td><strong>字符间距</strong></td><td>word-spacing: <strong>normal(无间距)</strong> | 间距值;</td><td>字母之间的间距，默认为0</td></tr><tr><td><strong>单词间距</strong></td><td>letter-spacing: <strong>normal(正常间距)</strong> | 间距值;</td><td>单词之间的间距</td></tr><tr><td><strong>行高</strong></td><td>line-height: <strong>normal(正常行高)</strong> | number(当前字体高度的倍数) | 高度值;</td><td></td></tr><tr><td><strong>自动换行</strong></td><td>word-break: <strong>normal(浏览器规则)</strong> | break-all(可截断单词) | keep-all(只在空格处换行);</td><td></td></tr><tr><td><strong>空白符处理</strong></td><td>white-space: <strong>normal(忽略空白)</strong> | nowrap | pre | pre-line | pre-wrap;</td><td>较为复杂，用时再查询规则，此处忽略。</td></tr><tr><td><strong>溢出内容处理</strong></td><td>overflow: <strong>visible(溢出在边框外)</strong> | hidden | scroll(始终提供滚动条) | auto(有溢出时提供滚动条);</td><td></td></tr></tbody></table><h2 id="3图像属性"><a class="markdownIt-Anchor" href="#3图像属性"></a> 3.图像属性</h2><table><thead><tr><th style="text-align:center">项目</th><th>格式</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>宽度</strong></td><td>width: 宽度值;</td><td></td></tr><tr><td style="text-align:center"><strong>高度</strong></td><td>height: 高度值;</td><td></td></tr><tr><td style="text-align:center"><strong>边框宽度</strong></td><td>border-width: 宽度值*4;</td><td></td></tr><tr><td style="text-align:center"><strong>边框风格</strong></td><td>border-style: 样式*4;</td><td>样式 = solid(单实线) | dotted(点线) | dashed(虚线) | <br>          double(双线) | groove(槽线) | ridge(谷线)</td></tr><tr><td style="text-align:center"><strong>边框颜色</strong></td><td>border-color: 颜色值*4;</td><td>颜色值的表示见本篇笔记的 <strong>三、1</strong> 部分</td></tr><tr><td style="text-align:center"><strong>不透明度</strong></td><td>opacity: 0~1;</td><td>数值越高越不透明</td></tr><tr><td style="text-align:center"><strong>圆角</strong></td><td>border-radius: 值*4;</td><td>在中间添加-top-right-等可单独设置每个角的圆弧大小</td></tr><tr><td style="text-align:center"><strong>阴影</strong></td><td>box-shadow: 水平位置 垂直位置 模糊距离 阴影尺寸 outset | inset;</td><td>可直接使用阴影效果生成工具<a href="https://neumorphism.io/#e0e0e0">Neumorphism.io</a>、<a href="https://box-shadow.dev/">Box Shadows</a>等直接生成需要的CSS阴影样式</td></tr></tbody></table><ul><li>备注：<ul><li>属性值列表中标注了<code>*4</code>的，表示可以设置1-4个值，分别控制：<strong>上-右-下-左 | 上-左右-下 | 上下-左右 | 上-右-下-左</strong>。同时，可以在属性项中加上<code>-方向-</code>指定设置其中某个方向上的样式。<ul><li>例：<code>img &#123;border-top-width: 2px;&#125;</code>，方向可选：left | right | top | bottom</li></ul></li><li>使用<code>border属性</code>可以在同一个声明中统一设置边框宽度、风格和颜色。<ul><li>例： <code>img &#123;border: 2px solid black;&#125;</code></li></ul></li></ul></li></ul><h2 id="4网页背景"><a class="markdownIt-Anchor" href="#4网页背景"></a> 4.网页背景</h2><table><thead><tr><th style="text-align:center">项目</th><th>格式</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>背景颜色</strong></td><td>background-color: transparent | 颜色值;</td><td></td></tr><tr><td style="text-align:center"><strong>背景图像</strong></td><td>background-image: <strong>none</strong> | <code>url(图片路径)</code>;</td><td>如<code>body &#123;background-image: url(bg.png);&#125;</code></td></tr><tr><td style="text-align:center"><strong>显示方式</strong></td><td>background-repeat: <strong>repeat</strong> | repeat-x | <br>repeat-y | no-repeat | round | space;</td><td>repeat表现为重复，round表现为缩放填充，<br>space表现为按相同间距平铺填充</td></tr><tr><td style="text-align:center"><strong>起始位置</strong></td><td>background-position: 关键字 | 偏移量;</td><td><code>水平 垂直</code>格式，关键字如<code>left top</code>，偏移量如<code>0% 0%</code>或<code>0pos 0pos</code>(单位为px或em)，缺省其中一个时，缺省项为center或50%<br></td></tr><tr><td style="text-align:center"><strong>固定方式</strong></td><td>background-attachment: <strong>scroll(相对元素固定)</strong> | fixed(相对浏览器窗口固定) | lcoal(相对元素内容固定);</td><td></td></tr></tbody></table><ul><li>备注：<ul><li>可使用<code>background属性</code>在同一声明中设置多个属性值, 其中必须包含颜色或图像，其他可选<ul><li>如：<code>body &#123;background: url(bg.png) repeat scroll;&#125;</code></li></ul></li></ul></li></ul><h2 id="5列表属性"><a class="markdownIt-Anchor" href="#5列表属性"></a> 5.列表属性</h2><table><thead><tr><th style="text-align:center">项目</th><th>格式</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center">项目符号</td><td>list-type: 关键字;</td><td>关键字包括：<strong>disc(●)</strong> | circle(○) | none | square(■) | decimal(1) | lower-alpha(a) | upper-alpha(A) | lower-roman(i) | upper-roman(Ⅰ) | cjk-ideographic(一)</td></tr><tr><td style="text-align:center">项目符号位置</td><td>list-style-position: <strong>outside</strong> | inside;</td><td>outside表示符号位于文本左侧，且在文本以外；inside表示符号位于文本以内，文本根据符号位置对齐</td></tr><tr><td style="text-align:center">符号自定义图片</td><td>list-style-image: <strong>none</strong> | <code>url(图片路径)</code>;</td><td></td></tr></tbody></table><ul><li>备注：<ul><li>常用于取消列表的默认样式。</li><li>使用<code>list-style属性</code>在同一声明中设置多个属性值。</li></ul></li></ul><h2 id="6超链接属性"><a class="markdownIt-Anchor" href="#6超链接属性"></a> 6.超链接属性</h2><ul><li>一般通过设置<strong>载体</strong>的样式来设置超链接的样式，载体可以是图片、文本等，相关样式已在前文给出。</li><li>修改超链接访问前后的样式，使用<strong>动态伪类选择器</strong>实现。</li></ul><h2 id="7表格属性"><a class="markdownIt-Anchor" href="#7表格属性"></a> 7.表格属性</h2><table><thead><tr><th style="text-align:center">项目</th><th>格式</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center">标题位置</td><td>caption-side: <strong>top</strong> | bottom;</td><td></td></tr><tr><td style="text-align:center">边框合并</td><td>border-callapse: <strong>saparate(分开)</strong> | collapse(合并);</td><td></td></tr><tr><td style="text-align:center">边框间距</td><td>boder-spacing: 间距值;</td><td>写一个值控制所有方向，两个值分别控制水平和竖直方向；间距不可取负值</td></tr><tr><td style="text-align:center">显示空单元格</td><td>empty-cells: <strong>show</strong> | hide;</td><td>选择hide时，不绘制空单元格的边框</td></tr><tr><td style="text-align:center">渲染方法</td><td>table-layout: <strong>auto</strong> | fixed;</td><td>默认情况下，列宽由单元格内容决定；设为fixed时，列宽由表格宽度和列宽度确定</td></tr></tbody></table><h2 id="8表单属性"><a class="markdownIt-Anchor" href="#8表单属性"></a> 8.表单属性</h2><ul><li>对文本、图片、选项符号的样式调整已在前文给出</li></ul><blockquote><p>“设置表单控件<strong>获得焦点时</strong>的样式需要使用<code>:focus</code>选择器。设置<strong>单选钮和复选框</strong>的样式时，可以先将它们隐藏，再通过设置其提示信息的样式来实现单选钮与复选框的功能。此时就需要使用伪类选择器<code>:checked</code>匹配选中的单选钮或复选框，接着搭配使用其他选择器匹配选中的单选钮或复选框的提示信息，然后设置相应提示信息的样式，就可以通过提示信息的样式变化提醒用户选择了哪个选项，从而在隐藏单选钮或复选框的同时 不影响使用它们的功能。” ——《Web前端技术》P137</p></blockquote><hr /><h1 id="四-css3布局"><a class="markdownIt-Anchor" href="#四-css3布局"></a> 四、CSS3布局</h1><h2 id="1盒子模型"><a class="markdownIt-Anchor" href="#1盒子模型"></a> 1.盒子模型</h2><ul><li>HTML中大部分的元素(<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code>、<code>&lt;div&gt;</code>等)都可以认为是一个盒子。</li><li>盒子由内容与边框组成；内容与边框之间的距离为内边距，边框与其他盒子的边框之间的距离为外边距。</li></ul><h3 id="1-基本结构"><a class="markdownIt-Anchor" href="#1-基本结构"></a> ① 基本结构</h3><p><img src="20250509170929341.png" alt="" /></p><div ></div><h3 id="2-盒子模型的属性"><a class="markdownIt-Anchor" href="#2-盒子模型的属性"></a> ② 盒子模型的属性</h3><ul><li>盒子的内容<ul><li>使用属性<code>width</code>、<code>height</code>设置内容的宽度和高度。</li><li>通过<code>box-sizing</code>: <strong>content-box(作用于内容区域)</strong> | border-box(作用于边框及内部区域);来设置<code>width</code>与<code>height</code>属性的作用范围。</li></ul></li><li>盒子的边框：<ul><li>使用属性设置盒子模型的边框。具有子属性<code>border-width</code>、<code>border-style</code>、<code>border-radius</code>和<code>border-color</code>分别用于设置边框的宽度、样式、圆角和颜色等样式。</li></ul></li><li>盒子的内边距：<ul><li>格式：<code>padding: 边距值*4 | auto</code>;，默认值为0，选择auto时，浏览器自动计算内边距。</li><li>内边距可以用于撑大盒子的范围，盒子的宽高会跟随内边距变化。盒子的背景也会延伸到内边距范围(上图浅绿色部分)，而不仅仅是局限于内容的范围(上图浅蓝色部分)。</li></ul></li><li>盒子的外边距：<ul><li>格式：<code>margin: 边距值*4 | auto</code>;，默认值为0，选择auto时，浏览器自动计算外边距。</li></ul></li></ul><h3 id="3-不同类型的盒子模型"><a class="markdownIt-Anchor" href="#3-不同类型的盒子模型"></a> ③ 不同类型的盒子模型</h3><ul><li>块级元素(<code>&lt;h1&gt;~&lt;h6&gt;</code>、<code>&lt;p&gt;</code>、<strong><code>&lt;div&gt;</code></strong>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>、<code>&lt;dd&gt;</code>、<code>&lt;dt&gt;</code>、<code>&lt;dl&gt;</code>等)<ul><li>在页面中独占一行，宽度和高度默认填满父元素，通过<code>width</code>和<code>height</code>属性设置宽度和高度。</li><li><strong>即使设置了宽度，仍然会独占一行。</strong> 可以用<code>padding</code>和<code>margin</code>设置内外边距。</li></ul></li><li>行内元素(<code>&lt;a&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;del&gt;</code>、<code>&lt;s&gt;</code>、<code>&lt;ins&gt;</code>、<code>&lt;u&gt;</code>、<strong><code>&lt;span&gt;</code></strong>、<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;br/&gt;</code>等)<ul><li>在页面中按从左到右、从上到下的顺序布局，不会独占一行。宽度和高度取决于内容的大小，<strong>无法</strong> 通过<code>width</code>和<code>height</code>设置盒子的宽高。</li><li><strong>对行内元素应用上、下方向上的外边距不会显示效果。</strong>(行内元素无法拉高父元素的高度)</li></ul></li><li>行内块元素(显示在同一行的块级元素)<ul><li>可以为其设置宽高、边距、边框等属性。</li><li>使用<code>display元素</code>设置元素的类型：display: <strong>none</strong> | block(块级元素，自带换行符) | inline(行内元素) | inline-block(行内块元素)</li></ul></li></ul><h2 id="2元素的排版定位-布局"><a class="markdownIt-Anchor" href="#2元素的排版定位-布局"></a> 2.元素的排版(定位、布局)</h2><h3 id="1-标准流排版"><a class="markdownIt-Anchor" href="#1-标准流排版"></a> ① 标准流排版</h3><ul><li>不使用任何与排版或定位相关的CSS规则时，各个元素<strong>默认的排版方式</strong>，盒子排成序列，同级盒子在父级盒子中按照行内或者块级元素的规则进行排列。</li><li>这样的页面类似于河流的干流与支流，故称之为&quot;<strong>标准流</strong>&quot;或&quot;<strong>文档流</strong>&quot;。<br /><img src="20250510134621322.png" alt="" /></li></ul><h3 id="2-浮动排版常用于图文混排"><a class="markdownIt-Anchor" href="#2-浮动排版常用于图文混排"></a> ② 浮动排版(常用于图文混排)</h3><ul><li>在浮动排版中，块级元素的宽度由父级盒子的(其他)内容与内边距决定，而不再独占一行或占满父元素宽度。</li><li>任何显示在浮动元素下方的元素都会在网页中向上移动，如果上移的元素中包含文本，文本会环绕在浮动元素的周围，多用于图文混排效果。</li></ul><table><thead><tr><th style="text-align:center">项目</th><th>格式</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center">浮动设置</td><td>float: <strong>none</strong> | left | right;</td><td>left表示元素向左移动，right表示元素向右移动(见下表)，此属性在图片元素中设置</td></tr><tr><td style="text-align:center">浮动清除</td><td>cear: <strong>none</strong> | left | right | both;</td><td>防止元素不必要的上移导致排版混乱(如下图所示)，此属性在文本元素中设置</td></tr></tbody></table><ul><li><p>浮动效果图示：<br /><img src="20250510154838571.png" alt="" /></p></li><li><p>浮动方向说明：</p></li></ul><table><thead><tr><th style="text-align:center">方向</th><th>图示</th></tr></thead><tbody><tr><td style="text-align:center">未设置图片浮动</td><td><img src="20250510142921379.png" alt="" /></td></tr><tr><td style="text-align:center">设置图片向左浮动<br>(float: left;)</td><td><img src="20250510142946510.png" alt="" /></td></tr><tr><td style="text-align:center">设置图片向右浮动<br>(float: right;)</td><td><img src="20250510143144774.png" alt="" /></td></tr></tbody></table><h3 id="高度塌陷问题及解决方法"><a class="markdownIt-Anchor" href="#高度塌陷问题及解决方法"></a> ☆ “高度塌陷”问题及解决方法</h3><ul><li>元素设置为浮动后，父元素高度不能再根据子元素自适应拓展，即出现“高度塌陷”的问题。如下图所示：<br /><img src="20250510155836547.png" alt="" /></li><li>为了解决这样的问题，可以给图片元素添加一个<strong>设置了浮动清除的非浮动兄弟元素</strong>(如<code>&lt;div style=&quot; clear: both; height: 0px;&quot;&gt;&lt;/div&gt;</code>)。<br /><img src="20250510160430183.png" alt="" /></li><li>此时，父元素识别并根据兄弟元素进行高度拓展，解决了高度塌陷的问题。</li></ul><h3 id="3-定位排版对网页元素进行精确定位"><a class="markdownIt-Anchor" href="#3-定位排版对网页元素进行精确定位"></a> ③ 定位排版(对网页元素进行精确定位)</h3><ul><li>定位方式：position: <strong>static</strong> | relative | absolute | fixed;</li></ul><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">名称</th><th>描述</th><th>图示 (在各模式下，对box2应用右下方向各50px的偏移)</th></tr></thead><tbody><tr><td style="text-align:center">static</td><td style="text-align:center">静态定位</td><td>默认定位模式，元素按照标准流显示</td><td><img src="20250510171731756.png" alt="" /></td></tr><tr><td style="text-align:center">relative</td><td style="text-align:center">相对定位</td><td>元素以<strong>自身在标准流布局中的位置</strong>为基准进行定位，原有的位置会留空</td><td><img src="20250510171716066.png" alt="" /></td></tr><tr><td style="text-align:center">absolute</td><td style="text-align:center">绝对定位</td><td>元素以<strong>上一个已定位元素</strong>为基准进行定位，原有的位置不再保留，与基准元素堆叠在一起</td><td><img src="20250510171841117.png" alt="" /></td></tr><tr><td style="text-align:center">fixed</td><td style="text-align:center">固定定位</td><td>元素以<strong>浏览器窗口</strong>为基准进行定位，原有的位置不再保留，也不会随页面滚动(常用于侧边广告、&quot;回到顶部&quot;按钮等元素的固定)</td><td><img src="20250510173028487.png" alt="" /></td></tr></tbody></table><ul><li>偏移量: 根据上述基准确定元素的准确位置(定位方式为<code>static</code>时，偏移量的设置无效)</li></ul><table><thead><tr><th style="text-align:center">项目</th><th>格式</th></tr></thead><tbody><tr><td style="text-align:center">左侧偏移量</td><td>left: 偏移值;</td></tr><tr><td style="text-align:center">右侧偏移量</td><td>right: 偏移值;</td></tr><tr><td style="text-align:center">顶部偏移量</td><td>top: 偏移值;</td></tr><tr><td style="text-align:center">底部偏移量</td><td>bottom: 偏移值;</td></tr></tbody></table><ul><li>堆叠顺序：默认情况下，标准流中后出现的元素在上层。可以通过<code>z-index</code>属性调整堆叠关系。<ul><li>属性值可以是正数、<strong>0</strong> 和负数。一般取<code>99</code>和<code>-99</code>来实现元素的置顶与置底效果。</li><li>父元素的<code>z-index</code>无法与子元素进行比较；想让父元素显示在子元素上方，可以将子元素的<code>z-index</code>设为负值。</li></ul></li></ul><h2 id="3flex布局sup-idfnref4-classfootnote-refa-hreffn4-relfootnotespan-classhint-top-hint-rounded-aria-label阮一峰flex-布局教程语法篇ebol2015-07-102025-05-10-httpswwwruanyifengcomblog201507flex-grammarhtml4spanasup"><a class="markdownIt-Anchor" href="#3flex布局sup-idfnref4-classfootnote-refa-hreffn4-relfootnotespan-classhint-top-hint-rounded-aria-label阮一峰flex-布局教程语法篇ebol2015-07-102025-05-10-httpswwwruanyifengcomblog201507flex-grammarhtml4spanasup"></a> 3.Flex布局<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="阮一峰.Flex 布局教程：语法篇\[EB/OL].(2015-07-10)\[2025-05-10]. https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">[4]</span></a></sup></h2><h3 id="1-flex概述"><a class="markdownIt-Anchor" href="#1-flex概述"></a> ① Flex概述</h3><blockquote><p>布局的传统解决方案，基于<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box_model">盒状模型</a>，依赖 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display"><code>display</code></a> 属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"><code>position</code></a>属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float"><code>float</code></a>属性实现，不便于实现一些较为复杂(如垂直居中)的布局。<br />2009年，<strong>W3C</strong>提出了一种新的方案 —— <strong>Flex(Flexible Box, 弹性盒布局)</strong>，可以简便、完整、响应式地为盒状模型提供灵活的布局，目前已经得到了所有浏览器的支持。</p></blockquote><h3 id="2-基本概念"><a class="markdownIt-Anchor" href="#2-基本概念"></a> ② 基本概念</h3><ul><li>采用Flex布局的元素称为<strong>Flex容器(Flex container)</strong>，简称 <strong>“容器”</strong>。容器的所有子元素成为其成员，称为<strong>Flex项目(Flex item)</strong>,简称 <strong>“项目”</strong>。</li><li>容器默认存在两根轴：水平的<strong>主轴(main axis)</strong> 和 <strong>垂直的交叉轴(cross axis)</strong>。<ul><li>主轴的开始位置(与边框的交叉点)叫做 <strong><code>main start</code></strong> ，结束位置叫做 <strong><code>main end</code></strong>。</li><li>交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</li></ul></li><li>项目默认沿主轴排列：<ul><li><code>main size</code>：单个项目占据的主轴空间</li><li><code>cross size</code>：单个项目占据的交叉轴空间</li></ul></li><li>Flex容器的各个概念如下图<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="阮一峰.Flex 布局教程：语法篇\[EB/OL].(2015-07-10)\[2025-05-10]. https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">[4]</span></a></sup>所示：<br /><img src="20250511010807469.png" alt="" /></li></ul><h3 id="3-容器属性设置在容器上在线演示工具"><a class="markdownIt-Anchor" href="#3-容器属性设置在容器上在线演示工具"></a> ③ 容器属性(设置在容器上,<a href="http://jack.jackafan.top/zsd/css/flex/">在线演示工具</a>)</h3><h4 id="display-flex-指定容器为flex布局"><a class="markdownIt-Anchor" href="#display-flex-指定容器为flex布局"></a> display: flex; 指定容器为Flex布局</h4><ul><li>使用 <code>display: inline-flex;</code> 的声明，可以将任何一个<strong>行内元素</strong>指定为Flex布局。</li><li>在<strong>WebKit内核的浏览器</strong>(如Safari、iOS版本的Chrome和Edge)上使用Flex布局，应该使用 <code>display: -webkit-flex;</code> 这样的声明。</li><li>设为Flex布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</li></ul><h4 id="flex-direction属性主轴方向项目布局方向"><a class="markdownIt-Anchor" href="#flex-direction属性主轴方向项目布局方向"></a> flex-direction属性：主轴方向(项目布局方向)</h4><table><thead><tr><th>取值</th><th>row</th><th>row-reverse</th><th>column</th><th>column-reverse</th></tr></thead><tbody><tr><td>描述</td><td>从左往右，默认</td><td>从右往左</td><td>从上到下</td><td>从下到上</td></tr><tr><td>图示</td><td><img src="20250511150748743.png" alt="" /></td><td><img src="20250511150834951.png" alt="" /></td><td><img src="20250511150850869.png" alt="" /></td><td><img src="20250511151756443.png" alt="" /></td></tr></tbody></table><h4 id="flex-wrap属性-内容换行"><a class="markdownIt-Anchor" href="#flex-wrap属性-内容换行"></a> flex-wrap属性: 内容换行</h4><table><thead><tr><th>取值</th><th>nowrap</th><th>wrap</th><th>warp-reverse</th></tr></thead><tbody><tr><td>描述</td><td>不换行(宽度不足时挤压内容的宽度)，默认</td><td>向下换行(新的一行在下方)</td><td>向上换行(新的一行在上方)</td></tr><tr><td>图示</td><td><img src="20250511152039858.png" alt="" /></td><td><img src="20250511152051854.png" alt="" /></td><td><img src="20250511152110422.png" alt="" /></td></tr></tbody></table><h4 id="justify-content属性-主轴对齐"><a class="markdownIt-Anchor" href="#justify-content属性-主轴对齐"></a> justify-content属性: 主轴对齐</h4><table><thead><tr><th>取值</th><th>flex-start</th><th>flex-end</th><th>center</th><th>space-between</th><th>space-evenly</th><th>space-around</th></tr></thead><tbody><tr><td>描述</td><td>对齐主轴起点，默认</td><td>对齐主轴终点</td><td>居中对齐</td><td>分散对齐，两边紧贴</td><td>分散对齐，间距相同</td><td>分散对齐，两端间距减半</td></tr><tr><td>图示</td><td><img src="20250511152945287.png" alt="" /></td><td><img src="20250511153011486.png" alt="" /></td><td><img src="20250511153046737.png" alt="" /></td><td><img src="20250511153113530.png" alt="" /></td><td><img src="20250511153133123.png" alt="" /></td><td><img src="20250511153148211.png" alt="" /></td></tr></tbody></table><h4 id="align-items属性-单行交叉轴对齐"><a class="markdownIt-Anchor" href="#align-items属性-单行交叉轴对齐"></a> align-items属性: 单行交叉轴对齐</h4><table><thead><tr><th>取值</th><th>flex-start</th><th>flex-end</th><th>center</th><th>baseline</th><th>stretch</th></tr></thead><tbody><tr><td>描述</td><td>对齐交叉轴起点</td><td>对齐交叉轴终点</td><td>居于交叉轴为中心分布</td><td>对齐首行文字</td><td>若内容未设高度或设为auto，<br>占满父容器高度，默认</td></tr><tr><td>图示</td><td><img src="20250511153903434.png" alt="" /></td><td><img src="20250511153941526.png" alt="" /></td><td><img src="20250511154446756.png" alt="" /></td><td><img src="20250511154036067.png" alt="" /></td><td><img src="20250511154057001.png" alt="" /></td></tr></tbody></table><h4 id="align-content属性-多行交叉轴对齐"><a class="markdownIt-Anchor" href="#align-content属性-多行交叉轴对齐"></a> align-content属性: 多行交叉轴对齐</h4><table><thead><tr><th>取值</th><th>stretch</th><th>flex-start</th><th>flex-end</th><th>center</th><th>space-between</th><th>space-evenly</th><th>space-around</th></tr></thead><tbody><tr><td>描述</td><td>默认布局</td><td>对齐顶部</td><td>对齐底部</td><td>居中对齐</td><td>分散对齐，两边紧贴</td><td>分散对齐，间距相同</td><td>分散对齐，两端间距减半</td></tr><tr><td>图示</td><td><img src="20250511154703419.png" alt="" /></td><td><img src="20250511154723483.png" alt="" /></td><td><img src="20250511154745362.png" alt="" /></td><td><img src="20250511154801722.png" alt="" /></td><td><img src="20250511154818665.png" alt="" /></td><td><img src="20250511154844911.png" alt="" /></td><td><img src="20250511154903196.png" alt="" /></td></tr></tbody></table><h4 id="在f12开发人员工具中快捷调整flex布局的容器属性"><a class="markdownIt-Anchor" href="#在f12开发人员工具中快捷调整flex布局的容器属性"></a> ☆ 在F12开发人员工具中快捷调整Flex布局的容器属性：</h4><p>对于上述的属性，在Chrome中F12打开开发人员工具后，在“样式”部分指定某个容器为Flex布局时，会自动出现调整各项参数的窗口，调整后将新的样式复制到源码中即可(&quot;开发人员工具&quot;只可临时修改，无法修改源代码内容)。<br /><img src="20250511020013795.png" alt="" /></p><h3 id="4-项目属性设置在项目上"><a class="markdownIt-Anchor" href="#4-项目属性设置在项目上"></a> ④ 项目属性(设置在项目上)</h3><h4 id="order属性定义项目的排列顺序"><a class="markdownIt-Anchor" href="#order属性定义项目的排列顺序"></a> order属性：定义项目的排列顺序</h4><ul><li>可以为负整数值、0和正整数值，默认为0。</li><li>使用方法类似于<code>z-index</code>属性，可以分别用-99,99来让某个元素置为最后一个和第一个。</li></ul><h4 id="flex-basis属性定义了在分配多余空间之前项目占据的主轴空间"><a class="markdownIt-Anchor" href="#flex-basis属性定义了在分配多余空间之前项目占据的主轴空间"></a> flex-basis属性：定义了在分配多余空间之前，项目占据的主轴空间</h4><ul><li>默认值为<code>auto</code>，即项目的本来大小。浏览器根据此属性计算主轴是否有多余空间。</li><li>也可以设置为固定的数值，使项目占用固定的空间。</li></ul><h4 id="flex-grow属性定义项目的空间占用比例"><a class="markdownIt-Anchor" href="#flex-grow属性定义项目的空间占用比例"></a> flex-grow属性：定义项目的空间占用比例</h4><ul><li>默认为0，不放大(不等分剩余空间)<ul><li>若所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间</li><li>若某项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</li><li><img src="20250511155930309.png" alt="" /></li></ul></li></ul><h4 id="fiex-shrink属性定义项目的缩小比例"><a class="markdownIt-Anchor" href="#fiex-shrink属性定义项目的缩小比例"></a> fiex-shrink属性：定义项目的缩小比例</h4><ul><li>默认缩小比例为1，若空间不足，项目会缩小宽度或高度。设为负值无效。<ul><li>若所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。</li><li>若某项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</li><li><img src="20250511160146988.png" alt="" /></li></ul></li></ul><h4 id="flex属性同时定义项目占用空间及缩放比例"><a class="markdownIt-Anchor" href="#flex属性同时定义项目占用空间及缩放比例"></a> flex属性：同时定义项目占用空间及缩放比例</h4><ul><li>格式：<code>flex: flex-grow属性值 flex-shrink属性值 flex-basis属性值;</code></li><li>两个快捷值：<ul><li><code>auto</code>：1 1 auto（项目大小为内容原本大小，等分剩余空间，允许缩小）。</li><li><code>none</code>：0 0 auto（项目大小为内容原本大小，不等分空间，不允许缩小）。</li></ul></li></ul><h4 id="align-self属性允许单个项目有与其他项目不一样的对齐方式"><a class="markdownIt-Anchor" href="#align-self属性允许单个项目有与其他项目不一样的对齐方式"></a> align-self属性：允许单个项目有与其他项目不一样的对齐方式</h4><ul><li>设置此属性后，会覆盖掉容器设定的<code>align-items</code>属性。</li><li>默认值为<code>auto</code>，继承容器定义的<code>align-items</code>属性(若无父元素则自动设为<code>stretch</code>).</li></ul><h2 id="4grid布局sup-idfnref5-classfootnote-refa-hreffn5-relfootnotespan-classhint-top-hint-rounded-aria-label阮一峰css-grid-网格布局教程ebol2019-03-252025-05-10-httpsruanyifengcomblog201903grid-layout-tutorialhtml5spanasup"><a class="markdownIt-Anchor" href="#4grid布局sup-idfnref5-classfootnote-refa-hreffn5-relfootnotespan-classhint-top-hint-rounded-aria-label阮一峰css-grid-网格布局教程ebol2019-03-252025-05-10-httpsruanyifengcomblog201903grid-layout-tutorialhtml5spanasup"></a> 4.Grid布局<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="阮一峰.CSS Grid 网格布局教程\[EB/OL].(2019-03-25)\[2025-05-10]. https://ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">[5]</span></a></sup></h2><h3 id="1-grid概述"><a class="markdownIt-Anchor" href="#1-grid概述"></a> ① Grid概述</h3><blockquote><p><strong>网格布局(Grid)</strong> 是很强大的CSS布局方案,通过将网页划分并组合不同的网格，实现各种各样的布局。<br />Flex 布局是<strong>轴线布局</strong>，只能指定&quot;项目&quot;针对轴线的位置，可以看作是一维布局。<br />Grid 布局则是将容器划分成&quot;行&quot;和&quot;列&quot;，产生<strong>单元格</strong>，然后指定&quot;项目所在&quot;的单元格，可以看作是二维布局。</p></blockquote><h3 id="2-基本概念-2"><a class="markdownIt-Anchor" href="#2-基本概念-2"></a> ② 基本概念</h3><h4 id="容器与项目"><a class="markdownIt-Anchor" href="#容器与项目"></a> 容器与项目</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>容器(container)</strong>：指采用网格布局的区域。</li><li><strong>项目(item)</strong>：容器内部采用网格定位的<strong>顶层</strong>子元素。</li><li>在上面的示例中，父元素<code>&lt;div&gt;</code>是容器，子元素<code>&lt;div&gt;</code>是项目；但是<code>&lt;p&gt;</code>不属于Grid容器的项目(不是父元素的顶层子元素)。</li><li>Grid布局只对容器内的项目生效。</li></ul><h4 id="行与列"><a class="markdownIt-Anchor" href="#行与列"></a> 行与列</h4><ul><li>容器里面的水平区域称为<strong>行(row)</strong>，垂直区域称为<strong>列(column)</strong>。各行与各列的重叠部分组成一些<strong>单元格(cell)</strong>。</li><li>划分网格的线，称为<strong>网格线(grid line)</strong>。水平网格线划分出行，垂直网格线划分出列。</li></ul><h3 id="3-容器属性设置在容器上在线演示工具-2"><a class="markdownIt-Anchor" href="#3-容器属性设置在容器上在线演示工具-2"></a> ③ 容器属性(设置在容器上,<a href="https://jsbin.com/mezufab/edit?html,css,output">在线演示工具</a>)</h3><h4 id="display-grid-指定容器为grid网络布局"><a class="markdownIt-Anchor" href="#display-grid-指定容器为grid网络布局"></a> display: grid; 指定容器为Grid网络布局</h4><ul><li>设为网格布局以后，容器项目的<code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>vertical-align</code>和<code>column-*</code>等设置都将失效。</li><li>指定为Grid布局后，默认设定为块级元素；可以通过<code>display: inline-grid;</code>的声明设定为行内元素，如图所示：<br /><img src="20250511211409402.png" alt="" /></li></ul><h4 id="grid-template-columns和grid-template-rows属性"><a class="markdownIt-Anchor" href="#grid-template-columns和grid-template-rows属性"></a> grid-template-columns和grid-template-rows属性</h4><ul><li>分别用于指定网络布局每一列的宽度和每一行的高度()，定义了几个值就有几行/几列。如图所示：<br /><img src="20250511212138947.png" alt="" /></li><li>宽度/高度可以是固定的<code>px</code>值，可以是相对的<code>%</code>值，也可以是相对的<code>fr</code>值，表示均分容器宽高的权重(总宽高为容器的宽高，各自的宽高比例为<code>fr</code>的值；类似于WPF中的<code>&lt;RowDefinition Height=&quot;2*&quot;&gt;</code>，<a href="https://jsbin.com/gugunosofa/edit?html,css,output">点击查看示例</a>)</li><li>网格很多时，重复写多个值很不方便，可以使用<code>repeat(重复次数， 宽度/高度值)</code>方法批量定义多个行和列：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container1</span> &#123;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">grid-template-rows</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">100px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>repeat()</code>的参数说明：<ul><li>第二个参数也可以是多个值，表示重复的模式，如<code>grid-template-rows: repeat(2, 20px 40px 60px);</code>，此时列宽为<code>20 40 60 20 40 60</code></li><li>第一个参数可以是关键字<code>auto-fill</code>，此时容器会根据容器宽度决定列数，实现<strong>响应式布局</strong>的效果，<a href="https://jsbin.com/zuvinerezo/edit?html,css,output">点击查看示例</a><br /><img src="20250511214655531.png" alt="" /></li></ul></li><li><code>minmax(最小值，最大值)</code>方法可用于设定行(列)的最小(大)的宽度和高度, 如<code>grid-template-rows: 1fr 1fr minmax(100px, 1fr);</code></li><li><code>auto关键字</code>表示自动设定宽高，在没有设定取值范围时取最大的宽度或高度。</li><li>可以使用<strong>方括号</strong>指定各行各列的名称，方便后续引用(可以定义多个名称)，如<code>grid-template-rows: [first-row r1] 100px [r2] 100px [r3] auto [r4];</code></li></ul><h4 id="grid-gap属性设置行之间-列之间的间隔行间距与列间距"><a class="markdownIt-Anchor" href="#grid-gap属性设置行之间-列之间的间隔行间距与列间距"></a> grid-gap属性：设置行之间、列之间的间隔(行间距与列间距)</h4><ul><li>使用<code>grid-column-gap</code>与<code>grid-row-gap</code>分别设置列间距与行间距。</li><li>两个属性可以合写成<code>grid-gap: 行间距 列间距;</code>的形式。</li></ul><h4 id="grid-template-areas属性设置网格中的区域"><a class="markdownIt-Anchor" href="#grid-template-areas属性设置网格中的区域"></a> grid-template-areas属性：设置网格中的区域</h4><ul><li>一个 <strong>区域(area)</strong> 可以包括多个单元格，每个区域对应单独的一个板块。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">grid-template-rows</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">grid-template-areas</span>: <span class="hljs-string">&#x27;a b c&#x27;</span><br>                       <span class="hljs-string">&#x27;d e f&#x27;</span><br>                       <span class="hljs-string">&#x27;g h i&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在上面的示例中，定义了3*3的网络布局，将九个单元格分配给了九个区域。</li><li>若写成<code>grid-template-areas: 'a a a' 'b b b' 'c c c';</code>，会将Grid布局划分成三个区域，每个区域占据同一行的三个单元格。</li><li>若存在不需要使用的单元格，在<code>grid-templlate-areas</code>属性中使用<code>.</code>号进行置空，如<code>grid-template-areas: 'a . a' 'b . b' 'c . c';</code>,这样中间的一列就不会被分配给任何一个区域。</li><li>区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为<strong>区域名-start</strong>，终止网格线自动命名为<strong>区域名-end</strong>。</li></ul><h4 id="grid-auto-flow属性指定先行后列还是先列后行"><a class="markdownIt-Anchor" href="#grid-auto-flow属性指定先行后列还是先列后行"></a> grid-auto-flow属性：指定先行后列还是先列后行</h4><ul><li>格式：<code>grid-auto-flow: row(先行后列，默认) | column(先列后行);</code></li><li>此属性还可以设置成<code>row dense</code>和<code>column dense</code>，用于指定项目的放置方式：</li></ul><table><thead><tr><th style="text-align:center">grid-auto-flow属性值</th><th>row</th><th>row dense</th><th>column dense</th></tr></thead><tbody><tr><td style="text-align:center">描述</td><td>默认的先行后列布局</td><td>后面较小的网格项会自动“回填”前面的空白，优先填充前面的行。</td><td>如果某列有空白，后面较小的网格项会自动“回填”前面的空白，优先填充前面的列。</td></tr><tr><td style="text-align:center">布局效果</td><td><img src="20250512074248914.png" alt="" /></td><td><img src="20250512074342139.png" alt="" /></td><td><img src="20250512074413862.png" alt="" /></td></tr></tbody></table><h4 id="justify-items属性-align-items属性-place-items属性设置单元格内容的水平位置与垂直位置"><a class="markdownIt-Anchor" href="#justify-items属性-align-items属性-place-items属性设置单元格内容的水平位置与垂直位置"></a> justify-items属性、align-items属性、place-items属性：设置单元格内容的水平位置与垂直位置</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br><span class="hljs-comment">/*起点对齐 | 终点对齐 | 居中对齐 | 两端对齐*/</span><br><span class="hljs-attribute">justify-items</span>: start | end | center | stretch;<br><span class="hljs-attribute">align-items</span>: start | end | center | stretch;<br><span class="hljs-comment">/*合并简写形式*/</span><br><span class="hljs-attribute">place-items</span>: &lt;align-items&gt; &lt;justify-items&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="justify-content属性-align-content属性-place-content属性整个内容区域在容器中的水平位置与垂直位置"><a class="markdownIt-Anchor" href="#justify-content属性-align-content属性-place-content属性整个内容区域在容器中的水平位置与垂直位置"></a> justify-content属性、align-content属性、place-content属性：整个内容区域在容器中的水平位置与垂直位置</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br><span class="hljs-attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;<br><span class="hljs-attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;<br>  <span class="hljs-comment">/*合并简写形式*/</span><br>  <span class="hljs-attribute">place-content</span>: &lt;align-content&gt; &lt;justify-content&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><p>属性取值(以justify-content为例)的说明：</p><table><thead><tr><th>属性值</th><th>start</th><th>end</th><th>center</th><th>stretch</th><th>space-around</th><th>space-between</th><th>space-evenly</th></tr></thead><tbody><tr><td>描述</td><td>对齐起点，默认</td><td>对齐终点</td><td>居中对齐</td><td>拉伸并占满宽度</td><td>分散对齐，两端间距减半</td><td>分散对齐，两边紧贴</td><td>分散对齐，间距相同</td></tr><tr><td>图示效果</td><td><img src="20250512082542274.png" alt="" /></td><td><img src="20250512082547395.png" alt="" /></td><td><img src="20250512082553724.png" alt="" /></td><td><img src="20250512082600882.png" alt="" /></td><td><img src="20250512082904959.png" alt="" /></td><td><img src="20250512082844649.png" alt="" /></td><td><img src="20250512082854955.png" alt="" /></td></tr></tbody></table><h4 id="grid-auto-columns属性-grid-auto-rows属性指定浏览器自动创建多余的单元格来容纳在现有网格外部的项目"><a class="markdownIt-Anchor" href="#grid-auto-columns属性-grid-auto-rows属性指定浏览器自动创建多余的单元格来容纳在现有网格外部的项目"></a> grid-auto-columns属性、grid-auto-rows属性：指定浏览器自动创建多余的单元格，来容纳在现有网格外部的项目</h4><p><img src="20250512083905557.png" alt="" /></p><h4 id="grid-template属性-grid-属性是一些grid属性的简写会降低可读性不推荐使用"><a class="markdownIt-Anchor" href="#grid-template属性-grid-属性是一些grid属性的简写会降低可读性不推荐使用"></a> grid-template属性、grid-属性：是一些grid属性的简写，会降低可读性，不推荐使用。</h4><h3 id="4-项目属性设置在项目上-2"><a class="markdownIt-Anchor" href="#4-项目属性设置在项目上-2"></a> ④ 项目属性(设置在项目上)</h3><h4 id="grid-column-start属性-grid-column-end属性-grid-row-start属性-grid-row-end属性设置-项目的单元格范围"><a class="markdownIt-Anchor" href="#grid-column-start属性-grid-column-end属性-grid-row-start属性-grid-row-end属性设置-项目的单元格范围"></a> grid-column-start属性、grid-column-end属性、grid-row-start属性、grid-row-end属性：设置 项目的单元格范围</h4><ul><li>这些属性可以用于控制单元格的起始行列与结束行列，实现项目跨越单元格(占据多个单元格)的布局。</li><li>设置为数值时，表示网格线的编号(从1开始)，即若行设置为4-6，列设置为2-5，面积为(6-4)*(5-4) = 2*3 = 6</li><li>如上图中的<code>item8</code>与<code>item9</code>，位置在九个单元格以外就是通过这些属性控制的：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item-8</span> &#123;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#d0e4a9</span>;<br><span class="hljs-attribute">grid-row-start</span>: <span class="hljs-number">4</span>;                <span class="hljs-comment">/* 第八个项目从第四行，第二列开始 */</span><br><span class="hljs-attribute">grid-column-start</span>: <span class="hljs-number">2</span>;             <span class="hljs-comment">/* 无end属性,默认只占一格单元格,面积为1 */</span><br><span class="hljs-comment">/* grid-row-end: 6; 若设置此属性，会纵跨两个单元格，占据第四行到第五行的区域，面积变为1*2 = 2 */</span><br><span class="hljs-comment">/* grid-column-end: 5; 若设置此属性，会横跨两个三元格，占据第二列到第四列的区域，面积变为3*2 = 6 */</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>若项目出现重叠，可以通过<code>z-index</code>属性调整层级关系。</li><li>属性值可以是数值，也可以是网格线的名称，如<code>grid-column-start: header-start;</code></li><li>可以使用<code>span</code>关键字，设置项目的跨越单元格，如<code> grid-column-start: span 2;</code>，表示项目横跨两列。</li></ul><h4 id="grid-column属性-grid-row属性上面四个属性的简写形式"><a class="markdownIt-Anchor" href="#grid-column属性-grid-row属性上面四个属性的简写形式"></a> grid-column属性、grid-row属性：上面四个属性的简写形式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">grid-column</span>: &lt;start-line&gt; / &lt;end-line&gt;;<br>  <span class="hljs-attribute">grid-row</span>: &lt;start-line&gt; / &lt;end-line&gt;;<br>&#125;<br><br><span class="hljs-comment">/* 示例：一个2*2的项目 */</span><br><span class="hljs-selector-class">.item-1</span> &#123;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">1</span> / <span class="hljs-number">3</span>;  <span class="hljs-comment">/* 也可以写成 grid-column: 1 / span 2; */</span><br>  <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">1</span> / <span class="hljs-number">3</span>;     <span class="hljs-comment">/* 也可以写成 grid-row: 1 / span 2; */</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="grid-area属性指定项目放在哪一个区域"><a class="markdownIt-Anchor" href="#grid-area属性指定项目放在哪一个区域"></a> grid-area属性：指定项目放在哪一个区域</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item-1</span> &#123;<br><span class="hljs-comment">/*容器设置了grid-template-areas: &#x27;a b c&#x27; &#x27;d e f&#x27; &#x27;g h i&#x27;的属性; */</span><br><span class="hljs-attribute">grid-area</span>: e;    <span class="hljs-comment">/* 对应上面编号为e的区域，分布在第二行第二列的单元格 */</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>此属性也可作为<code>grid-row-start</code>等四个属性的简写，格式为<code>grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</code><ul><li>例：<code>grid-area: 1 / 1 / 3 / 3;</code></li></ul></li></ul><h4 id="justify-self属性-align-self属性-place-self属性"><a class="markdownIt-Anchor" href="#justify-self属性-align-self属性-place-self属性"></a> justify-self属性、align-self属性、place-self属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br><span class="hljs-comment">/*起点对齐 | 终点对齐 | 居中对齐 | 两端对齐*/</span><br><span class="hljs-attribute">justify-self</span>: start | end | center | stretch;<br><span class="hljs-attribute">align-self</span>: start | end | center | stretch;<br><span class="hljs-comment">/* 简写成place-self属性 */</span><br><span class="hljs-attribute">place-self</span>: &lt;align-self&gt; &lt;justify-self&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5常见网页版式"><a class="markdownIt-Anchor" href="#5常见网页版式"></a> 5.常见网页版式</h2><table><thead><tr><th>版式</th><th>单栏版式</th><th>双栏版式</th><th>三栏版式</th><th>综合版式(1+2+1)</th><th>综合版式(1+3+1)</th></tr></thead><tbody><tr><td>图示</td><td><img src="20250512094504626.png" alt="" /></td><td><img src="20250512094521485.png" alt="" /></td><td><img src="20250512094606474.png" alt="" /></td><td><img src="20250512094849246.png" alt="" /></td><td><img src="20250512095017107.png" alt="" /></td></tr></tbody></table><h2 id="6响应式布局"><a class="markdownIt-Anchor" href="#6响应式布局"></a> 6.响应式布局</h2><h3 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> ① 概述</h3><blockquote><p><strong>响应式设计(Responsive Web Design, RWD)</strong> 是一种网页开发方法，使网站能够<strong>自动适应不同屏幕尺寸的设备（PC、平板、手机等）</strong>，提供最佳浏览体验。<br />响应式设计 = <strong>弹性布局 + 媒体查询 + 移动优先 + 灵活媒体</strong>，确保网站在任何设备上都能完美展现，能实现<strong>一套代码适配所有设备</strong>，降低维护成本；同时<strong>提升用户体验</strong>，避免手机端缩放、滚动问题；并且<strong>SEO友好</strong>，便于搜索引擎快速检索网页信息。</p></blockquote><h3 id="2-弹性布局"><a class="markdownIt-Anchor" href="#2-弹性布局"></a> ② 弹性布局</h3><ul><li>使用 <strong>弹性网格(Flex布局/Grid布局)</strong> 和 <strong>百分比宽度</strong> 替代固定像素布局，多使用相对单位进行布局。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>; <span class="hljs-comment">/* 宽度自适应 */</span><br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1200px</span>; <span class="hljs-comment">/* 最大宽度限制 */</span><br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto; <span class="hljs-comment">/* 居中 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3视口"><a class="markdownIt-Anchor" href="#3视口"></a> ③视口</h3><ul><li>视口即<strong>浏览器显示页面内容的屏幕区域</strong>,一般认为是浏览器的窗口大小。</li><li>通过设置视口大小，无论网页原始的分辨率如何，都能将其缩小显示在移动端的浏览器上，避免出现很长的滚动条。</li><li>在移动端浏览器中，存在三种视口：<strong>布局视口(layout viewport)、视觉视口(visual viewport)与理想视口(ideal viewport)</strong>。</li></ul><h4 id="布局视口网页文件实际的尺寸"><a class="markdownIt-Anchor" href="#布局视口网页文件实际的尺寸"></a> 布局视口(网页文件实际的尺寸)</h4><p><img src="20250512102506430.png" alt="" /></p><ul><li>布局视口指整个文件的内容，与文档的宽度相关。</li><li>在移动设备上，为了避免桌面网页在小屏幕上显示过小，通常会默认设置一个宽布局视口（768px、980px、1024px等）。</li><li>通过<code>&lt;meta name=&quot;viewport&quot;&gt;</code>标签设置布局视口的宽度，例如width=device-width将其设置为设备屏幕的宽度。</li><li>布局视口决定了CSS像素的渲染范围，影响元的排列和缩放。</li></ul><h4 id="视觉视口设备屏幕的尺寸"><a class="markdownIt-Anchor" href="#视觉视口设备屏幕的尺寸"></a> 视觉视口(设备屏幕的尺寸)</h4><p><img src="20250512102521290.png" alt="" /></p><ul><li>视觉视口是用户在屏幕上实际看到的区域，也就是浏览器窗口中显示的内容范围。</li><li>大小通常与设备屏幕的像素尺寸相关，且会随着用户的缩放而改变。</li><li>例如，放大页面时，视觉视口变小，显示的布局视口内容减少；缩小页面时，视觉视口变大，显示更多内容。</li><li>反映用户当前的可见区域，与缩放操作直接相关。</li></ul><h4 id="理想视口"><a class="markdownIt-Anchor" href="#理想视口"></a> 理想视口</h4><ul><li>理想视口是设备的最佳视口尺寸，通常等于设备的屏幕宽度（以设备独立像素为单位）。</li><li>用于让网页在移动设备上以最自然、最舒适的方式显示。</li><li>通过设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code>，可以让布局视口匹配理想视口，避免页面缩放或水平滚动。</li><li>可以为移动端优化页面，提供最佳用户体验。</li></ul><h4 id="视口的设置"><a class="markdownIt-Anchor" href="#视口的设置"></a> 视口的设置</h4><ul><li>通用格式：<code>&lt;meta name=&quot;viewport&quot; content=&quot;属性1 = 值1, 属性2 = 值2, …&quot;&gt;</code><ul><li><code>name</code>属性值为<code>viewport</code>，表明此标签用于设置视口</li><li><code>content</code>属性用于设定布局视口的相关属性：<ul><li><code>width</code>: 用于设定布局视口的宽度，属性值为正整数(px)或<code>device-width</code>;设置为后者时，布局视口的宽度等于屏幕宽度(即理想视口)。</li><li><code>height</code>: 用户设定布局视口的高度，属性值为正整数(px)或<code>device-height</code>;设置为后者时，布局视口的高度等于屏幕高度(即理想视口)。</li><li><code>user-scalable</code>: 是否允许手动缩放，默认为<code>yes</code>，可设置为<code>no</code>。</li><li><code>initial-scale</code>: 网页初始缩放值，取值范围0.0 ~ 10.0，一般取1.0，表示网页的原大小。</li><li><code>maximum-scale</code>: 设置缩放的最大比例，取值范围0.0 ~ 10.0</li><li><code>minimum-scale</code>: 设置缩放的最小比例，取值范围0.0 ~ 10.0</li></ul></li></ul></li></ul><h3 id="4-媒体查询"><a class="markdownIt-Anchor" href="#4-媒体查询"></a> ④ 媒体查询</h3><ul><li>用于根据设备的特性（如屏幕宽度、分辨率、方向等）应用不同的样式，以实现响应式设计。</li><li>通过@media规则，检测设备的特定条件（如min-width、max-width、屏幕方向等），然后应用对应的CSS样式，常用于适配不同屏幕尺寸的设备。</li><li>语法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> 媒体类型 <span class="hljs-keyword">and</span> | <span class="hljs-keyword">not</span> | <span class="hljs-keyword">only</span> (条件) &#123; <span class="hljs-comment">/* CSS样式 */</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>参数说明：<ul><li>媒体类型：取值有<code>all</code>(所有设备)、<code>screen</code>(电脑屏幕)、<code>print</code>(打印机)、<code>speech</code>(屏幕阅读器)</li><li>条件常用取值：<code>max-width、min-width</code>、<code>max-device-width</code>、<code>min-device-width</code>等</li></ul></li></ul><p>例：当输出设备中的页面最大可见区域宽度为900px时，body元素背景颜色切换为蓝色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">900px</span>) &#123;<br><span class="hljs-selector-tag">body</span>&#123;<br><span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在实际网页制作中，通常根据不同的屏幕宽度创建不同的样式表文件，然后在网页头部标签中添加<code>&lt;link&gt;</code>标签，使网页根据屏幕宽度响应式加载不同的样式文件, 语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;媒体类型 and | not | only (条件)&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;CSS文件路径&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>备注：使用<code>&lt;meta&gt;</code>标签的<code>media</code>属性让网页加载新的样式表文件时，可能需要对某些元素重复设置样式，应该尽量使用优先级较高的选择器，减少通配符或者大范围选择器的使用。</p><h3 id="5-其他技巧"><a class="markdownIt-Anchor" href="#5-其他技巧"></a> ⑤ 其他技巧</h3><h4 id="为元素设置最大尺寸防止溢出"><a class="markdownIt-Anchor" href="#为元素设置最大尺寸防止溢出"></a> 为元素设置最大尺寸，防止溢出</h4><ul><li>为图片设置<code>max-width: 100%; height: auto;</code>的属性，防止大小超过容器或父元素的区域</li><li>为移动端横屏与竖屏应用不同的样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 手机端或竖屏的样式 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">767px</span>) &#123;<br>  <span class="hljs-selector-class">.menu</span> &#123; <span class="hljs-attribute">display</span>: none; &#125; <span class="hljs-comment">/* 小屏幕隐藏菜单 */</span><br>&#125;<br><br><span class="hljs-comment">/* 平板端或横屏的样式 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">1023px</span>) &#123;<br>  <span class="hljs-selector-class">.sidebar</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">30%</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h1 id="五-css3变形"><a class="markdownIt-Anchor" href="#五-css3变形"></a> 五、CSS3变形</h1><blockquote><p>早期的CSS无法实现变形效果，只能通过JavaScript实现。CSS3中新增了<code>transform</code>属性用于设置元素的2D和3D变形效果。</p></blockquote><ul><li>具体格式：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: none | transform-functions<br></code></pre></td></tr></table></figure><ul><li>默认值为<code>none</code>(无变形效果)，<code>transform-functions</code>表示变形方法，用于设置元素的2D或3D变形效果</li><li>变形方法可以有多个，用空格隔开。</li></ul><h2 id="12d变形"><a class="markdownIt-Anchor" href="#12d变形"></a> 1.2D变形</h2><h4 id="1-概述-2"><a class="markdownIt-Anchor" href="#1-概述-2"></a> ① 概述</h4><ul><li>以元素中心为原点创建一个平面直角坐标系，取右下方为正方向，2D变形主要有四种方法：<strong>平移、缩放、旋转和倾斜</strong>。<br /><img src="20250512193100490.png" alt="" /></li></ul><h4 id="2-平移translate方法"><a class="markdownIt-Anchor" href="#2-平移translate方法"></a> ② 平移：translate()方法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(x轴偏移量, y轴偏移量);<br></code></pre></td></tr></table></figure><ul><li>参数可以为正值与负值，单位可以取<code>px</code>等绝对单位，也可以是<code>%</code>等相对单位。</li><li>若只设置一个参数，y轴偏移量默认为0。</li></ul><h4 id="3-缩放scale方法"><a class="markdownIt-Anchor" href="#3-缩放scale方法"></a> ③ 缩放：scale()方法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(宽度缩放倍数, 高度缩放倍数);<br></code></pre></td></tr></table></figure><ul><li>参数值大于1表示放大，小于1表示缩小。</li><li>若只设置一个参数，表示宽高以相同倍数缩放。</li><li>参数为负时，元素会有翻转效果。</li></ul><h4 id="4-旋转rotate方法"><a class="markdownIt-Anchor" href="#4-旋转rotate方法"></a> ④ 旋转：rotate()方法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(旋转角度);<br></code></pre></td></tr></table></figure><ul><li>旋转角度以<code>°</code>为单位，正值表示顺时针旋转，负值表示逆时针旋转。</li></ul><h4 id="5-倾斜skew方法"><a class="markdownIt-Anchor" href="#5-倾斜skew方法"></a> ⑤ 倾斜：skew()方法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(y轴倾斜角度, x轴倾斜角度);<br></code></pre></td></tr></table></figure><ul><li>与旋转方法的参数规则相同，以<code>°</code>为单位，正顺负逆。</li><li>若只设置一个值，元素绕y轴倾斜，第二个值默认为0。<br /><img src="20250512194434661.png" alt="" /></li></ul><h3 id="6-2d变形效果图示"><a class="markdownIt-Anchor" href="#6-2d变形效果图示"></a> ⑥ 2D变形效果图示</h3><p><img src="20250512194917256.png" alt="" /></p><h2 id="23d变形"><a class="markdownIt-Anchor" href="#23d变形"></a> 2.3D变形</h2><h3 id="1-概述-3"><a class="markdownIt-Anchor" href="#1-概述-3"></a> ① 概述</h3><ul><li>以元素中心为原点，创建三维直角坐标系</li><li>3D变形主要沿元素的<code>x,y,z</code>三轴进行变化</li><li>3D变形主要有三种，分别为<strong>平移、缩放与旋转</strong>。<br /><img src="20250512200903849.png" alt="" /></li></ul><h3 id="2-平移translate3d方法"><a class="markdownIt-Anchor" href="#2-平移translate3d方法"></a> ② 平移：translate3d()方法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(x轴偏移量, y轴偏移量, z轴偏移量);<br></code></pre></td></tr></table></figure><ul><li>x、y轴上的偏移量可以为百分比，但是z轴不允许设置百分比单位。三个值均可取负。</li><li>z轴偏移量越大，元素看起来越靠近浏览者，反之则相反。</li></ul><h3 id="3-缩放scale3d方法"><a class="markdownIt-Anchor" href="#3-缩放scale3d方法"></a> ③ 缩放：scale3d()方法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">Scale3d</span>(x方向缩放比例, y方向缩放比例, z方向缩放比例);<br></code></pre></td></tr></table></figure><ul><li>参数值大于1表示放大，小于1表示缩小。</li><li>若只设置一个参数，表示宽高以相同倍数缩放。</li><li>参数为负时，元素会有翻转效果。</li></ul><h3 id="4-旋转rotatex方法-rotatey方法-rotatez方法"><a class="markdownIt-Anchor" href="#4-旋转rotatex方法-rotatey方法-rotatez方法"></a> ④ 旋转：rotateX()方法、rotateY()方法、rotateZ()方法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateX</span>(x轴旋转角度, y轴旋转角度, z轴旋转角度) ;<br></code></pre></td></tr></table></figure><ul><li>旋转角度以<code>°</code>为单位，正值表示顺时针旋转，负值表示逆时针旋转。</li></ul><h3 id="5-3d变形效果图示"><a class="markdownIt-Anchor" href="#5-3d变形效果图示"></a> ⑤ 3D变形效果图示</h3><p><img src="20250512201644433.png" alt="" /></p><blockquote><p>“设置3D变形时，—般需要为设置变形的元素的父元素设置透视属性(perspective)。透视是绘画理论术语，是在平面上根据一定原理用线条来显示物体的空间位置、轮廓和 投影的科学，根据透视关系能够绘制出带有空间结构的透视图，生活中常说的‘近大远 小’就是其中的一个简单的原理。CSS3中的透视属性可以理解为设置‘近大远小’的程度，属性值越小靠近人眼的一侧就显示得越大，一般设置为300px。该属性的默认属性值为0，即不显示透视，此时3D变形效果类似于2D变形效果。” ——《Web前端技术》P184</p></blockquote><hr /><h1 id="六-css3过渡"><a class="markdownIt-Anchor" href="#六-css3过渡"></a> 六、CSS3过渡</h1><h2 id="1过渡的相关属性"><a class="markdownIt-Anchor" href="#1过渡的相关属性"></a> 1.过渡的相关属性</h2><h3 id="1-transition-property属性过渡属性"><a class="markdownIt-Anchor" href="#1-transition-property属性过渡属性"></a> ① transition-property属性：过渡属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition-property</span>: none | all | property;<br></code></pre></td></tr></table></figure><ul><li><code>none</code>:默认值，不使用过渡效果。</li><li><code>all</code>:为所有属性设置过渡效果。</li><li><code>property</code>:应用过渡效果的具体属性名称，多个值之间用空格隔开。</li></ul><h3 id="2-transition-duration属性过渡时间"><a class="markdownIt-Anchor" href="#2-transition-duration属性过渡时间"></a> ② transition-duration属性：过渡时间</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition-duration</span>: 过渡时间;<br></code></pre></td></tr></table></figure><ul><li>取值一般为过渡的时间，以秒(s)或毫秒(ms)为单位，默认值为0。</li><li>若不设置过渡的时间，会直接显示变形的最终效果，变形的过程几乎看不到。</li></ul><h3 id="3-transition-timing-function属性过渡速度曲线"><a class="markdownIt-Anchor" href="#3-transition-timing-function属性过渡速度曲线"></a> ③ transition-timing-function属性：过渡速度曲线</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition-timing-function</span>: liner | ease | ease-in | ease-out | ease-in-out | <span class="hljs-built_in">cubic-bezier</span>(n, n, n, n);<br></code></pre></td></tr></table></figure><ul><li><code>liner</code>：线性过渡，即<strong>匀速</strong>进行过渡。</li><li><code>ease</code>：平滑过渡，<strong>慢-快-慢</strong>的过渡效果，类似汽车<strong>快速启动-逐渐减速</strong>过程，适合<strong>快速响应</strong>(如按钮悬停)的过渡场景。</li><li><code>ease-in</code>：<strong>慢-快</strong>的过渡效果。</li><li><code>ease-out</code>：<strong>快-慢</strong>的过渡效果。</li><li><code>ease-in-out</code>：<strong>慢-快-慢</strong>的过渡效果，类似于垂直电梯的<strong>缓慢启动-匀速上升-缓慢减速</strong>过程，适合<strong>平滑连贯</strong>(如页面切换)的过渡场景。</li><li><code>cubic-bezier(n, n, n, n)</code>：贝赛尔曲线,用于精确控制过渡效果的曲线，<code>n</code>取值范围为0 ~ 1。</li></ul><h4 id="在chrome的f12开发人员工具中调整贝赛尔曲线"><a class="markdownIt-Anchor" href="#在chrome的f12开发人员工具中调整贝赛尔曲线"></a> 在Chrome的F12开发人员工具中调整贝赛尔曲线：</h4><ol><li>打开开发人员工具中的贝赛尔曲线编辑器：<br /><img src="20250512214550419.png" alt="" /></li><li>在编辑器中调整速度曲线或者使用下方的一些预设进一步微调<br /><img src="20250512214717163.png" alt="" /></li><li>调节完成后，关闭编辑器窗口并将新的<code>cubic-bezier</code>属性值粘贴到源文件，完成速度曲线的修改。</li></ol><h3 id="4-transition-delay属性延迟时间"><a class="markdownIt-Anchor" href="#4-transition-delay属性延迟时间"></a> ④ transition-delay属性：延迟时间</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition-delay</span>: 延迟时间;<br></code></pre></td></tr></table></figure><ul><li>取值一般为延迟的时间值，以秒(s)或毫秒(ms)为单位，默认值为0。</li><li>设定为负值时，会截断过渡时间开头的一部分。如<code>duration</code>设置为<code>5s</code>，<code>delay</code>设置为<code>-2s</code>时，过渡效果会在触发后延迟2s，并从动画的第二秒开始过渡。</li></ul><h3 id="5-transition属性综合声明上述各个属性"><a class="markdownIt-Anchor" href="#5-transition属性综合声明上述各个属性"></a> ⑤ transition属性：综合声明上述各个属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition</span>: property值 duration值 timing-function值 delay值;<br></code></pre></td></tr></table></figure><ul><li>属性值的顺序不可颠倒，每组属性值用逗号隔开。</li></ul><h2 id="2过渡的触发方式"><a class="markdownIt-Anchor" href="#2过渡的触发方式"></a> 2.过渡的触发方式</h2><blockquote><p>在CSS中，常通过鼠标事件触发过渡效果，如单机按钮、指针悬浮、指针经过等，用于提高网页的美观程度与可交互性。</p></blockquote><ul><li>结合<strong>伪类选择器</strong> <code>:hover</code>(悬停/经过)、<code>:active</code>(点击并按住)、<code>:focus</code>(获得焦点)、<code>:checked</code>(表单控件选中) 设定元素在特定情况下的过渡效果</li><li>使用<strong>媒体查询</strong>触发过渡效果，如下所示：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"> <span class="hljs-comment">/* 屏幕最大宽度为420px时触发动画 */</span><br><span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">420px</span>;) &#123;  <br><span class="hljs-selector-tag">div</span> &#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">transition</span>: width is;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h1 id="七-css3动画"><a class="markdownIt-Anchor" href="#七-css3动画"></a> 七、CSS3动画</h1><blockquote><p>使用<code>transition</code>属性只能通过设置开始与结束的过渡效果，无法精准控制过渡中途的效果。<br />通过CSS3动画的<strong>关键帧</strong>可以制作变化多样的动画效果。</p></blockquote><h2 id="1关键帧"><a class="markdownIt-Anchor" href="#1关键帧"></a> 1.关键帧</h2><ul><li>使用<code>@keyframes</code>规则定义关键帧，格式如下：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> 动画名称 &#123; 时间位置&#123; CSS样式 &#125; &#125;<br></code></pre></td></tr></table></figure><ul><li>时间位置即动画时长的百分比，取值为1% ~ 100%，也可以使用<code>from</code>关键字(表示0%)、<code>to</code>关键字(表示100%)表示。</li></ul><h2 id="2动画的相关属性"><a class="markdownIt-Anchor" href="#2动画的相关属性"></a> 2.动画的相关属性</h2><h3 id="1-animation-name属性设置动画的名称"><a class="markdownIt-Anchor" href="#1-animation-name属性设置动画的名称"></a> ① animation-name属性：设置动画的名称</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-name</span>: 名称 | none;<br></code></pre></td></tr></table></figure><ul><li>参数为动画的名称，对应想要应用的<code>@keyframes</code>动画名称。</li><li>参数为<code>none</code>时，表示不应用或取消此动画。</li></ul><h3 id="2-animation-duration属性设置动画的时间"><a class="markdownIt-Anchor" href="#2-animation-duration属性设置动画的时间"></a> ② animation-duration属性：设置动画的时间</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">aimation-duration: 时间值;<br></code></pre></td></tr></table></figure><ul><li>取值以秒(s)或毫秒(ms)为单位，默认值为0。</li></ul><h3 id="3-animation-timing-function属性设置动画的速度曲线"><a class="markdownIt-Anchor" href="#3-animation-timing-function属性设置动画的速度曲线"></a> ③ animation-timing-function属性：设置动画的速度曲线</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-timing-function</span>: liner | ease | ease-in | ease-out | ease-in-out | <span class="hljs-built_in">cubic-bezier</span>(n, n, n, n);<br></code></pre></td></tr></table></figure><ul><li><code>liner</code>：线性过渡，即<strong>匀速</strong>进行过渡。</li><li><code>ease</code>：平滑过渡，<strong>慢-快-慢</strong>的过渡效果，类似汽车<strong>快速启动-逐渐减速</strong>过程，适合<strong>快速响应</strong>(如按钮悬停)的过渡场景。</li><li><code>ease-in</code>：<strong>慢-快</strong>的过渡效果。</li><li><code>ease-out</code>：<strong>快-慢</strong>的过渡效果。</li><li><code>ease-in-out</code>：<strong>慢-快-慢</strong>的过渡效果，类似于垂直电梯的<strong>缓慢启动-匀速上升-缓慢减速</strong>过程，适合<strong>平滑连贯</strong>(如页面切换)的过渡场景。</li><li><code>cubic-bezier(n, n, n, n)</code>：贝赛尔曲线,用于精确控制过渡效果的曲线，<code>n</code>取值范围为0 ~ 1。</li></ul><h4 id="此属性还可以设置为steps帧数-start-end方法用于设置两个关键帧之间插入多少帧补间动画"><a class="markdownIt-Anchor" href="#此属性还可以设置为steps帧数-start-end方法用于设置两个关键帧之间插入多少帧补间动画"></a> 此属性还可以设置为<code>steps(帧数, start | end)</code>方法，用于设置两个关键帧之间插入多少帧<strong>补间动画</strong></h4><ul><li><code>satrt</code>表示最后一帧是补间动画的开始，<code>end</code>表示第一帧是补间动画的开始。</li><li>不使用<code>steps</code>方法时，浏览器自动设置补间动画。</li></ul><h3 id="4-animation-delay属性设置动画的延迟时间"><a class="markdownIt-Anchor" href="#4-animation-delay属性设置动画的延迟时间"></a> ④ animation-delay属性：设置动画的延迟时间</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-delay</span>: 时间值;<br></code></pre></td></tr></table></figure><ul><li>取值一般为延迟的时间值，以秒(s)或毫秒(ms)为单位，默认值为0。</li><li>设定为负值时，会截断过渡时间开头的一部分。如<code>duration</code>设置为<code>5s</code>，<code>delay</code>设置为<code>-2s</code>时，过渡效果会在触发后延迟2s，并从动画的第二秒开始过渡。</li></ul><h3 id="5-animation-iteration-count属性设置动画的播放次数"><a class="markdownIt-Anchor" href="#5-animation-iteration-count属性设置动画的播放次数"></a> ⑤ animation-iteration-count属性：设置动画的播放次数</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-iteration-count</span>: 播放次数 | infinite;<br></code></pre></td></tr></table></figure><ul><li>播放次数默认为1。</li><li>设置为<code>infinite</code>关键字实现循环播放。</li></ul><h3 id="6-animation-direction属性设置动画的播放方向"><a class="markdownIt-Anchor" href="#6-animation-direction属性设置动画的播放方向"></a> ⑥ animation-direction属性：设置动画的播放方向</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-direction</span>: normal | alternate;<br></code></pre></td></tr></table></figure><ul><li><code>noraml</code>:默认值，表示正常播放。</li><li><code>alternate</code>:动画先正常播放，然后倒放一遍，并按此规律循环播放(&quot;折返跑&quot;效果)。</li></ul><h3 id="7-animation-play-state属性设置动画的播放状态"><a class="markdownIt-Anchor" href="#7-animation-play-state属性设置动画的播放状态"></a> ⑦ animation-play-state属性：设置动画的播放状态</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-play-state</span>: paused | running;<br></code></pre></td></tr></table></figure><h3 id="8-animation-fill-mode属性设置动画不播放时的状态"><a class="markdownIt-Anchor" href="#8-animation-fill-mode属性设置动画不播放时的状态"></a> ⑧ animation-fill-mode属性：设置动画不播放时的状态</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-fill-mode</span>: none | <span class="hljs-built_in">forwards</span>(保持结束状态) | <span class="hljs-built_in">backwards</span>(保持初始状态) | <span class="hljs-built_in">both</span>(播放前保持初始，播放后保持结束);<br></code></pre></td></tr></table></figure><h2 id="3基于图片的动画效果"><a class="markdownIt-Anchor" href="#3基于图片的动画效果"></a> 3.基于图片的动画效果</h2><h3 id="1-原理"><a class="markdownIt-Anchor" href="#1-原理"></a> ① 原理</h3><ul><li>类似于<strong>胶片电影</strong>的原理，将动画逐帧切割后的图片排成一行，组成一个很宽的图片列；</li><li>通过控制图片的位置，使其在容器中每过一小段时间显示下一帧的内容；</li><li>最后应用循环效果，实现动画的逐帧播放。</li></ul><h3 id="2-示例"><a class="markdownIt-Anchor" href="#2-示例"></a> ② 示例</h3><ul><li>动画素材：<br /><img src="20250512223737976.png" alt="" /></li><li>网页源码：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>动画示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* 定义 diV 容器的样式 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">125px</span>;           <span class="hljs-comment">/* 容器宽度 */</span></span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">125px</span>;          <span class="hljs-comment">/* 容器高度 */</span></span><br><span class="language-css"><span class="hljs-attribute">margin-left</span>: <span class="hljs-number">50px</span>;      <span class="hljs-comment">/* 左外边距（水平定位） */</span></span><br><span class="language-css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;       <span class="hljs-comment">/* 上外边距（垂直定位） */</span></span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img/bgp.jpg</span>) no-repeat <span class="hljs-number">0</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">/* 背景图片（不重复，初始位置 0 0） */</span></span><br><span class="language-css"><span class="hljs-attribute">animation</span>: move <span class="hljs-number">1s</span> <span class="hljs-built_in">steps</span>(<span class="hljs-number">8</span>, end) infinite;   <span class="hljs-comment">/* 应用动画：名称、时长、补间动画、循环播放 */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 定义关键帧动画 &quot;move&quot; */</span></span><br><span class="language-css"><span class="hljs-keyword">@keyframes</span> move &#123;</span><br><span class="language-css"><span class="hljs-number">0%</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;      <span class="hljs-comment">/* 动画起始状态：背景图位置为左上角 */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-number">100%</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">background-position</span>: -<span class="hljs-number">1000px</span> <span class="hljs-number">0</span>; <span class="hljs-comment">/* 动画结束状态：背景图向左移动 1000px（实现帧动画效果） */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 动画容器：通过背景图位移实现逐帧动画 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>实现效果：<br /><img src="sample.gif" alt="" /></li></ul><hr /><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>百度百科.CSS3[EB/OL].(2024-06-17)[2025-05-07]. <a href="https://baike.baidu.com/item/CSS3/4059544#reference-3">https://baike.baidu.com/item/CSS3/4059544#reference-3</a>.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>牧之 |.a与a:link、a:visited、a:hover、a:active[EB/OL].(2013-07-30)[2025-05-07]. <a href="https://www.cnblogs.com/exmyth/p/3226654.html">https://www.cnblogs.com/exmyth/p/3226654.html</a>.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>勤奋的夕阳一刀.CSS里面的长度单位px/pt/em/in/pc/mm/cm解释[EB/OL].(2015-10-07)[2025-05-08]. <a href="https://www.cnblogs.com/913815ccmm/p/4858638.html">https://www.cnblogs.com/913815ccmm/p/4858638.html</a>.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>阮一峰.Flex 布局教程：语法篇[EB/OL].(2015-07-10)[2025-05-10]. <a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>阮一峰.CSS Grid 网格布局教程[EB/OL].(2019-03-25)[2025-05-10]. <a href="https://ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">https://ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Web</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法与数据结构学习路线</title>
    <link href="/2025/05/07/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <url>/2025/05/07/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>声明：本篇笔记由Grok大模型生成</p></blockquote><hr /><h1 id="算法与数据结构学习路线"><a class="markdownIt-Anchor" href="#算法与数据结构学习路线"></a> 算法与数据结构学习路线</h1><h2 id="一-acm-icpc竞赛常见考点"><a class="markdownIt-Anchor" href="#一-acm-icpc竞赛常见考点"></a> 一、ACM-ICPC竞赛常见考点</h2><p>ACM-ICPC（国际大学生程序设计竞赛）等算法竞赛主要考察选手在有限时间内设计和实现高效算法的能力。以下是常见考点，涵盖数据结构、算法和相关技巧：</p><h3 id="1-基础数据结构"><a class="markdownIt-Anchor" href="#1-基础数据结构"></a> 1. 基础数据结构</h3><ul><li><strong>数组与字符串</strong>：数组操作、字符串匹配（KMP、Rabin-Karp）、正则表达式思想。</li><li><strong>栈与队列</strong>：单调栈、单调队列、表达式求值、括号匹配。</li><li><strong>链表</strong>：单/双向链表、链表反转、快慢指针。</li><li><strong>哈希表</strong>：哈希映射、冲突处理、字符串哈希。</li><li><strong>集合与映射</strong>：并查集（Union-Find）、平衡树（Treap、Splay）、红黑树基础。</li></ul><h3 id="2-高级数据结构"><a class="markdownIt-Anchor" href="#2-高级数据结构"></a> 2. 高级数据结构</h3><ul><li><strong>树</strong>：二叉树遍历、BST（二叉搜索树）、AVL树、线段树、树状数组（Fenwick Tree）。</li><li><strong>堆</strong>：优先队列、最小/最大堆、堆排序。</li><li><strong>图</strong>：邻接表/矩阵表示、并查集、Trie树（字典树）。</li><li><strong>高级结构</strong>：主席树（持久化线段树）、块状数组、树链剖分。</li></ul><h3 id="3-基础算法"><a class="markdownIt-Anchor" href="#3-基础算法"></a> 3. 基础算法</h3><ul><li><strong>排序与搜索</strong>：快速排序、归并排序、二分查找、双指针。</li><li><strong>贪心算法</strong>：区间调度、Huffman编码、最小生成树（Prim、Kruskal）。</li><li><strong>分治法</strong>：归并排序、快速幂、CDQ分治。</li><li><strong>动态规划（DP）</strong>：<ul><li>基础DP：背包问题（01背包、完全背包）、LCS（最长公共子序列）、LIS（最长递增子序列）。</li><li>进阶DP：状态压缩DP、树形DP、概率DP、区间DP。</li></ul></li><li><strong>枚举与模拟</strong>：全排列、DFS模拟、Flood Fill。</li></ul><h3 id="4-图论"><a class="markdownIt-Anchor" href="#4-图论"></a> 4. 图论</h3><ul><li><strong>基础图算法</strong>：<ul><li>DFS/BFS：连通性、拓扑排序、Flood Fill。</li><li>最短路径：Dijkstra、Bellman-Ford、Floyd-Warshall、SPFA。</li><li>最小生成树：Prim、Kruskal。</li></ul></li><li><strong>进阶图论</strong>：<ul><li>网络流：最大流（Dinic、EK）、最小割、费用流。</li><li>二分图：匈牙利算法、KM算法。</li><li>强连通分量：Tarjan、Kosaraju。</li><li>树上问题：LCA（最近公共祖先）、树链剖分、树DP。</li></ul></li></ul><h3 id="5-数学"><a class="markdownIt-Anchor" href="#5-数学"></a> 5. 数学</h3><ul><li><strong>数论</strong>：<ul><li>质数判定、欧几里得算法、扩展欧几里得。</li><li>模运算：快速幂、模逆元、CRT（中国剩余定理）。</li><li>组合数学：排列组合、Lucas定理、Catalan数。</li></ul></li><li><strong>线性代数</strong>：矩阵运算、高斯消元、矩阵快速幂。</li><li><strong>概率与期望</strong>：期望DP、概率计算。</li><li><strong>博弈论</strong>：SG函数、NIM游戏。</li></ul><h3 id="6-计算几何"><a class="markdownIt-Anchor" href="#6-计算几何"></a> 6. 计算几何</h3><ul><li><strong>基础几何</strong>：点、线、面、向量运算，叉积、点积。</li><li><strong>算法</strong>：<ul><li>凸包（Graham扫描、Andrew算法）。</li><li>线段相交、点到直线距离、多边形面积。</li><li>最近点对、旋转卡壳。</li></ul></li></ul><h3 id="7-其他技巧"><a class="markdownIt-Anchor" href="#7-其他技巧"></a> 7. 其他技巧</h3><ul><li><strong>位运算</strong>：异或、位掩码、状态压缩。</li><li><strong>离散化</strong>：坐标压缩、值域离散化。</li><li><strong>分块思想</strong>：数组分块、莫队算法。</li><li><strong>随机化算法</strong>：随机化贪心、模拟退火。</li><li><strong>交互题</strong>：与判题器交互、构造性问题。</li></ul><h2 id="二-学习路线"><a class="markdownIt-Anchor" href="#二-学习路线"></a> 二、学习路线</h2><p>以下是一条从零基础到ACM-ICPC竞赛水平的学习路线，分为四个阶段，建议根据个人进度调整时间（总计6-12个月）。</p><h3 id="阶段1编程基础与简单算法1-2个月"><a class="markdownIt-Anchor" href="#阶段1编程基础与简单算法1-2个月"></a> 阶段1：编程基础与简单算法（1-2个月）</h3><p>目标：掌握编程语言，熟悉基本算法和数据结构。</p><ul><li><strong>学习内容</strong>：<ul><li>选择一门语言（推荐C<ins>或Python，C</ins>因性能优势更适合竞赛）。</li><li>学习基本语法：变量、循环、条件语句、函数、指针（C++）。</li><li>掌握STL（C++）或内置库（Python）：vector、queue、stack、map、set、sort等。</li><li>学习基础算法：排序（快速排序、归并排序）、二分查找、简单模拟。</li><li>学习基础数据结构：数组、链表、栈、队列。</li></ul></li><li><strong>练习平台</strong>：<ul><li>LeetCode（简单题）、Codeforces（Div2 A题）、AtCoder（Beginner Contest A-B题）。</li><li>国内：洛谷（入门题）、牛客（基础题）。</li></ul></li><li><strong>推荐资源</strong>：<ul><li>《C++ Primer》（C++基础）。</li><li>LeetCode题目分类练习。</li><li>刷题目标：50-100道简单题，熟练使用STL。</li></ul></li></ul><h3 id="阶段2中级算法与数据结构2-3个月"><a class="markdownIt-Anchor" href="#阶段2中级算法与数据结构2-3个月"></a> 阶段2：中级算法与数据结构（2-3个月）</h3><p>目标：深入理解常见算法，掌握中级数据结构。</p><ul><li><strong>学习内容</strong>：<ul><li>算法：贪心、动态规划（01背包、LCS、LIS）、DFS/BFS、分治法。</li><li>数据结构：堆、并查集、线段树、树状数组、哈希表。</li><li>图论基础：DFS/BFS、最短路径（Dijkstra、Floyd）、最小生成树。</li><li>数学基础：GCD、快速幂、模运算、简单组合数学。</li></ul></li><li><strong>练习平台</strong>：<ul><li>Codeforces（Div2 B-C题）、AtCoder（Beginner Contest C-D题）。</li><li>洛谷（普及+/提高题）、牛客（中级题）。</li></ul></li><li><strong>推荐资源</strong>：<ul><li>《算法竞赛入门经典》（刘汝佳）。</li><li>《挑战程序设计竞赛》（日本，偏重算法实现）。</li><li>刷题目标：100-150道中级题，熟练实现DP和图算法。</li></ul></li></ul><h3 id="阶段3高级算法与专题训练3-4个月"><a class="markdownIt-Anchor" href="#阶段3高级算法与专题训练3-4个月"></a> 阶段3：高级算法与专题训练（3-4个月）</h3><p>目标：掌握竞赛核心算法，熟悉复杂数据结构，提升解题速度。</p><ul><li><strong>学习内容</strong>：<ul><li>高级算法：网络流、二分图匹配、强连通分量、莫队算法。</li><li>高级数据结构：主席树、树链剖分、Splay树。</li><li>计算几何：凸包、线段相交、旋转卡壳。</li><li>数学进阶：矩阵快速幂、CRT、博弈论、概率DP。</li><li>技巧：位运算、离散化、随机化算法、交互题。</li></ul></li><li><strong>练习平台</strong>：<ul><li>Codeforces（Div2 D-E题，Div1 A-B题）、AtCoder（Regular Contest）。</li><li>国内：洛谷（提高+/省选题）、牛客（高级题）。</li><li>参加在线比赛：Codeforces Round、AtCoder Contest，提升临场能力。</li></ul></li><li><strong>推荐资源</strong>：<ul><li>《算法竞赛进阶指南》（李煜东）。</li><li>Codeforces博客与题解。</li><li>刷题目标：150-200道中高级题，熟悉专题算法。</li></ul></li></ul><h3 id="阶段4竞赛模拟与综合提升2-3个月"><a class="markdownIt-Anchor" href="#阶段4竞赛模拟与综合提升2-3个月"></a> 阶段4：竞赛模拟与综合提升（2-3个月）</h3><p>目标：模拟真实竞赛环境，提升综合能力，准备ACM-ICPC。</p><ul><li><strong>学习内容</strong>：<ul><li>复习薄弱专题，查漏补缺。</li><li>学习比赛策略：时间分配、题目选择、调试技巧。</li><li>团队协作（ACM-ICPC为团队赛）：分工、代码审查、沟通。</li><li>掌握复杂题目：多算法组合、构造题、优化技巧。</li></ul></li><li><strong>练习平台</strong>：<ul><li>Codeforces（Div1 C-D题）、AtCoder（Grand Contest）。</li><li>洛谷（NOI/IOI题）、牛客（ACM模式比赛）。</li><li>参加区域赛模拟题、历年ACM-ICPC真题。</li></ul></li><li><strong>推荐资源</strong>：<ul><li>《ACM-ICPC国际大学生程序设计竞赛题解》（多卷）。</li><li>区域赛题库（如HDU、POJ）。</li><li>刷题目标：100-150道竞赛级别题目，参加10-15场模拟赛。</li></ul></li></ul><h2 id="三-学习建议"><a class="markdownIt-Anchor" href="#三-学习建议"></a> 三、学习建议</h2><ol><li><strong>循序渐进</strong>：从简单题入手，逐步挑战难题，避免一开始啃硬骨头。</li><li><strong>多写代码</strong>：算法竞赛重在实现，理论学习后要多敲代码。</li><li><strong>复盘总结</strong>：每道题写完看题解，总结思路和优化方法。</li><li><strong>模拟比赛</strong>：每周参加1-2场在线比赛，培养时间管理和抗压能力。</li><li><strong>团队练习</strong>：ACM-ICPC是团队赛，尽早组队，练习分工与配合。</li><li><strong>工具使用</strong>：熟悉调试工具、模板代码，提高编码效率。</li></ol><h2 id="四-推荐书籍与资源"><a class="markdownIt-Anchor" href="#四-推荐书籍与资源"></a> 四、推荐书籍与资源</h2><ul><li><strong>书籍</strong>：<ul><li>《算法竞赛入门经典》（刘汝佳）：适合初学者，覆盖基础算法。</li><li>《挑战程序设计竞赛》（日本）：算法实现详尽，适合中级。</li><li>《算法竞赛进阶指南》（李煜东）：高级算法和竞赛技巧。</li><li>《算法导论》（CLRS）：理论深入，适合补充背景知识。</li></ul></li><li><strong>在线资源</strong>：<ul><li>刷题平台：Codeforces、AtCoder、LeetCode、洛谷、牛客。</li><li>学习网站：OI Wiki（中文，竞赛知识全面）、CP Algorithms（英文，算法详解）。</li><li>视频教程：B站算法教学视频、Coursera算法课程。</li></ul></li><li><strong>社区</strong>：<ul><li>Codeforces论坛：题目讨论、比赛公告。</li><li>知乎/B站：国内算法竞赛经验分享。</li></ul></li></ul><h2 id="五-时间规划示例"><a class="markdownIt-Anchor" href="#五-时间规划示例"></a> 五、时间规划示例</h2><ul><li><strong>每周安排</strong>：<ul><li>学习新知识：6-8小时（看书、视频、博客）。</li><li>刷题：10-12小时（5-10道题，包含复盘）。</li><li>模拟比赛：3-5小时（1-2场比赛）。</li></ul></li><li><strong>每日建议</strong>：<ul><li>1-2小时学习理论。</li><li>2-3小时刷题（1-3道题，难易搭配）。</li><li>周末参加比赛或专题训练。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从CSDN提取文章为PDF</title>
    <link href="/2025/04/30/%E4%BB%8ECSDN%E6%8F%90%E5%8F%96%E6%96%87%E7%AB%A0%E4%B8%BAPDF/"/>
    <url>/2025/04/30/%E4%BB%8ECSDN%E6%8F%90%E5%8F%96%E6%96%87%E7%AB%A0%E4%B8%BAPDF/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文摘自CSDN文章“# 【新】CSDN文章一键打印、输出PDF（自动阅读全文、全清爽模式）”，原文作者JavonPeng，原文链接[<a href="https://blog.csdn.net/p1279030826/article/details/106602341">https://blog.csdn.net/p1279030826/article/details/106602341</a>]</p></blockquote><h1 id="f12打开开发人员工具在控制台输入以下内容"><a class="markdownIt-Anchor" href="#f12打开开发人员工具在控制台输入以下内容"></a> F12打开开发人员工具，在控制台输入以下内容：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-string">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> articleBox = $(<span class="hljs-string">&quot;div.article_content&quot;</span>);<br>articleBox.<span class="hljs-title function_">removeAttr</span>(<span class="hljs-string">&quot;style&quot;</span>);<br>$(<span class="hljs-string">&quot;.hide-preCode-bt&quot;</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&quot;.author-pjw&quot;</span>).<span class="hljs-title function_">show</span>();<br>$(<span class="hljs-string">&quot;.hide-preCode-bt&quot;</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&quot;pre&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;set-code-hide&quot;</span>);<br>$(<span class="hljs-string">&quot;.hide-preCode-bt&quot;</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&quot;.hide-preCode-box&quot;</span>).<span class="hljs-title function_">hide</span>().<span class="hljs-title function_">remove</span>();<br>$(<span class="hljs-string">&quot;#btn-readmore&quot;</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">remove</span>();<br>$(<span class="hljs-string">&quot;#side&quot;</span>).<span class="hljs-title function_">remove</span>();<br>$(<span class="hljs-string">&quot;.csdn-side-toolbar, .template-box, .blog-footer-bottom, .left-toolbox, .toolbar-inside&quot;</span>).<span class="hljs-title function_">remove</span>();<br>$(<span class="hljs-string">&quot;.comment-box, .recommend-box, .more-toolbox, .article-info-box, .column-group-item&quot;</span>).<span class="hljs-title function_">remove</span>();<br>$(<span class="hljs-string">&quot;aside, .tool-box, .recommend-nps-box, .skill-tree-box&quot;</span>).<span class="hljs-title function_">remove</span>();<br>$(<span class="hljs-string">&quot;main&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;display&#x27;</span>,<span class="hljs-string">&#x27;content&#x27;</span>); <br>$(<span class="hljs-string">&quot;main&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;float&#x27;</span>,<span class="hljs-string">&#x27;left&#x27;</span>); <br>$(<span class="hljs-string">&quot;#mainBox&quot;</span>).<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;100%&quot;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;body&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">style</span>.<span class="hljs-property">zoom</span>=<span class="hljs-number">0.8</span>;<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">print</span>();<br>&#125;)();<br></code></pre></td></tr></table></figure><p>会自动启动PDF打印机，设置相关参数然后保存即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI大模型API调用的相关概念</title>
    <link href="/2025/04/26/AI%E5%A4%A7%E6%A8%A1%E5%9E%8BAPI%E8%B0%83%E7%94%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
    <url>/2025/04/26/AI%E5%A4%A7%E6%A8%A1%E5%9E%8BAPI%E8%B0%83%E7%94%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>声明：本篇笔记由<strong>Grok3大模型</strong>生成。</p></blockquote><p>AI大模型的API调用是指通过应用程序编程接口（API）与大型人工智能模型（如语言模型、图像生成模型等）进行交互，以获取模型的推理结果或执行特定任务。以下是对相关概念的简洁介绍：</p><h3 id="1-什么是api调用"><a class="markdownIt-Anchor" href="#1-什么是api调用"></a> 1. <strong>什么是API调用？</strong></h3><p>API（Application Programming Interface）是一个中介接口，允许不同的软件系统相互通信。AI大模型的API调用是通过发送请求（通常是HTTP请求）到模型的服务器，传递输入数据（如文本、图像等），然后接收模型的输出（如生成文本、分类结果等）。</p><p><strong>流程示例</strong>：</p><ul><li>开发者发送一个包含输入文本的API请求（如“翻译这句话：Hello, world!”）。</li><li>模型服务器处理请求，调用AI模型进行推理。</li><li>服务器返回结果（如“¡Hola, mundo!”）。</li></ul><h3 id="2-ai大模型"><a class="markdownIt-Anchor" href="#2-ai大模型"></a> 2. <strong>AI大模型</strong></h3><p>AI大模型通常指参数量巨大（十亿到万亿级）的深度学习模型，如：</p><ul><li><strong>语言模型</strong>：如Grok、GPT、LLaMA，用于文本生成、翻译、问答等。</li><li><strong>多模态模型</strong>：如DALL·E、Stable Diffusion，支持文本到图像生成或图像处理。<br />这些模型通常部署在云端，因计算资源需求高，开发者通过API访问而非本地运行。</li></ul><h3 id="3-api调用相关概念"><a class="markdownIt-Anchor" href="#3-api调用相关概念"></a> 3. <strong>API调用相关概念</strong></h3><ul><li><strong>端点（Endpoint）</strong>：API的访问地址，通常是URL（如<code>https://api.x.ai/v1/model</code>）。</li><li><strong>请求（Request）</strong>：<ul><li><strong>方法</strong>：通常是POST或GET，POST用于发送复杂数据。</li><li><strong>参数</strong>：包括输入数据（如文本、提示词）、模型配置（如温度、最大输出长度）。</li><li><strong>认证</strong>：通过API密钥或令牌确保调用权限。</li></ul></li><li><strong>响应（Response）</strong>：<ul><li>通常以JSON格式返回，包含模型输出、状态码、错误信息等。</li><li>示例：<code>&#123;&quot;text&quot;: &quot;生成的回答&quot;, &quot;status&quot;: &quot;success&quot;&#125;</code>。</li></ul></li><li><strong>配额与计费</strong>：<ul><li>API调用通常有限额（如每月免费调用次数）。</li><li>按调用次数、输入/输出token数或计算资源计费。</li></ul></li><li><strong>延迟（Latency）</strong>：从发送请求到接收响应的时间，受模型大小和服务器负载影响。</li><li><strong>Token</strong>：<ul><li>许多语言模型按token（词或字符片段）计算输入和输出量。</li><li>例如，英文单词通常是1个token，中文字符可能是1-2个token。</li></ul></li></ul><h3 id="4-典型应用场景"><a class="markdownIt-Anchor" href="#4-典型应用场景"></a> 4. <strong>典型应用场景</strong></h3><ul><li><strong>文本生成</strong>：如自动撰写文章、生成代码。</li><li><strong>对话系统</strong>：构建聊天机器人。</li><li><strong>数据分析</strong>：处理文本分类、情感分析。</li><li><strong>多模态任务</strong>：生成图像、语音转文字等。</li></ul><h3 id="5-如何使用api调用"><a class="markdownIt-Anchor" href="#5-如何使用api调用"></a> 5. <strong>如何使用API调用</strong></h3><ol><li><strong>注册与获取API密钥</strong>：从服务提供商（如xAI、OpenAI）获取访问权限。</li><li><strong>阅读文档</strong>：了解API的端点、参数和限制。</li><li><strong>编写代码</strong>：使用编程语言（如Python）通过库（如<code>requests</code>）发送请求。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;https://api.example.com/v1/model&quot;</span><br>headers = &#123;<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer YOUR_API_KEY&quot;</span>&#125;<br>data = &#123;<span class="hljs-string">&quot;prompt&quot;</span>: <span class="hljs-string">&quot;Hello, world!&quot;</span>, <span class="hljs-string">&quot;max_tokens&quot;</span>: <span class="hljs-number">50</span>&#125;<br>response = requests.post(url, json=data, headers=headers)<br><span class="hljs-built_in">print</span>(response.json())<br></code></pre></td></tr></table></figure></li><li><strong>处理响应</strong>：解析返回的JSON数据，提取所需结果。</li></ol><h3 id="6-注意事项"><a class="markdownIt-Anchor" href="#6-注意事项"></a> 6. <strong>注意事项</strong></h3><ul><li><strong>成本管理</strong>：监控调用量，避免超预算。</li><li><strong>数据隐私</strong>：确保输入数据符合隐私政策，敏感数据需加密。</li><li><strong>错误处理</strong>：处理超时、配额超限等异常情况。</li><li><strong>模型选择</strong>：根据任务选择合适的模型（如小型模型速度快，大型模型效果好）。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web学习笔记(一)：HTML篇</title>
    <link href="/2025/04/17/Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AHTML%E7%AF%87/"/>
    <url>/2025/04/17/Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AHTML%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>声明：本篇笔记摘自<a href="https://www.wenjingketang.com/bookinfo?book_id=9310">《Web前端技术 - 航空工业出版社》</a>，遵循<a href="https://creativecommons.org/licenses/by/4.0/legalcode.zh-hans">CC BY 4.0协议</a>。<br />存在由AI生成的小部分内容，仅供参考，请仔细甄别可能存在的错误。<br />由于技术的迭代，部分标签已被新版本的HTML弃用，本篇笔记对其中一些标注了(已废弃)字样，但可能存在误标、漏标等情况，请以最新标准为准。</p></blockquote><hr /><h1 id="一-html概述"><a class="markdownIt-Anchor" href="#一-html概述"></a> 一、HTML概述</h1><p><strong>HTML (HyperText Markup Language，超文本标记语言)</strong> 是用于创建和设计网页的标准标记语言。它通过一系列 <strong>标签(Tags)</strong> 定义网页的结构和内容，浏览器会解析这些标签并渲染成用户看到的页面。</p><h1 id="二-常用html标签"><a class="markdownIt-Anchor" href="#二-常用html标签"></a> 二、常用HTML标签</h1><h2 id="1基本结构"><a class="markdownIt-Anchor" href="#1基本结构"></a> 1.基本结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 文档类型声明 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>     <span class="hljs-comment">&lt;!-- HTML部分 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 网页头部 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 元数据，声明字符集 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 网页标题 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;img/favicon.png&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 链接网页图标 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>     <span class="hljs-comment">&lt;!-- 网页主体部分 --&gt;</span><br><span class="hljs-comment">&lt;!-- 网页可见部分 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用规范专用、结构清晰的标签，可以方便搜索引擎整理网页内容，有利于信息检索。</p><h2 id="2常用标签"><a class="markdownIt-Anchor" href="#2常用标签"></a> 2.常用标签</h2><h3 id="1-文档标签"><a class="markdownIt-Anchor" href="#1-文档标签"></a> ① 文档标签</h3><ul><li><code>&lt;!DOCTYPE&gt;</code>：文档声明，<code>&lt;!DOCTYPE html&gt;</code>表明此文档使用H5标准。</li><li><code>&lt;html&gt;</code>：又称根标签，表明这是一个H5文档。</li><li><code>&lt;head&gt;</code>：标记文档头部，存储网页基本信息。<ul><li><code>&lt;meta&gt;</code>：元信息标签，用于设置描述和关键词，以便搜索引擎检索。<ul><li>字符集：<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code> 定义网页使用utf-8字符集。</li><li>网页视口：<code>&lt;meta name=&quot;viewport&quot;&gt;</code> 设置视口高度、缩放比等，常用于在响应式设计中使网页适配移动端。</li></ul></li><li><code>&lt;title&gt;</code>：标记网页标题，显示在浏览器标签上。</li><li><code>&lt;link&gt;</code>：链接外部资源，规定了当前文档与某个外部资源的关系。<ul><li>链接图标：<code>&lt;link rel=&quot;shortcut icon&quot; href=&quot;img/favicon.png&quot;&gt;</code></li><li>链接CSS样式：<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;index.css&quot;&gt;</code></li></ul></li></ul></li><li><code>&lt;body&gt;</code>：标记文档主体，用于设置展示给用户的内容。</li></ul><h3 id="2-结构标签"><a class="markdownIt-Anchor" href="#2-结构标签"></a> ② 结构标签</h3><ul><li><code>&lt;header&gt;</code>：页眉标签，通常包含网站Logo、网页主导航和搜索框等。</li><li><code>&lt;nav&gt;</code>：导航标签，标记页面导航的链接组，如主菜单、侧边栏导航或者页内导航等。</li><li><code>&lt;article&gt;</code>：文章块标签，用于标记一块完整独立的内容，如文章、博客条目，用户评论。</li><li><code>&lt;section&gt;</code>：区块标签，用于标记文档中的节，从而对内容进行分区，如章节、页眉页脚。</li><li><code>&lt;aside&gt;</code>：附栏标签，用于标记引用内容、广告等与内容无关的部分。</li><li><code>&lt;footer&gt;</code>：页脚标签，用于标记文档或节的页脚，如友链、版权等信息。</li><li><code>&lt;div&gt;</code>：块级无语义容器，用于模块化布局。</li><li><code>&lt;span&gt;</code>：行内无语义标签，常用标记于文章标题下的作者、时间、地点等附属信息。</li></ul><p>★ 使用示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>简单网页示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 页眉部分 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的网站<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>关于我们<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>联系我们<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 主体内容 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 文章部分 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>欢迎来到我的博客<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>第一章：HTML 简介<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>HTML 是用于构建网页的标准标记语言。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>第二章：CSS 简介<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CSS 用于控制网页的样式和布局。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>发布时间：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2023年10月10日<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> | 作者：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 附栏部分 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>相关链接<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>HTML 教程<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>CSS 教程<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 页脚部分 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;copy;</span> 2023 我的网站. 版权所有.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>隐私政策<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>使用条款<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-文本标签"><a class="markdownIt-Anchor" href="#3-文本标签"></a> ③ 文本标签</h3><ul><li><code>&lt;h1&gt; ~ &lt;h6&gt;</code>：1级标题 ~ 6级标题，默认使文字加粗，字号依次减小。</li><li><code>&lt;p&gt;</code> (paragraph)：段落标签，用于标记段落文本，默认使用系统的字体字号。</li><li><code>&lt;strong&gt;</code>：强调标签，呈现<strong>粗体</strong>效果，语气较重。<ul><li><code>&lt;b&gt;</code>：只有加粗效果，无强调作用。</li></ul></li><li><code>&lt;em&gt;</code> (emphasis)：强调标签，呈现<em>斜体</em>效果，语气较轻。<ul><li><code>&lt;i&gt;</code>：只有斜体效果，无强调作用。</li></ul></li><li><code>&lt;sup&gt;</code>：标记上标，如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>、注册商标<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msup></mrow><annotation encoding="application/x-tex">^{TM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span></span></span></span></span></span></span></span>。</li><li><code>&lt;sub&gt;</code>：标记下标，如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>a</mi><mi>C</mi><msub><mi>O</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">CaCO_{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li><li><code>&lt;ins&gt;</code> (insert)：表示插入的文本，默认添加下划线样式。</li><li><code>&lt;del&gt;</code> (delete)：表示删除的文本，默认添加删除线样式。</li><li><code>&lt;abbr&gt;</code> (abbreviation)：标记简称或缩写词，鼠标悬停时使用气泡显示全称。<ul><li>如：<abbr text="Hypertext markup language">HTML</abbr>。</li></ul></li><li><code>&lt;br /&gt;</code>：实现文本换行，不建议大量使用。</li><li><code>&lt;hr /&gt;</code>：标记水平线。<ul><li>align属性：设置对齐方式，<strong>center 居中</strong> | left 左对齐 | right 右对齐</li><li>size属性：设置粗细，以像素(px)为单位，<strong>默认2px</strong>。</li><li>width属性：设置宽度，单位为px或%，<strong>默认100%</strong>。</li><li>color属性：设置颜色，可用颜色名、#RGB十六进制、(r, g, b)设置。</li></ul></li><li><code>&lt;dfn&gt;</code>：用于标记专用术语，默认添加斜体效果。</li><li><code>&lt;pre&gt;</code>：表示预定义格式文本，即保利原有的空格和换行。</li><li><code>&lt;code&gt;</code>：用于标记代码或文件名，一般包裹在<code>&lt;pre&gt;</code>标签中以保留原有的格式。</li></ul><h3 id="4-特殊字符转义"><a class="markdownIt-Anchor" href="#4-特殊字符转义"></a> ④ 特殊字符转义</h3><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">含义</th><th style="text-align:center">代码</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">空格</td><td style="text-align:center"><code>&amp;nbsp;</code></td><td style="text-align:center">Non-Breaking Space</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于号</td><td style="text-align:center"><code>&amp;lt;</code></td><td style="text-align:center">less than</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于号</td><td style="text-align:center"><code>&amp;gt;</code></td><td style="text-align:center">great than</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">逻辑与符号</td><td style="text-align:center"><code>&amp;amp;</code></td><td style="text-align:center">ampersand</td></tr><tr><td style="text-align:center">￥</td><td style="text-align:center">人民币符号</td><td style="text-align:center"><code>&amp;yen;</code></td><td style="text-align:center">类似拼音</td></tr><tr><td style="text-align:center">©</td><td style="text-align:center">版权符号</td><td style="text-align:center"><code>&amp;copy;</code></td><td style="text-align:center">copyright</td></tr><tr><td style="text-align:center">®</td><td style="text-align:center">注册商标符号</td><td style="text-align:center"><code>&amp;reg;</code></td><td style="text-align:center">register</td></tr><tr><td style="text-align:center">°</td><td style="text-align:center">度符号</td><td style="text-align:center"><code>&amp;deg;</code></td><td style="text-align:center">degree</td></tr><tr><td style="text-align:center">±</td><td style="text-align:center">正负号</td><td style="text-align:center"><code>&amp;plusmn;</code></td><td style="text-align:center">plus-minus</td></tr><tr><td style="text-align:center">×</td><td style="text-align:center">乘号</td><td style="text-align:center"><code>&amp;times;</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">÷</td><td style="text-align:center">除号</td><td style="text-align:center"><code>&amp;divide;</code></td><td style="text-align:center"></td></tr></tbody></table><h3 id="5-多媒体"><a class="markdownIt-Anchor" href="#5-多媒体"></a> ⑤ 多媒体</h3><ul><li><p>★ 路径表示法</p><ul><li>图片在同级目录下：<code>example.png</code></li><li>图片在下级目录下：<code>dic/example.png</code></li><li>图片在上级目录下：<code>../dic/example.png</code></li></ul></li><li><p>图片标签：<code>&lt;img src=&quot;路径&quot; alt=&quot;提示文本&quot; /&gt;</code></p><ul><li>src支持链接 JPEG 、 GIF 和 <code>PNG</code> 三种格式的图片</li></ul></li><li><p>音频标签：<code>&lt;audio src=&quot;路径&quot; controls=&quot;controls&quot;&gt;提示文本&lt;/audio&gt;</code></p><ul><li>controls属性：显示音频控件</li></ul></li><li><p>视频标签：<code>&lt;video src=&quot;路径&quot; controls=&quot;controls&quot;&gt;提示文本&lt;/video&gt;</code></p><ul><li>controls属性：显示视频控件</li></ul></li><li><p>流标签：<code>&lt;figure&gt;&lt;/figure&gt;</code></p><ul><li>表示页面中的一块独立的内容，表现为具有左右缩进的内容快。</li><li><code>&lt;figcaption&gt;</code>：嵌套在&lt;figure中标记流的标题，可以省略。</li></ul></li></ul><p>★ 使用示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span>&gt;</span>流标题<span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/p1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;示例图片&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>流内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-列表"><a class="markdownIt-Anchor" href="#6-列表"></a> ⑥ 列表</h3><ul><li>无序列表：<ul></ul><ul><li>各级列表项前，默认分别显示实心圆、空心圆、实心方块图标。</li><li>也可通过<code>type= &quot;disc&quot; &quot;circle&quot; &quot;square&quot;</code> 强制指定序号样式。</li></ul></li><li>有序列表：<code>&lt;ol&gt;&lt;/ol&gt;</code>，具有以下属性：<ul><li><code>reversed=&quot;reversed&quot;</code>：降序排列(仅颠倒编号，各列表项内容不颠倒)。</li><li><code>start=&quot;1&quot;</code>：指定序号的起始值。</li><li><code>type=&quot;1&quot; &quot;A&quot; &quot;a&quot; &quot;I&quot; &quot;i&quot;</code>：指定序号的样式。</li></ul></li><li>自定义列表： <code>&lt;dl&gt;&lt;/dl&gt;</code><ul><li>使用 <code>&lt;dt&gt;&lt;/dt&gt;</code> 标记列表标题</li><li>使用 <code>&lt;dd&gt;&lt;/dd&gt;</code> 标记列表内容</li></ul></li><li>列表项：<code>&lt;li&gt;&lt;/li&gt;</code>，与<code>&lt;ol&gt;</code>相似，具有以下属性：<ul><li><code>value=&quot;1&quot;</code>：指定当前项的序号，并使之后的列表项重新编号。</li><li><code>type=&quot;1&quot; &quot;A&quot; &quot;a&quot; &quot;I&quot; &quot;i&quot;</code>：指定序号的样式。</li></ul></li></ul><p>★ 使用示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;disc&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表第一项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表第二项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">reversed</span>=<span class="hljs-string">&quot;reversed&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span>有序列表第一项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表第二项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 自定义列表中可以有多个标题，列表项没有项目符号，也不强调次序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span> 自定义列表标题<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>自定义列表第一项<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>自定义列表第二项<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>自定义列表标题<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>自定义列表项目<span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-超链接"><a class="markdownIt-Anchor" href="#7-超链接"></a> ⑦ 超链接</h3><ul><li><code>&lt;a href=&quot;目标地址&quot;&gt; 载体 &lt;/a&gt;</code><ul><li>href属性：必须设置，若暂时未确定地址，用href=&quot;#&quot;将链接置空。</li><li>target属性：<strong>self 当前窗口打开</strong> | blank 新窗口打开</li><li>download属性：指定资源的文件名，并且强制浏览器执行下载操作(仅Chrome和FIreFox支持)。</li></ul></li><li>锚点链接：设置某个标签的id属性，将链接的href属性设置为<code>href=&quot;#id名称&quot;</code>，可以创建一个锚点。用户点击链接时会自动跳转到指定id所在的标签处。</li><li>电子邮件链接：<code>href = &quot;mainto:电子邮件地址?subject=邮件主题&quot;</code></li><li>图像热点链接：在一张图片上根据坐标分别设置不同区域的超链接。步骤如下：<ul><li>在图片标签<code>&lt;img /&gt;</code>下添加一个<code>&lt;map&gt;</code>标签，其name属性为图片的id，表示添加图像热点链接的作用区域</li><li>在<code>&lt;map&gt;</code>标签中添加几个<area>标签，使用下列属性设置热点链接：<ul><li>shape：circle 圆形 | rect 矩形 | poly 多边形</li><li>coords：关键点的坐标，参数如下：<ul><li>circle形状：coords = “圆心x, 圆心y，半径”</li><li>rect形状：coords = “左上顶点x, 左上顶点y, 右下顶点x, 右下顶点y”</li><li>poly形状：coords = “顶点1x, 顶点1y, 顶点2x, 顶点2y, …”</li></ul></li></ul></li></ul></li></ul><p>★ 使用示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;img/p1.png&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">pic_dog</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 简单的超链接示例 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/p1.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;小狗&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>点击预览<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#pic_dog&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 锚点示例：点击跳转到小狗图片 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>查看图片<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/main.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;动物大全&quot;</span>  <span class="hljs-attr">usermap</span>=<span class="hljs-string">&quot;#map&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!-- 图像热点链接 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 属性值应与usermap的值相同 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;88, 77, 63&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;img/dogs.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;小狗&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;rect&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;26, 190, 151, 357&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;img/cats.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;小猫&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-表格"><a class="markdownIt-Anchor" href="#8-表格"></a> ⑧ 表格</h3><ul><li>基本结构<ul><li><code>&lt;table&gt;</code>：标记表格。</li><li><code>&lt;caption&gt;</code>：标记表格的标题。</li><li><code>&lt;tr&gt;</code>：标记表格中的一行。</li><li><code>&lt;th&gt;</code>：包含在<code>&lt;tr&gt;</code>中，标记表头内容，默认加粗居中。</li><li><code>&lt;td&gt;</code>：包含在<code>&lt;tr&gt;</code>中，标记普通内容，默认不加粗左对齐。</li></ul></li><li>表格分组<ul><li>按行分组：<ul><li><code>&lt;thead&gt;</code>：标记表头部分(<code>&lt;th&gt;</code>标记的是表头的一格)。</li><li><code>&lt;tbody&gt;</code>：标记表体部分。</li><li><code>&lt;tfoot&gt;</code>：标记表尾部分。</li></ul></li><li>按列分组：<ul><li><code>&lt;col&gt;</code>：包含在<code>&lt;table&gt;</code>中，通过 <code>span属性</code> 设置每组的列数。</li></ul></li></ul></li><li>常用属性<ul><li>整体边框<ul><li>设置<code>&lt;table&gt;</code>的 <code>border属性</code>，单位为px。</li></ul></li><li>单元格的内外边距<ul><li>内边距(内容 - 边框)：设置<code>&lt;table&gt;</code>的 <code>cellpadding属性</code>，单位为px。</li><li>外边距(边框 - 边框)：设置<code>&lt;table&gt;</code>的 <code>cellspacing属性</code>，单位为px。</li><li>图示：<br /><img src="Web%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE%E5%8F%8A%E5%B1%9E%E6%80%A7%E6%A0%B7%E5%BC%8F-20250316074722163.png" alt="" /><ul><li>这两个属性不常在HTML中使用(已过时),而是使用CSS中的<code>border-spacing</code>属性。</li></ul></li></ul></li><li>表格内外边距（外遵框架frame，内守规矩rulles）<ul><li>表格内边框：设置<code>&lt;table&gt;</code>的 <code>rules属性</code>(已废弃) ，取值如下：<ul><li>none：不显示内边框</li><li>all：显示所有边框</li><li>groups：只显示分组的边框</li><li>rows：显示行之间的边框</li><li>cols：显示列之间的边框</li></ul></li><li>表格外边框：设置<code>&lt;table&gt;</code>的 <code>frame属性</code>(已废弃) ，取值如下：<ul><li>void：不显示外边框</li><li>box、boder：显示所有外边框</li><li>above：显示上边框</li><li>below：显示下边框</li><li>lhs：显示左外边框</li><li>rhs：显示有外边框</li><li>hsides：(horizon sides)显示上下边框</li><li>vsides：(vertical sides)显示左右边框</li></ul></li></ul></li><li>单元格跨行、跨列<ul><li>跨行：设置<code>&lt;th&gt;</code>或<code>&lt;td&gt;</code>的rowspan属性，值为跨行数。</li><li>跨列：设置<code>&lt;th&gt;</code>或<code>&lt;td&gt;</code>的colspan属性，值为跨列数。</li></ul></li></ul></li></ul><p>★ 使用示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">rules</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span>      <span class="hljs-comment">&lt;!-- 以1px显示所有外边框 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>表格标题<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span> <span class="hljs-attr">span</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span>     <span class="hljs-comment">&lt;!-- 垂直分组：第一组占一列 --&gt;</span>                <br><span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c2&quot;</span> <span class="hljs-attr">span</span>=<span class="hljs-string">&quot;3&quot;</span> /&gt;</span>     <span class="hljs-comment">&lt;!-- 垂直分组：第二组占三列 --&gt;</span><br><span class="hljs-comment">&lt;!-- 水平分组：表头部分 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头第一格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头第二格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头第三格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头第四格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 水平分组：表体部分 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-comment">&lt;!--跨行内容--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>内容(1,1)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>(占两行)<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(1,2)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(1,3)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(1,4)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(2,2)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(2,3)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(2,4)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>内容(3,1)<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(3,2)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(3,3)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容(3,4)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 水平分组：表尾部分 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表尾第一格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-comment">&lt;!--跨列内容--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>表尾第二格(占三列)<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>★ 表格效果：</p><table border="1" rules="all">      <!-- 以1px显示所有外边框 --><caption>表格标题</caption><col class="c1" span="1" />     <!-- 垂直分组：第一组占一列 -->                <col class="c2" span="3" />     <!-- 垂直分组：第二组占三列 --><!-- 水平分组：表头部分 --><thead><tr><th>表头第一格</th><th>表头第二格</th><th>表头第三格</th><th>表头第四格</th></tr></thead><!-- 水平分组：表体部分 --><tbody><tr><!--跨行内容--><th rowspan="2">内容(1,1)<br/>(占两行)</th><td>内容(1,2)</td><td>内容(1,3)</td><td>内容(1,4)</td></tr><tr><td>内容(2,2)</td><td>内容(2,3)</td><td>内容(2,4)</td></tr><tr><th>内容(3,1)</th><td>内容(3,2)</td><td>内容(3,3)</td><td>内容(3,4)</td></tr></tbody><!-- 水平分组：表尾部分 --><tfoot><tr><th>表尾第一格</th><!--跨列内容--><th colspan="3">表尾第二格(占三列)</th></tr></tfoot></table><h3 id="9-表单"><a class="markdownIt-Anchor" href="#9-表单"></a> ⑨ 表单</h3><ul><li>基本组成：表单域、表单控件、提交按钮、提示信息。<br /><img src="Web%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE%E5%8F%8A%E5%B1%9E%E6%80%A7%E6%A0%B7%E5%BC%8F-20250317192024390.png" alt="" /><ul><li>表单域：网页中放置表单控件与提示信息的区域，用于采集用户输入信息并传输到服务器。<ul><li><code>&lt;form action=&quot;提交地址&quot; method=&quot;提交方式&quot;&gt;&lt;/form&gt;</code>（form标签不可互相嵌套。）<ul><li>action属性：表示数据提交的地址，一般是一个URL，开发初期可使用#占位置空。</li><li>method属性：提交表单数据的方式，默认为get，一般使用post。</li><li>name属性：表单的名称。</li><li>autocomplete属性：自动记录并弹出历史记录。取值： <strong>on</strong> | off</li><li>novalidate属性：值为novalidate，若设置则不会对输入的内容进行检查。</li><li>enctype属性：设置数据发送到服务器时的编码类型，取值：<ul><li><strong>application/x-www-form-urlencoded</strong>：表示对所有字符编码再传输，会导致大文件传输效率降低。</li><li>mutipart/formdata：表示传输的数据为二进制类型。</li><li>text/plain：表示传输纯文本，不编码特殊字符，但是空格转换为加号“+”。</li></ul></li><li>target属性：表示表单数据提交地址的打开方式，取值：<strong>self 当前窗口打开</strong> | blank 新窗口打开</li></ul></li></ul></li><li>提交按钮：用于用户确定信息填写完毕后将其传输至服务器。</li><li>提示信息：提示用户输入信息的内容和类型。</li><li>常用表单控件：提供表单功能，如文本框、按钮、单/复选框、搜索框等。<ul><li><code>&lt;input type=&quot;text&quot; /&gt;</code>：单行文本框，用于输入简短的文本，如账号密码。</li><li><code>&lt;input type=&quot;password&quot; /&gt;</code>：密码文本框，会隐藏输入的内容，显示黑色圆点。</li><li><code>&lt;input type=&quot;radio&quot; /&gt;</code>：单选框，用于单项选择，如性别、年级等。</li><li><code>&lt;input type=&quot;checkbox&quot; /&gt;</code>：复选框，用于多项选择(也可以单选)，如兴趣爱好爱好。</li><li><code>&lt;input type=&quot;button&quot; /&gt;</code>：普通按钮，用于标记可单机的按钮，通过value属性可设置按钮内容。<ul><li>作用同<code>&lt;button&gt;</code>标签，后者可嵌入文本、图像等内容，同时拥有更丰富的样式。</li></ul></li><li><code>&lt;input type=&quot;submit&quot; /&gt;</code>：提交按钮，用于提交用户输入的数据，默认内容为“提交”。</li><li><code>&lt;input type=&quot;reset&quot; /&gt;</code>：重置按钮，用于清空表单中的数据，默认内容为“重置”。</li><li><code>&lt;input type=&quot;image&quot; /&gt;</code>：图像形式的提交按钮，使用图像代替普通提交按钮样。</li><li><code>&lt;input type=&quot;file&quot; /&gt;</code>：文件域，包含一个“选择文件”的按钮和表示选中文件的文本，用户单机按钮可选择文件上传。</li><li><code>&lt;input type=&quot;email&quot; /&gt;</code>：邮箱地址文本框，支持验证邮箱格式正确性，并提示错误信息。</li><li><code>&lt;input type=&quot;url&quot; /&gt;</code>：地址文本框，支持验证URL格式正确性，并提示错误信息。</li><li><code>&lt;input type=&quot;tel&quot; /&gt;</code>：电话号码文本框，通过pattern属性设置正则表达式限制输入格式。</li><li><code>&lt;input type=&quot;search&quot; /&gt;</code>：搜索框，能够记录输入的字符，作为网站搜索的关键词。</li><li><code>&lt;input type=&quot;number&quot; /&gt;</code>：数值文本框，只能输入数字，支持设置max,min,step,value属性限制输入内容的边界、间隔和默认值。</li><li><code>&lt;input type=&quot;range&quot; /&gt;</code>：数值范围滑块，将数值文本框显示为滑动条控件。</li><li><code>&lt;input type=&quot;date&quot; /&gt;</code>：日期时间文本框，可通过设置type来控制时间的精度：date(天) | week(周) | month（月） | time(分钟)</li></ul></li><li>其他表单控件：<ul><li><code>&lt;textarea clos=&quot;列数&quot; rows=&quot;行数&quot; palcehoder=“提示信息”&gt;</code>：文本区域(支持输入多行文本，类似于留言板)</li><li><code>&lt;select size=&quot;选项个数&quot; mutiple=&quot;mutiple&quot;&gt;&lt;option&gt;选项一&lt;/option&gt;&lt;option&gt;选项二&lt;/option&gt;&lt;option&gt;选项三&lt;/option&gt;&lt;/select&gt;</code>:选择框(下拉列表)<ul><li>若为select设置mutiple属性，则选项会按多行显示，且支持按Ctrl多选</li><li>若为option设置selected属性，默认选中此选项</li><li>若选项较多，可使用<code>&lt;optgroup label=&quot;组名&quot;&gt;&lt;/optgroup&gt;</code>包含多个<code>&lt;option&gt;</code>标签，进行选项分组</li></ul></li><li>数据列表：支持用户输入关键词匹配选项，同时也支持用户直接选择列表中的选项，格式如下：</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;类型&quot;</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;列表名称&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;列表名称&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;说明内容1&quot;</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span> <span class="hljs-comment">&lt;!-- 说明内容不会被填入输入框 ---&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;说明内容2&quot;</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center"><strong>上述代码效果说明</strong></th><th style="text-align:center"><strong>图示</strong></th></tr></thead><tbody><tr><td style="text-align:center">支持用户选择选项</td><td style="text-align:center"><img src="Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%EF%BC%9AHTML%E7%AF%87-20250417194505881.png" alt="" /></td></tr><tr><td style="text-align:center">支持用户输入匹配</td><td style="text-align:center"><img src="Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%EF%BC%9AHTML%E7%AF%87-20250417194717055.png" alt="" /></td></tr><tr><td style="text-align:center">说明文字不会被填入输入框</td><td style="text-align:center"><img src="Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%EF%BC%9AHTML%E7%AF%87-20250417194750834.png" alt="" /></td></tr></tbody></table><ul><li>常用表单属性</li></ul><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">属性值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">name</td><td style="text-align:center">自定义</td><td style="text-align:center">表单控件的名称</td></tr><tr><td style="text-align:center">value</td><td style="text-align:center">自定义</td><td style="text-align:center">表单控件的默认值</td></tr><tr><td style="text-align:center">readonly</td><td style="text-align:center">readonly</td><td style="text-align:center">表单控件不可编辑修改</td></tr><tr><td style="text-align:center">disabled</td><td style="text-align:center">disabled</td><td style="text-align:center">禁用该表单控件（显示为灰色）</td></tr><tr><td style="text-align:center">checked</td><td style="text-align:center">checked</td><td style="text-align:center">该项默认选中（单选钮或复选框）</td></tr><tr><td style="text-align:center">autocomplete</td><td style="text-align:center">on/off</td><td style="text-align:center">自动完成功能</td></tr><tr><td style="text-align:center">autofocus</td><td style="text-align:center">autofocus</td><td style="text-align:center">自动获取焦点</td></tr><tr><td style="text-align:center">form</td><td style="text-align:center"><code>&lt;form&gt;</code>的id属性值</td><td style="text-align:center">指定控件所属表单</td></tr><tr><td style="text-align:center">placeholder</td><td style="text-align:center">字符串</td><td style="text-align:center">显示在输入型文本框中的输入提示</td></tr><tr><td style="text-align:center">required</td><td style="text-align:center">required</td><td style="text-align:center">该表单控件不可为空</td></tr><tr><td style="text-align:center">pattern</td><td style="text-align:center">字符串(正则表达式)</td><td style="text-align:center">验证输入内容的模式</td></tr></tbody></table><ul><li>提示信息：<code>&lt;label for=&quot;目标控件id&quot;&gt;提示信息&lt;/label&gt;</code><ul><li>用于单选/复选框选择钮后的文字说明，或按钮中的文字(如：○ <strong>18岁以下</strong>)</li><li>点击提示信息也能够激活对应的控件，有利于优化用户体验</li></ul></li><li>表单对象分组：<code>&lt;fieldset&gt;</code><ul><li>格式：</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>账号：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%EF%BC%9AHTML%E7%AF%87-20250417200335718.png" alt="" /></p><hr /><p>★ 常用表单标签使用示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>会员信息表<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>基本信息<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>昵称：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;idc&quot;</span>&gt;</span>头像：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;idc&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>其他信息<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>性别：<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;nan&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nan&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rad&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;nv&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nv&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rad&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>兴趣：<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;chang&quot;</span>&gt;</span>唱歌<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;chang&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;chb&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;tiao&quot;</span>&gt;</span>跳舞<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tiao&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;chb&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;dong&quot;</span>&gt;</span>运动<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dong&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;chb&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;gq&quot;</span>&gt;</span>个性签名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gq&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;40&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>★显示效果<br /><img src="Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%EF%BC%9AHTML%E7%AF%87-20250417200631467.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Web</category>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十九岁的栈帧：回溯那些改变我人生的函数调用</title>
    <link href="/2025/04/15/%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/"/>
    <url>/2025/04/15/%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="birthday.jpg" alt="" /><br />从2022年写出第一个程序到现在，也有三四个年头了。今天是我的十九岁生日，也正好借此机会，回顾一下我走上编程这条路的过程和经历。</p><hr /><p>第一次见到代码，好像还是在我初中那会儿，有次在跟QQ上的网友玩一个投骰子的游戏，群里有个大佬说他会拿Python写一个骰子，然后给出了类似于下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ramdom<br>a = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p>现在看来这个程序很简单，只是单纯地输出一个1-6之间的随机整数，但当时给了我不小的震撼：“三行字(当时甚至不知道这个叫代码)就可以让电脑给我一个随机的数字！”</p><p>震撼之余跟大佬聊了很久，也从此对<code>Python</code>这么个编程语言有了初识。</p><hr /><p>转眼之间到了高中，高一开学的时候发了本《信息技术》教材，长这个样子：<br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414093627575.png" alt="" /></p><p>当我看到这一页时，发现了一个熟悉的身影 – Python（命运的齿轮开始悄然转动…）</p><p><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414094019127.png" alt="" /></p><p>理所当然地，我开始对Python产生了较为浓厚的兴趣，并且开始尝试学习和编写程序。<br />但是那个时候，还处于一个门都没摸到的境界，学什么，怎么学都是问题。<br />好在互联网和网络上的各路大佬给了我指导。通过搜索，得到了一些学习渠道：</p><ul><li><a href="https://www.w3school.com.cn/python/index.asp">W3school - Python教程</a></li><li><a href="https://www.bilibili.com/video/BV1qW4y1a7fU/?vd_source=a1d64ca1ba2129f594954cdd4e9c4db4">黑马程序员 - # 8天python从入门到精通</a></li><li><a href="https://zhuanlan.zhihu.com/p/665135869">《Python编程：从入门到实践》</a></li></ul><p>最初我在W3school上，认识了Python中的变量与字符串、列表这些概念，进而开始读《Python编程：从入门到实践》这本书，一直学到了字典；这时我发现靠自学有些吃力，于是开始借助一些视频课程进行深入理解，如上面的黑马以及《Python编程：从入门到实践》的配套视频。</p><p>然而，还有一个问题困扰着我：没有手机电脑的情况下，如何进行编程实践？<br />那时候家里只有一台智慧屛设备(如下图所示)，其中有一个网页浏览器可以打开一些小型的网站。<br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414095403963.png" alt="" /></p><p>于是我开始寻找一些在线的编程环境，最终选择了这一款：</p><p><a href="www.onlinegdb.com">OnlineGDB</a><br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414101915980.png" alt="" /></p><p>这个平台支持代码云保存、一键分享等功能，也是我亲测好用且推荐使用的一款在线IDE。通过这个平台，我对Python进行了一定的实践练习，也为我理解编程打下了较为坚实的基础。</p><p>这是几个当年写的小程序，已经上传到我的<a href="https://github.com/Morely152/CULP">GitHub仓库</a>：</p><ul><li>2022年8月：鸡兔同笼问题<br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414110705783.png" alt="" /></li><li>2022年11月：BMI计算器<br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414110916845.png" alt="" /></li><li>2023年1月：当时看<a href="https://www.bilibili.com/video/BV1z7411e7qB/?spm_id_from=333.337.search-card.all.click&amp;vd_source=a1d64ca1ba2129f594954cdd4e9c4db4">B站UP主&quot;毕导THU&quot;的视频</a>，模拟了视频中提到的红包金额分配算法<br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414111010544.png" alt="" /></li></ul><hr /><p>到这里，已经基本学习了Python的列表、字典、函数等简单语法，我开始尝试使用这些语法编写更长更复杂的程序，并将相关文章发布到了<a href="https://blog.csdn.net/mo_li_2892197119?spm=1000.2115.3001.5343">CSDN</a>:</p><ul><li>2023.06.06：<a href="https://blog.csdn.net/mo_li_2892197119/article/details/131060909?spm=1001.2014.3001.5501">&quot;老李算法&quot;随机抽号程序</a></li><li>2023.06.16：<a href="https://blog.csdn.net/mo_li_2892197119/article/details/131248621?spm=1001.2014.3001.5501">&quot;顺手牵羊&quot;Python小游戏</a></li><li>2023.12.31：<a href="https://blog.csdn.net/mo_li_2892197119/article/details/135318063?spm=1001.2014.3001.5501">“卖榴莲”问题的过程模拟</a></li><li>2024.02.13：<a href="https://blog.csdn.net/mo_li_2892197119/article/details/135318063?spm=1001.2014.3001.5501">Python决策小游戏</a></li></ul><p>家里一众长辈都觉得我适合从事医生、会计、公务员等职业，对我选择计算机专业一致表示担忧和否定(出于某些原因，我没有告诉他们我已经进行了初步的入门学习)；即使如此，我还是坚持选择了这个专业和这门行业。我开始探索计算机专业需要具备的知识和授课的内容，在2023年的暑假开始了计算机科学知识的学习：</p><ul><li><a href="https://www.bilibili.com/video/av21376839/?vd_source=a1d64ca1ba2129f594954cdd4e9c4db4">计算机科学速成课 - 哔哩哔哩</a></li><li><a href="https://www.ituring.com.cn/book/1139">《计算机是怎样跑起来的》- 图灵社区</a></li><li><a href="https://www.ituring.com.cn/book/details/1136">《程序是怎样跑起来的》- 图灵社区</a></li></ul><p>通过学习较为底层的知识，我理解了内存是如何存储数据的，CPU是怎样执行命令和处理数据的等一系列问题，不仅让我有了更专业正确的编程思维，也让我在进入大学之后学习《计算机导论》这门课程更更加轻松。</p><hr /><p>高考结束后，我在填报志愿时选择了计算机科学与技术这一专业进行学习，并且很幸运地被分数线较高的一所大学录取，开启了专业学习程序设计的生涯。</p><p>高考结束的暑假，在我哥的指导和AI的帮助下，开发了一款Windows系统进程守护工具(<a href="https://github.com/Morely152/Windows_progress_guard">点击访问GitHub仓库</a>)<br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414114727509.png" alt="“进程守护工具”界面效果" /></p><hr /><p>感谢那个一往无前的自己，刚进入大学时，由于大部分初级知识(C语言、计导等)都提前学习过，我没有在学业上感到很大的压力，顺利结束了大一上学期的学习。</p><p>在大一上学期的期末，我开始了第二个软件(<a href="https://docs.qq.com/aio/DTXhHcmF4cFdiaWVs?p=5PkhMQNLMYURZMuKOtTPNI">《番茄魔方》时间管理工具</a>)的设计，并且在寒假期间完成了测试版的制作和发布，软件更新持续至今，项目代码已经突破5k行。<br /><img src="%E5%8D%81%E4%B9%9D%E5%B2%81%E7%9A%84%E6%A0%88%E5%B8%A7%EF%BC%9A%E5%9B%9E%E6%BA%AF%E9%82%A3%E4%BA%9B%E6%94%B9%E5%8F%98%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-20250414114516350.png" alt="《番茄魔方》界面效果" /></p><hr /><p>回望过去，我与编程的相遇源于Python，也正是写下的第一行<code>print(&quot;hello world&quot;)</code>，将我带入了一个兼具创意与严谨的崭新世界。<strong>如果将人生看作最终指向<code>return 0</code>的程序，我的人生就已经写下了长长短短的19行。从最初的<code>Hello world</code>到现在的<code>Hello coder</code>，在一条初心不换的道路上，做不负星光的赶路人;矢志前行，终见曙光。</strong></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JSON保存设置项异常复原问题</title>
    <link href="/2025/02/10/JSON%E4%BF%9D%E5%AD%98%E8%AE%BE%E7%BD%AE%E9%A1%B9%E5%BC%82%E5%B8%B8%E5%A4%8D%E5%8E%9F%E9%97%AE%E9%A2%98/"/>
    <url>/2025/02/10/JSON%E4%BF%9D%E5%AD%98%E8%AE%BE%E7%BD%AE%E9%A1%B9%E5%BC%82%E5%B8%B8%E5%A4%8D%E5%8E%9F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="一-问题概述"><a class="markdownIt-Anchor" href="#一-问题概述"></a> 一、问题概述：</h1><p>在WPF项目中新建了文件Settings.json，用于保存开机自启动的设置记录，并将其属性设置为“内容–始终复制”以将JSON文件添加到项目文件夹中。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;AutoStartEnabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>定义了下面的方法来载入设置的内容：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadSettings</span>()</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (File.Exists(SettingsFilePath))<br>    &#123;<br>        <span class="hljs-built_in">string</span> json = File.ReadAllText(SettingsFilePath);<br>        <span class="hljs-built_in">dynamic</span> settings = JsonConvert.DeserializeObject(json);<br>        AutoStartEnabled = settings.AutoStartEnabled;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">// 如果文件不存在，初始化默认设置</span><br>        AutoStartEnabled = <span class="hljs-literal">false</span>;<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>运行程序，发现每次启动时，通过UI反馈的记录均为False，即使手动修改为True也会在运行的一瞬间变成False。</li></ul><hr /><h1 id="二-寻找原因"><a class="markdownIt-Anchor" href="#二-寻找原因"></a> 二、寻找原因：</h1><ul><li>手动修改为True扔不起效，可排除保存记录异常的情况。</li><li>怀疑是UI控件初始属性为False导致，查找之后未发现异常。</li><li>通过断点追踪，发现在程序读取JSON文件内容之前就已经变成了false。</li><li>又怀疑是程序在初始化时触发了按钮的取消选中事件，但未触发断点，可以排除。</li><li>这时突然想起“内容–始终复制”的属性，问题原因终于找到了。</li></ul><hr /><h1 id="三-问题复现"><a class="markdownIt-Anchor" href="#三-问题复现"></a> 三、问题复现</h1><ul><li>选中按钮后，修改JSON中&quot;AutoStartEnabled&quot;的值为True。</li><li>再次启动程序时，“始终复制”的属性使得开发环境中的Settings.json复制到编译后的程序所在的文件夹，将修改了的Json文件覆盖，造成属性异常变成False的假象。</li></ul><hr /><h1 id="四-解决问题"><a class="markdownIt-Anchor" href="#四-解决问题"></a> 四、解决问题</h1><ul><li>直接从源头解决问题，将开发环境中的json文件删除，杜绝文件被覆盖的可能性。</li><li>经过测试，现有方法支持在未找到json文件时创建文件，因此不需添加新建Json文件的程序。</li></ul><hr /><h1 id="五-回顾反思"><a class="markdownIt-Anchor" href="#五-回顾反思"></a> 五、回顾反思</h1><ul><li>通过测试发现，直接从文件夹启动编译后的程序不会出现覆盖的问题，证实了前面的分析。</li><li>能被这种小问题困扰如此之久，反映出自己对开发工具的不熟悉和思维深度的不足，也提示自己要通过积极寻找问题来积累自己的经验。</li></ul>]]></content>
    
    
    <categories>
      
      <category>踩坑记录</category>
      
      <category>WPF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Visual Studio</tag>
      
      <tag>WPF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OBS Studio录屏声音异常发闷问题</title>
    <link href="/2025/02/05/OBS%20Studio%E5%BD%95%E5%B1%8F%E5%A3%B0%E9%9F%B3%E5%BC%82%E5%B8%B8%E5%8F%91%E9%97%B7%E9%97%AE%E9%A2%98/"/>
    <url>/2025/02/05/OBS%20Studio%E5%BD%95%E5%B1%8F%E5%A3%B0%E9%9F%B3%E5%BC%82%E5%B8%B8%E5%8F%91%E9%97%B7%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<hr /><p>在使用OBS进行录屏时，发现声音失真发闷现象很严重。<br />上网查询，得到以下原因及解决方案，建议逐个排查：</p><h2 id="1输入设备选择了蓝牙耳机耳机使用麦克风录音导致音质变差"><a class="markdownIt-Anchor" href="#1输入设备选择了蓝牙耳机耳机使用麦克风录音导致音质变差"></a> 1.输入设备选择了蓝牙耳机，耳机使用麦克风录音导致音质变差</h2><p>原贴链接：<a href="https://www.zhihu.com/question/340185115">打开 OBS Studio 后播放音乐音质差如何解决？-知乎</a><br />解决方案：将输入设备全部禁用，或者留一个电脑自带的麦克风阵列</p><p><img src="OBS-Studio%E5%BD%95%E5%B1%8F%E5%A3%B0%E9%9F%B3%E5%8F%91%E9%97%B7%E9%97%AE%E9%A2%98-20250205223911572.png" alt="" /></p><hr /><h2 id="2-系统扬声器开启了音频增益"><a class="markdownIt-Anchor" href="#2-系统扬声器开启了音频增益"></a> 2. 系统扬声器开启了音频增益</h2><p>原贴链接：<a href="https://www.bilibili.com/opus/827471891323158578">[首发] OBS音频很闷得慌的解决办法 -哔哩哔哩</a><br />解决方案：关闭音频增益</p><p><img src="OBS-Studio%E5%BD%95%E5%B1%8F%E5%A3%B0%E9%9F%B3%E5%8F%91%E9%97%B7%E9%97%AE%E9%A2%98-20250205224201021.png" alt="" /></p><hr /><h2 id="3开启了杜比音效"><a class="markdownIt-Anchor" href="#3开启了杜比音效"></a> 3.开启了杜比音效</h2><p>原帖链接:<a href="https://blog.lifewith.fun/zh-cn/">为什么OBS录制视频的声音发闷 -MystCastle的博客</a><br />解决方案：关闭杜比音效<br /><img src="OBS-Studio%E5%BD%95%E5%B1%8F%E5%A3%B0%E9%9F%B3%E5%8F%91%E9%97%B7%E9%97%AE%E9%A2%98-20250205224514227.png" alt="" /></p><hr /><h2 id="4默认输入设备和通信设备不正确"><a class="markdownIt-Anchor" href="#4默认输入设备和通信设备不正确"></a> 4.默认输入设备和通信设备不正确</h2><p>看评论区有人说要把默认的输入设备和通信设备都换成麦克风阵列，不能用蓝牙耳机<br />解决方案：<br /><img src="OBS-Studio%E5%BD%95%E5%B1%8F%E5%A3%B0%E9%9F%B3%E5%8F%91%E9%97%B7%E9%97%AE%E9%A2%98-20250205224858254.png" alt="" /><br /><img src="OBS-Studio%E5%BD%95%E5%B1%8F%E5%A3%B0%E9%9F%B3%E5%8F%91%E9%97%B7%E9%97%AE%E9%A2%98-20250205225019769.png" alt="" /><br />在我的电脑上，进行到这一步时，声音基本与关闭OBS时一致，失真发闷问题得到解决。</p>]]></content>
    
    
    <categories>
      
      <category>踩坑记录</category>
      
      <category>OBS Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OBS Studio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>音频无法播放：局部变量与类字段的混淆和滥用问题</title>
    <link href="/2025/02/05/%E9%9F%B3%E9%A2%91%E6%97%A0%E6%B3%95%E6%92%AD%E6%94%BE%EF%BC%9A%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E7%B1%BB%E5%AD%97%E6%AE%B5%E7%9A%84%E6%B7%B7%E6%B7%86%E5%92%8C%E6%BB%A5%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <url>/2025/02/05/%E9%9F%B3%E9%A2%91%E6%97%A0%E6%B3%95%E6%92%AD%E6%94%BE%EF%BC%9A%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E7%B1%BB%E5%AD%97%E6%AE%B5%E7%9A%84%E6%B7%B7%E6%B7%86%E5%92%8C%E6%BB%A5%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="一-问题概述"><a class="markdownIt-Anchor" href="#一-问题概述"></a> 一、问题概述</h1><p>在 <code>WPF</code> 中，试图通过 <code> NAudio</code> 库实现多音轨音频播放时，程序运行之后不能听到声音。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> NAudio.Wave;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><br><span class="hljs-keyword">namespace</span> *** <span class="hljs-comment">// 省略</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MainWindow</span> : <span class="hljs-title">Window</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> AudioManager audioManager = <span class="hljs-keyword">new</span> AudioManager();<br>        <span class="hljs-comment">// 其他部分省略</span><br><br>       <span class="hljs-comment">// 软件启动时，主页窗口初始化</span><br>       <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WindowLoaded</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, RoutedEventArgs e</span>)</span><br>       &#123;<br>           <span class="hljs-comment">// 加载白噪音资源</span><br>           <span class="hljs-keyword">var</span> audioManager = <span class="hljs-keyword">new</span> AudioManager();<br>           audioManager.AddPlayer(<span class="hljs-string">&quot;***&quot;</span>);<br>           audioManager.AddPlayer(<span class="hljs-string">&quot;***&quot;</span>);<br>       &#125;<br><br><span class="hljs-comment">// 音频资源管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AudioManager</span><br>&#123;<br><span class="hljs-keyword">private</span> List&lt;AudioPlayer&gt; _players = <span class="hljs-keyword">new</span> List&lt;AudioPlayer&gt;();<br><span class="hljs-comment">// 添加音源</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddPlayer</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> filePath</span>)</span><br>&#123;<br><span class="hljs-keyword">try</span><br>&#123;<br><span class="hljs-keyword">var</span> player = <span class="hljs-keyword">new</span> AudioPlayer(filePath);<br>_players.Add(player);<br>Debug.WriteLine(<span class="hljs-string">$&quot;已添加播放器，当前总数：<span class="hljs-subst">&#123;_players.Count&#125;</span>&quot;</span>);<br>Debug.WriteLine(<span class="hljs-string">$&quot;索引：<span class="hljs-subst">&#123;_players.IndexOf(player)&#125;</span>&quot;</span>);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex)<br>&#123;<br>Debug.WriteLine(<span class="hljs-string">$&quot;添加播放器失败: <span class="hljs-subst">&#123;ex.Message&#125;</span>&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 整体播放</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PlayAll</span>()</span><br>&#123;<br>Debug.WriteLine(<span class="hljs-string">$&quot;PlayAll 调用时列表长度: <span class="hljs-subst">&#123;_players.Count&#125;</span>&quot;</span>); <span class="hljs-comment">// 新增日志</span><br><span class="hljs-built_in">int</span> Cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> player <span class="hljs-keyword">in</span> _players)<br>&#123;<br>player.Play();<br>Cnt++;<br>&#125;<br>Debug.WriteLine(<span class="hljs-string">$&quot;已播放所有音源，总数：<span class="hljs-subst">&#123;Cnt&#125;</span>&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AudioPlayer</span><br>&#123;<br><span class="hljs-keyword">private</span> WaveOutEvent _waveOut;<br><span class="hljs-keyword">private</span> AudioFileReader _audioFile;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AudioPlayer</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> filePath</span>)</span><br>&#123;<br>_audioFile = <span class="hljs-keyword">new</span> AudioFileReader(filePath);<br>_waveOut = <span class="hljs-keyword">new</span> WaveOutEvent();<br>_waveOut.Init(_audioFile);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Play</span>()</span> =&gt; _waveOut.Play();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Pause</span>()</span> =&gt; _waveOut.Pause();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Stop</span>()</span> =&gt; _waveOut.Stop();<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Volume<br>&#123;<br><span class="hljs-keyword">get</span> =&gt; _audioFile.Volume;<br><span class="hljs-keyword">set</span> =&gt; _audioFile.Volume = <span class="hljs-keyword">value</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 <code>Debug.WriteLine</code> 方法输出的调试信息：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">已添加播放器，当前总数：1</span><br><span class="hljs-attribute">索引：0</span><br><span class="hljs-attribute">已添加播放器，当前总数：2</span><br><span class="hljs-attribute">索引：1</span><br><span class="hljs-attribute">PlayAll 调用时列表长度</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br>已播放所有音源，总数：0<br></code></pre></td></tr></table></figure><p>发现在添加了两个文件的情况下，调用<code>PlayAll</code>时列表长度却是<code>0</code>而不是预期的<code>2</code>。此前，在使用如下方法播放单个音频时：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AudioManager</span><br>&#123;<br><span class="hljs-comment">//其他方法同上</span><br><span class="hljs-comment">// 独立播放</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Play</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index</span>)</span><br>&#123;<br>_players[index].Play();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后通过<code>audioManager.Play(0)</code>播放列表的第一个音频文件时，编译器报错：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">System.ArgumentOutOfRangeException:“<span class="hljs-built_in">Index</span> was <span class="hljs-keyword">out</span> of <span class="hljs-built_in">range</span>. Must be non-negative and less than the <span class="hljs-built_in">size</span> of the collection. ”<br></code></pre></td></tr></table></figure><p>即索引超出列表范围，一度让我百思不得其解……</p><hr /><h1 id="二-寻找原因"><a class="markdownIt-Anchor" href="#二-寻找原因"></a> 二、寻找原因</h1><p>询问AI后，提示我问题很可能出在 <strong><code>_players</code> 列表未被正确填充</strong>，导致 <code>PlayAll()</code> 循环时列表为空(这也与我的预期相符)，并给出如下检查思路：</p><ol><li><strong>确认 <code>AddPlayer</code> 方法是否被正确调用</strong></li><li><strong>检查 <code>AudioPlayer</code> 构造函数是否失败</strong></li><li><strong>确认 <code>_players</code> 列表的作用域和生命周期</strong></li><li><mark><strong>检查<code>AudioManager</code>实例是否唯一</strong></mark></li><li><strong>验证文件路径和权限</strong></li></ol><ul><li>最开始我考虑了文件加载失败的情况，但是在尝试了使用绝对路径以及将属性修改为资源或者内容之后，没有报告找不到文件的错误，似乎可以排除这种情况。</li><li>然后我想到是不是有可能多次初始化了<code>_players</code>列表，导致其意外清空？<ul><li>查找代码中出现<code>_players</code>的语句，似乎只有一次初始化，可以排除这种情况。</li><li><img src="%E6%9C%AA%E5%91%BD%E5%90%8D-20250205124929280.png" alt="" /></li></ul></li><li>最后我突然想到，在页面初始化时似乎将<code>AudioManager</code>类实例化了一次，但是在后面的代码中好像也看到了类似的<code>new</code>语句，是不是多次实例化了<code>AudioManager</code>呢？<ul><li>查找代码中的<code>new AudioManager()</code>语句，果然查到了两次：</li><li><img src="%E6%9C%AA%E5%91%BD%E5%90%8D-20250205125110116.png" alt="" /></li></ul></li></ul><blockquote><p>[!INFO] 根据上述分析，问题出现在多次实例化<code>AudioManager</code>类:</p><ol><li>在<code>MainWindow</code>类中，实例化了一次，在这里是一个类字段，属于 <code>MainWindow</code> 类的成员变量，生命周期与 <code>MainWindow</code> 实例相同。</li><li>在<code>WindowLoaded</code>事件中，又实例化了一次。在这里是一个局部变量 <code>audioManager</code>，它的作用域仅限于该方法内部。当方法执行完毕后，局部变量会被销毁。</li></ol></blockquote><blockquote><p>诊断结果：<strong>对 <code>audioManager</code> 的添加和读取操作不是同一个对象</strong>。</p></blockquote><ul><li>具体解释：<ul><li>在 <code>WindowLoaded</code> 方法中调用 <code>AddPlayer</code> 时，操作的是局部变量 <code>audioManager</code>。</li><li>尝试在其他地方（如按钮点击事件）调用 <code>PlayAll</code> 时，操作的是类字段的 <code>audioManager</code>。</li><li>由于局部变量和类字段是两个不同的对象，局部变量中添加的音源不会影响类字段的 <code>audioManager</code>，因此 <code>PlayAll</code> 时列表为空，无法播放。</li></ul></li></ul><hr /><h1 id="三-解决问题"><a class="markdownIt-Anchor" href="#三-解决问题"></a> 三、解决问题</h1><p>删去<code>WindowLoaded</code>中的局部变量，直接使用生命周期更长的类字段，程序运行之后成功输出了音频。</p><hr /><h1 id="四-反思总结"><a class="markdownIt-Anchor" href="#四-反思总结"></a> 四、反思总结</h1><p><strong>关键陷阱：局部变量覆盖类字段</strong></p><blockquote><p>在 C# 中，如果方法内部声明了一个与类字段同名的局部变量，编译器会优先使用局部变量，导致类字段被“隐藏”。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">private</span> AudioManager audioManager = <span class="hljs-keyword">new</span> AudioManager();<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SomeMethod</span>()</span><br>&#123;<br>    <span class="hljs-keyword">var</span> audioManager = <span class="hljs-keyword">new</span> AudioManager(); <span class="hljs-comment">// 这里实际是一个局部变量</span><br>    audioManager.AddPlayer(<span class="hljs-string">&quot;xxx&quot;</span>);         <span class="hljs-comment">// 操作的是局部变量，而非类字段</span><br>&#125;<br></code></pre></td></tr></table></figure><p>直接使用类字段，可以确保所有操作都作用于同一个 <code>AudioManager</code> 实例，从而解决播放失败的问题。</p><blockquote><p>[!NOTE]- 局部变量＆类字段：如何进行取舍？</p><ul><li>![[音频无法播放：局部变量与类字段的混淆和滥用问题-20250205132505196.png|622]]</li><li>使用类字段：<ul><li>数据需要长期存在：变量需要在整个类的生命周期内保持状态，或在多个方法间共享。</li><li>资源需要全局访问：某些对象（如数据库连接、网络客户端）需要被多个方法重复使用。</li><li>需要维护对象状态：对象的状态（如播放进度、配置参数）需要在多次调用中持续更新。</li></ul></li><li>使用局部变量：<ul><li>临时计算或中间结果：变量仅在一次方法调用中临时使用，无需长期保存。</li><li>避免副作用：希望方法的行为纯粹，不依赖或修改类的状态。</li><li>限制作用域以提高安全性：防止变量被意外修改（如敏感数据）。</li></ul></li></ul></blockquote><p>反思：出现这样的问题，主要在于对面向对象编程的认识和经验不足，对面向过程变成有较大的惯性思维，习惯将初始化操作写在页面加载的事件中。</p>]]></content>
    
    
    <categories>
      
      <category>踩坑记录</category>
      
      <category>WPF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>版本控制工具Git</title>
    <link href="/2024/09/02/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7Git/"/>
    <url>/2024/09/02/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7Git/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本篇笔记摘自<a href="https://www.bilibili.com/video/BV1HM411377j/?spm_id_from=333.1387.homepage.video_card.click">【GeekHour】一小时Git教程_哔哩哔哩</a></p></blockquote><hr /><h1 id="一-概述"><a class="markdownIt-Anchor" href="#一-概述"></a> 一、概述</h1><h2 id="1git是一个免费开源的分布式版本控制系统使用仓库一种数据库记录文件变化"><a class="markdownIt-Anchor" href="#1git是一个免费开源的分布式版本控制系统使用仓库一种数据库记录文件变化"></a> 1.Git是一个免费开源的分布式版本控制系统，使用仓库(一种数据库)记录文件变化</h2><p><img src="Pasted-image-20240618140433.png" alt="" /></p><h2 id="2版本控制系统跟踪文件变化分为集中式和分布式两种"><a class="markdownIt-Anchor" href="#2版本控制系统跟踪文件变化分为集中式和分布式两种"></a> 2.版本控制系统：跟踪文件变化，分为集中式和分布式两种</h2><h3 id="1集中式如svn"><a class="markdownIt-Anchor" href="#1集中式如svn"></a> ①集中式(如SVN)</h3><p><img src="Pasted-image-20240618140732.png" alt="" /></p><ul><li>文件保存在中央服务器上，修改时先下载最新版本再上传</li><li>优点：使用简单</li><li>缺点：中央服务器或网络故障时，客户无法工作</li></ul><h3 id="2分布式如git"><a class="markdownIt-Anchor" href="#2分布式如git"></a> ②分布式(如Git)</h3><p><img src="Pasted-image-20240618141111.png" alt="" /></p><ul><li>版本库在每个用户上，进行本地修改，分享式再同步仓库</li><li>优点：免费开源，速度快，功能强大，支持离线工作，分支管理强大</li></ul><hr /><h1 id="二-git的安装与配置"><a class="markdownIt-Anchor" href="#二-git的安装与配置"></a> 二、Git的安装与配置</h1><h2 id="1网址git官网下载地址"><a class="markdownIt-Anchor" href="#1网址git官网下载地址"></a> 1.网址：<a href="https://git-scm.com/downloads">Git官网下载地址</a></h2><h2 id="2安装后检查版本"><a class="markdownIt-Anchor" href="#2安装后检查版本"></a> 2.安装后检查版本</h2><blockquote><p>git -v</p></blockquote><ul><li>回显<code>git version 2.45.2.windows.1</code></li></ul><h2 id="3打开终端"><a class="markdownIt-Anchor" href="#3打开终端"></a> 3.打开终端</h2><p>在任意文件夹中右键鼠标，选择菜单栏中的<code>Open Git Bash Here</code>，即可打开Git的控制台，默认路径为当前文件夹。</p><h2 id="4使用git"><a class="markdownIt-Anchor" href="#4使用git"></a> 4.使用Git</h2><p>常见使用方法：</p><ul><li>命令行：基本常用的方式，在终端中输入命令控制</li><li>图形化界面：即GUI</li><li>IDE插件/拓展：常用<br />常用命令：<br /><img src="Git-Cheet-Sheet-ByGeekHour.png" alt="" /></li></ul><h2 id="5配置git"><a class="markdownIt-Anchor" href="#5配置git"></a> 5.配置Git</h2><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">命令</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">配置用户名</td><td style="text-align:center"><code>git config --global user.name 用户名</code></td><td style="text-align:center">用户名是多个单词时用引号括起来</td></tr><tr><td style="text-align:center">配置邮箱</td><td style="text-align:center"><code>git config --global user.email 邮箱</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">保存配置</td><td style="text-align:center"><code>git config --global credential.helper store</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">查看配置</td><td style="text-align:center"><code>git config --global --list</code></td><td style="text-align:center"></td></tr></tbody></table><ul><li><code>--local</code>：本地配置，只对本地仓库有效</li><li><code>--global</code>：全局配置，对所有仓库有效（常用）</li><li><code>--system</code>：系统配置，对所有用户有效（少用）</li></ul><hr /><h1 id="三-新建版本库仓库"><a class="markdownIt-Anchor" href="#三-新建版本库仓库"></a> 三、新建版本库（仓库）</h1><h2 id="1版本库"><a class="markdownIt-Anchor" href="#1版本库"></a> 1.版本库</h2><ul><li>又叫仓库(Repository,Repo)，相当于一个由Git管理的文件目录，</li><li>Git能跟踪和管理其中每个文件的修改和增删</li></ul><h2 id="2创建仓库"><a class="markdownIt-Anchor" href="#2创建仓库"></a> 2.创建仓库</h2><h3 id="方式一本地创建git-init"><a class="markdownIt-Anchor" href="#方式一本地创建git-init"></a> 方式一：本地创建(Git init)</h3><p><strong>创建</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> 仓库名<br><span class="hljs-built_in">cd</span> 仓库名<br>git init<br></code></pre></td></tr></table></figure><p><strong>检验仓库是否创建</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -a <br></code></pre></td></tr></table></figure><p>回显<code>./  ../  .git/</code>表示仓库已创建</p><h3 id="方式二从远程服务器克隆git-clone"><a class="markdownIt-Anchor" href="#方式二从远程服务器克隆git-clone"></a> 方式二：从远程服务器克隆(Git clone)</h3><ul><li>使用**<code>git clone</code>命令**从github或者gitee上克隆已经存在的仓库<ul><li><code>git clone 仓库地址</code></li></ul></li><li>回显<code>Cloning into 'remote-repo'...</code></li></ul><hr /><h1 id="四-工作区域和文件状态"><a class="markdownIt-Anchor" href="#四-工作区域和文件状态"></a> 四、工作区域和文件状态</h1><h2 id="1工作区域"><a class="markdownIt-Anchor" href="#1工作区域"></a> 1.工作区域</h2><p><img src="Pasted-image-20240630144908.png" alt="" /></p><ul><li>工作区(working directory)、工作目录<ul><li>如文件资源管理器中的文件夹</li></ul></li><li>暂存区(staging area)、索引(index)<ul><li>用于保存即将提交到仓库的修改内容</li></ul></li><li>本地仓库(local repository)<ul><li>用命令创建的仓库</li><li>包含了完整的项目历史和元数据</li></ul></li><li>修改工作区文件–添加文件到暂存区–提交到本地仓库<ul><li>整个过程中可以用git命令来查看、比较或者撤销修改</li><li>类似于工厂生产–货车转运–仓库储存的过程</li></ul></li></ul><h2 id="2文件状态"><a class="markdownIt-Anchor" href="#2文件状态"></a> 2.文件状态</h2><p><img src="Pasted-image-20240630145735.png" alt="" /></p><ul><li>未跟踪(untracked):未被git管理的文件</li><li>未修改(unmodified):已被管理但未变化</li><li>已修改(modified):已经修改但未暂存</li><li>已暂存(staged):已修改且已暂存</li></ul><hr /><h1 id="五-添加和提交文件"><a class="markdownIt-Anchor" href="#五-添加和提交文件"></a> 五、添加和提交文件</h1><h2 id="1添加文件"><a class="markdownIt-Anchor" href="#1添加文件"></a> 1.添加文件</h2><ul><li><p>使用vs code添加：</p><ul><li>在“源代码管理”中打开仓库文件夹</li><li>直接在文件夹里新建文件</li></ul></li><li><p>使用Linux命令：</p><ul><li><img src="Pasted-image-20240630205042.png" alt="" /></li></ul></li><li><p>使用cat 文件名的命令浏览文件：</p><ul><li><img src="Pasted-image-20240630205314.png" alt="" /></li></ul><h2 id="2git-status命令查看仓库状态"><a class="markdownIt-Anchor" href="#2git-status命令查看仓库状态"></a> 2.git status命令：查看仓库状态</h2></li></ul><blockquote><p>git status</p></blockquote><ul><li>回显：<ul><li>（未进行任何操作的空仓库）<br /><img src="Pasted-image-20240630150449.png" alt="" /></li><li>（添加文件后的仓库）<br /><img src="Pasted-image-20240630205501.png" alt="" /><ul><li>出现了未跟踪的文件file1.txt</li></ul></li></ul></li></ul><h2 id="3git-add命令将文件添加到暂存区"><a class="markdownIt-Anchor" href="#3git-add命令将文件添加到暂存区"></a> 3.git add命令：将文件添加到暂存区</h2><p><img src="Pasted-image-20240630205747.png" alt="" /></p><ul><li>目标文件从红色变成绿色，表明文件已处于已暂存状态</li></ul><table><thead><tr><th style="text-align:left">相关命令</th><th style="text-align:left">作用描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>git rm --cached 已暂存文件</code></td><td style="text-align:left">取消暂存指定的文件</td></tr><tr><td style="text-align:left"><code>git add 文件名</code></td><td style="text-align:left">添加指定名称的文件</td></tr><tr><td style="text-align:left"><code>git add *.文件格式</code></td><td style="text-align:left">添加文件夹中特定文件格式的所有文件</td></tr><tr><td style="text-align:left"><code>git add .</code></td><td style="text-align:left">添加文件夹中所有的文件</td></tr></tbody></table><h2 id="4git-commit命令将暂存区的文件提交到仓库"><a class="markdownIt-Anchor" href="#4git-commit命令将暂存区的文件提交到仓库"></a> 4.git commit命令：将暂存区的文件提交到仓库</h2><p><img src="Pasted-image-20240703151346.png" alt="" /></p><ul><li>使用<code>git commit -m &quot;附加信息&quot;</code>的命令来将暂存区的文件提交到仓库</li></ul><h2 id="5git-log命令查看提交记录"><a class="markdownIt-Anchor" href="#5git-log命令查看提交记录"></a> 5.git log命令：查看提交记录</h2><p><img src="Pasted-image-20240703152923.png" alt="" /></p><hr /><h1 id="六-版本回退"><a class="markdownIt-Anchor" href="#六-版本回退"></a> 六、版本回退</h1><h2 id="1git-reset的三种形式"><a class="markdownIt-Anchor" href="#1git-reset的三种形式"></a> 1.git reset的三种形式</h2><table><thead><tr><th style="text-align:center">形式</th><th style="text-align:center">回退版本</th><th style="text-align:center">保留工作区</th><th style="text-align:center">保留暂存区</th><th>场景or区别</th></tr></thead><tbody><tr><td style="text-align:center"><code>git reset --soft</code></td><td style="text-align:center">〇</td><td style="text-align:center">〇</td><td style="text-align:center">〇</td><td>无需添加到暂存区</td></tr><tr><td style="text-align:center"><code>git reset --hard</code></td><td style="text-align:center">〇</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td>放弃修改内容，谨慎使用！</td></tr><tr><td style="text-align:center"><code>git reset --mixed</code></td><td style="text-align:center">〇</td><td style="text-align:center">〇</td><td style="text-align:center">×</td><td>需要git add再提交</td></tr></tbody></table><ul><li><code>上述命令 + 历史版本ID</code>：回退到指定版本</li><li><code>上述命令 + head^</code>：回退到上个版本</li><li>如果不慎误操作，可以使用<code>git reflog</code>查看以往版本的版本号，然后再git reset即可恢复</li></ul><hr /><h1 id="七-查看文件在不同区域-版本之间的差异"><a class="markdownIt-Anchor" href="#七-查看文件在不同区域-版本之间的差异"></a> 七、查看文件在不同区域、版本之间的差异</h1><h2 id="1git-diff命令"><a class="markdownIt-Anchor" href="#1git-diff命令"></a> 1.git diff命令：</h2><ul><li>比较文件在工作区与暂存区之间的差异<br /><img src="Pasted-image-20240703224932.png" alt="" /><br />（输入;q退出vim编辑器）</li><li>输出空行表示无差异</li><li>其他diff命令：(命令后加文件名可指定比较某文件的差异)<ul><li><code>git diff HEAD</code>：比较文件在工作区与版本库之间的差异</li><li><code>git diff --cache</code>：比较文件在暂存区与版本库之间的差异</li><li><code>git diff 版本ID_1 版本ID_2</code>：比较两个指定版本之间的差异</li><li><code>git diff HEAD~n HEAD</code>：比较之前第n个版本与当前版本的差异，n可省略</li><li><code>git diff 分支名_1 分支名_2</code>：比较两个指定分支之间的差异</li></ul></li></ul><hr /><h1 id="八-删除文件"><a class="markdownIt-Anchor" href="#八-删除文件"></a> 八、删除文件</h1><h2 id="1直接将文件移动到回收站然后添加到暂存区并提交"><a class="markdownIt-Anchor" href="#1直接将文件移动到回收站然后添加到暂存区并提交"></a> 1.直接将文件移动到回收站，然后添加到暂存区并提交</h2><p><img src="Pasted-image-20240708231557.png" alt="" /></p><h2 id="2git-rm-命令同时删除工作区和暂存区的文件"><a class="markdownIt-Anchor" href="#2git-rm-命令同时删除工作区和暂存区的文件"></a> 2.git rm 命令：同时删除工作区和暂存区的文件</h2><p><img src="Pasted-image-20240708233026.png" alt="" /></p><ul><li>命令<code>git rm --cached 文件名</code>可以只删除暂存区的文件，保留工作区的文件</li></ul><hr /><h1 id="九-gitignore文件"><a class="markdownIt-Anchor" href="#九-gitignore文件"></a> 九、gitignore文件</h1><h2 id="1需要忽略的文件"><a class="markdownIt-Anchor" href="#1需要忽略的文件"></a> 1.需要忽略的文件</h2><ul><li>系统或软件自动生成的文件</li><li>编译产生的中间文件和结果文件</li><li>运行时生成的日志文件、缓存文件和临时文件</li><li>涉及身份、密码、口令、秘钥等敏感信息文件</li></ul><h2 id="2忽略某个或某类文件"><a class="markdownIt-Anchor" href="#2忽略某个或某类文件"></a> 2.忽略某个或某类文件</h2><ul><li>例：有两个文件log1.log和log2.log，忽略log1.log<ul><li>添加文件.gitignore</li><li>在文件.gitignore中写入“log1.log”</li><li><img src="Pasted-image-20240708234249.png" alt="" /><ul><li>文件log1.log虽然存在于工作区中，但被忽视了，没有添加到暂存区，也就不会被提交到仓库</li></ul></li><li>如果想忽略所有的.log文件，在文件.gitignore中写入*.log即可</li></ul></li><li>注意：如果文件已被添加到版本库，那么忽视无效，需要先删除版本库中的文件</li></ul><h2 id="3忽略文件夹"><a class="markdownIt-Anchor" href="#3忽略文件夹"></a> 3.忽略文件夹</h2><p>在文件.gitignore中写入文件夹名/即可</p><ul><li>例：忽略文件夹temp：<ul><li><img src="Pasted-image-20240709124638.png" alt="" /></li></ul></li><li>忽略后要记得提交</li></ul><h2 id="4匹配规则"><a class="markdownIt-Anchor" href="#4匹配规则"></a> 4.匹配规则</h2><ul><li>对于.gitignore中的规则，从上往下进行忽略</li><li>空行或以#开头的行会被git忽略<ul><li>一般用空行分隔，用#注释</li></ul></li><li>使用标准的Blob模式匹配，例如：<ul><li><ul><li>匹配任意个字符</li></ul></li><li>? 匹配单个字符</li><li>[] 匹配列表中的单个字符<ul><li>\ [abc]表示a或者b或者c</li><li>\ [0-9]表示任意一位数字</li><li>\ [a-z]表示任意一位小写字母</li></ul></li></ul></li><li>** 表示任意匹配的中间目录</li><li>！ 表示取反，例如：<br /><img src="Pasted-image-20240709132037.png" alt="" /></li></ul><h2 id="5直接使用已有的gitignore模版"><a class="markdownIt-Anchor" href="#5直接使用已有的gitignore模版"></a> 5.直接使用已有的.gitignore模版</h2><blockquote><p>[!info] 在github中获取.gitignore模版<br /><a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p></blockquote><hr /><h1 id="十-github上的远程仓库"><a class="markdownIt-Anchor" href="#十-github上的远程仓库"></a> 十、Github上的远程仓库</h1><h2 id="1ssh配置"><a class="markdownIt-Anchor" href="#1ssh配置"></a> 1.SSH配置</h2><ul><li>SSH方式的优缺点：<ul><li>规避在push本地代码时验证用户名和密码(HTTPS方式需要)</li><li>但是需要在github上添加SSH公钥配置</li></ul></li><li>配置SSH公钥<ul><li>执行命令<code>cd ~</code>回到根目录</li><li>执行命令<code>cd .ssh</code>进入.ssh目录<ul><li>若报错，需提前在用户文件夹下创建.ssh文件夹</li></ul></li><li>执行命令<code>ssh-keygen -t rsa -b 4096</code>指定生成密钥的协议和大小</li><li>输入秘钥文件名称，之前未配置过可以直接回车，默认生成id_rsa文件<ul><li>如果已配置，创建新的文件名(如tset)</li></ul></li><li>输入密码</li><li>查看本地目录，生成了test和test.pub两个文件<ul><li>文件test是私钥文件，不能给任何人</li><li>文件test.pub是公钥文件，可以上传到github</li></ul></li><li>复制test.pub的内容</li><li>在github中点击 头像 -&gt; settings -&gt; SSH and GPG keys -&gt; New SSH key -&gt; 输入标题 -&gt;粘贴test.pub的内容 -&gt; Add SSH key,成功在github上添加公钥<ul><li>如果在创建SSH时指定了新的文件名，需要创建一个config文件并将下面五行内容添加到文件中，输入命令<code>tail -5 config</code>，意思是访问github时指定使用SSH下的test密钥<img src="Pasted-image-20240710070230.png" alt="" /></li></ul></li><li>然后使用cd命令回到本地仓库，执行命令<code>git clone SSH地址</code>，输入创建密钥时设置的密码</li><li>创建成功，可以使用<code>cd 远程仓库名称</code>的命令进入远程仓库目录</li></ul></li></ul><h2 id="2git-push与git-pull"><a class="markdownIt-Anchor" href="#2git-push与git-pull"></a> 2.git push与git pull</h2><ul><li><code>git push</code>:将本地仓库的内容推送到远程仓库<ul><li>推送前记得将文件提交到本地仓库</li></ul></li><li><code>git pull</code>:默认拉取远程仓库别名为origin的main分支，把远程仓库的指定分支拉取到本地<ul><li><code>git pull</code>命令会进行合并操作，如果本地仓库的修改和远程仓库中的修改有冲突会导致合并失败</li></ul></li></ul><h2 id="3关联本地仓库与远程仓库"><a class="markdownIt-Anchor" href="#3关联本地仓库与远程仓库"></a> 3.关联本地仓库与远程仓库</h2><ul><li>添加远程仓库<ul><li>复制github空仓库下的该命令并粘贴到git中执行<img src="Pasted-image-20240710235337.png" alt="" /></li><li>其中origin是默认的仓库别名</li><li>若报错<code>error: remote origin already exists</code>，需要执行git remote rm origin删除关联的远程仓库，再进行添加</li></ul></li><li>查看当前仓库对应的远程仓库别名和地址<ul><li>执行命令<code>git remote -v</code><img src="Pasted-image-20240710150636.png" alt="" /></li></ul></li><li>指定分支名称<ul><li><img src="Pasted-image-20240710235712.png" alt="" /></li><li>若当前本地仓库分支是main,可跳过</li></ul></li><li>关联本地仓库与远程仓库的main分支<ul><li><img src="Pasted-image-20240710235904.png" alt="" /></li><li>-u是upstream的缩写，表示关联</li></ul></li></ul><hr /><h1 id="十一-gitee与gitlab"><a class="markdownIt-Anchor" href="#十一-gitee与gitlab"></a> 十一、Gitee与Gitlab</h1><h2 id="1特点"><a class="markdownIt-Anchor" href="#1特点"></a> 1.特点</h2><ul><li>Gitee是国内平台，访问速度较高</li><li>Gitlab支持私有化部署，安全性较高</li></ul><h2 id="2gitee"><a class="markdownIt-Anchor" href="#2gitee"></a> 2.Gitee</h2><ul><li>操作基本与github相同，但是创建仓库时需要先设为私有后再公开</li></ul><h2 id="3gitlab"><a class="markdownIt-Anchor" href="#3gitlab"></a> 3.Gitlab</h2><ul><li>略</li></ul><hr /><h1 id="十二-使用ide拓展"><a class="markdownIt-Anchor" href="#十二-使用ide拓展"></a> 十二、使用IDE拓展</h1><ul><li>在vs code的源代码管理器中，被修改并保存的文件会被记录到“更改”中，提供三个操作按钮和一个状态标识<img src="Pasted-image-20240711095545.png" alt="" /><ul><li>前三个按钮分别表示打开文件、取消修改、添加暂存</li><li>最后的M表示已修改(Modified)</li></ul></li><li>可以更方便地暂存、提交和推送</li></ul><hr /><h1 id="十三-分支branch"><a class="markdownIt-Anchor" href="#十三-分支branch"></a> 十三、分支(Branch)</h1><h2 id="1简介应用场景"><a class="markdownIt-Anchor" href="#1简介应用场景"></a> 1.简介＆应用场景</h2><ul><li>分支相当于代码库中的不同版本<ul><li>各分支独立存在，有自己的提交记录</li></ul></li><li>适合用于团队协作和开发管理，提高效率，规避冲突<ul><li>多个开发人员在各自分支上工作，然后合并到一起</li><li>建立问题修复分支处理bug和缺陷，保证主线稳定可用</li></ul></li></ul><h2 id="2基本操作"><a class="markdownIt-Anchor" href="#2基本操作"></a> 2.基本操作</h2><ul><li><code>git branch</code><ul><li>作用：查看当前仓库的所有分支</li><li><code>git checkout -b 分支名</code>：新建一个分支并自动跳转到该分支</li><li><code>git checkout 分支名</code>：切换到已有的分支</li><li><code>git merge 分支名</code>：将要被合并的分支与当前分支合并(提前切换到主分支，命令中的分支名写要被合并的分支名称)</li><li><code>git log --graph -- oneline --decorate --all</code>:查看的分支图</li></ul></li><li>分支合并后不会自动删除，需要手动通过命令删除分支<ul><li>删除已合并的分支：<code>git branch -d 要删除的分支名</code></li><li>强制删除：<code>git branch -D 要删除的分支名</code></li></ul></li></ul><h2 id="3分支合并冲突"><a class="markdownIt-Anchor" href="#3分支合并冲突"></a> 3.分支合并冲突</h2><ul><li>冲突的产生<ul><li>两个分支的修改内容有重复，git无法确定覆盖哪一个修改<ul><li><img src="Git-20240902135407385.png" alt="" /></li></ul></li></ul></li><li>解决办法<ul><li>使用<code>git diff</code>命令查看发生冲突的文件及内容</li><li>手动修改两个文件</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
